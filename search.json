[{"content":"6月底，趁着娃刚考完试，学校也没课了，请假带娃去大连玩了一趟。\n这次是跟娃好朋友一起出行，人两口子以前做旅行社的，直接搞了一个行程表，我们就跟报了个旅行团一样。\n第一天 下午14:13到达大连北站，当地租车然后直奔酒店。\n办理入住，放下行李简单休息后，开车去赶海。\n一片砾石滩，找了本地人，提供装备带着进去赶海。\n雨鞋就是薄薄一层，需要先走过一片海滩，特别地硌脚，路上还有特别多绿苔，非常地滑。\n翻石头抓螃蟹，玩的不亦乐乎。\n晚上小酌一下。\n第二天 酒店就在海边，早起出来海边溜达一圈，大早起就有大爷在海里游泳了。\n早上酒店吃完早餐，出发动物园。\n今天大雾，白茫茫一片，缆车什么都看不到。\n银沙滩喂海鸥，一根香肠直接给我叼走了。\n中午火锅，环境很棒，吃的很开心。\n大连自然博物馆，溜达一圈。\n星海广场打卡，难得碰到了一会晴天。\n晚上小吃街，吃到饱。\n第三天 今天有雨不出门，安排在酒店水上乐园活动。\n水上漂流，呛了几口水，总算学会漂了，真挺好玩。\n造浪池，全都玩嗨了，就往浪大的地方去。\n第四天 早上起来去喂梅花鹿。\n大连美术馆，偶遇大雨，躲在馆里避雨。\n今天是妈妈们逛街日，各种商业街打卡。\n晚上吃的回勺面，超级好吃，强烈推荐。\n运气好，因为今天下雨没有卖完，被我们赶上了。\n第五天 夏家河赶海，挖蛏子。\n金石滩喂海鸥、挖沙子，天居然还放晴了。\n雾终于散了，原来海对面这么多机器呢。\n第六天 收拾行李，退房，坐火车回京。\n愉快的假期一晃就过去了，期待下次的出行。\n","permalink":"https://liudon.com/posts/dalian-trip/","summary":"\u003cp\u003e6月底，趁着娃刚考完试，学校也没课了，请假带娃去大连玩了一趟。\u003c/p\u003e\n\u003cp\u003e这次是跟娃好朋友一起出行，人两口子以前做旅行社的，直接搞了一个行程表，我们就跟报了个旅行团一样。\u003c/p\u003e","title":"大连之行"},{"content":"家里有两块地，一块离的远租出去了，另一块近的老爸老妈还在自己种。\n自从上高中后，就很少下地了，现在让我下地，我都找不到自家地。\n老爸生日回家，刚好赶上收麦，记录一下。\n到地里没半个小时，收割机就弄完了，直接拉到粮食点卖掉。\n遥想以前小时候，还得用镰割，割完拉回来，中午还要打场，现在真的是省事了。\n爸妈自己种的西红柿和黄瓜。\n门前种的山楂、葡萄、核桃、石榴。\n","permalink":"https://liudon.com/posts/%E5%9B%9E%E5%AE%B6%E6%94%B6%E9%BA%A6/","summary":"\u003cp\u003e家里有两块地，一块离的远租出去了，另一块近的老爸老妈还在自己种。\u003c/p\u003e\n\u003cp\u003e自从上高中后，就很少下地了，现在让我下地，我都找不到自家地。\u003c/p\u003e\n\u003cp\u003e老爸生日回家，刚好赶上收麦，记录一下。\u003c/p\u003e","title":"回家收麦"},{"content":"六一儿童节，娃和好朋友约好一起爬长城。\n去年我们去过慕田峪长城，人不多、好爬不累，两家商量后决定还是去慕田峪。\n早上打车到清河站，还是粉色的小火车。\n这次人多没占到位置，俩小朋友只能席地而坐了。\n到了之后，直奔摆渡车，缆车上山。\n今天有雾，雾中的长城也是另一番景色。\n媳妇第一次爬慕田峪，一起登顶。\n排队1个多小时，终于坐上了小朋友心心念的滑道，确实很好玩。\n下山打车往车站赶，结果碰到堵车，没赶上火车。\n折腾半天总算改签上7点的车，在车站点了个KFC，边吃边等车，晚上9点总算到家了。\n儿童节快乐～\n","permalink":"https://liudon.com/posts/hiking-great-wall-childrens-day/","summary":"\u003cp\u003e六一儿童节，娃和好朋友约好一起爬长城。\u003c/p\u003e\n\u003cp\u003e去年我们\u003ca href=\"https://liudon.com/posts/climbing-mutianyu-great-wall-on-october-1st/\"\u003e去过慕田峪长城\u003c/a\u003e，人不多、好爬不累，两家商量后决定还是去慕田峪。\u003c/p\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/hiking-great-wall-childrens-day/WechatIMG189.jpg_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/hiking-great-wall-childrens-day/WechatIMG189.jpg_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"WechatIMG189.jpg\" width=\"1080\" height=\"1440\" alt=\"\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\n\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/hiking-great-wall-childrens-day/WechatIMG190.jpg_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/hiking-great-wall-childrens-day/WechatIMG190.jpg_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"WechatIMG190.jpg\" width=\"1080\" height=\"1920\" alt=\"\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e\n\u003cp\u003e早上打车到清河站，还是粉色的小火车。\u003c/p\u003e\n\u003cp\u003e这次人多没占到位置，俩小朋友只能席地而坐了。\u003c/p\u003e","title":"六一儿童节爬长城"},{"content":"最近有个交接服务的数据库要升级版本，升级最后切换瞬间会有一个闪断。\n这里业务侧需要确保有自动重连机制，否则会影响服务。\n因为是交接的服务，得通过代码再确认一下。\n业务代码里使用了xorm包操作的数据库，连接池管理是底层database/sql负责的。\n读了一遍代码，总算搞清楚这里断连自动重连的机制了：\nxorm对外的增删改查方法最终都会调用到了exec方法，代码出处。\n可以看到这里调到了database/sql里的ExecContext方法，代码出处。\n这里调用到了exec方法:\ndb.conn 从连接池获取连接； db.execDC 执行sql，最后会通过release方法将连接再放回连接池； 这里release传入的是db.releaseConn方法，实现如图:\n这里调用了putConn方法，实现如图：\n注意红框部分，这里检查执行结果如果为连接错误，会通过maybeOpenNewConnections创建一个新连接，同时将此连接关闭。\n","permalink":"https://liudon.com/posts/golang-database-sql-auto-reconnect-mechanism/","summary":"\u003cp\u003e最近有个交接服务的数据库要升级版本，升级最后切换瞬间会有一个闪断。\u003c/p\u003e\n\u003cp\u003e这里业务侧需要确保有自动重连机制，否则会影响服务。\u003c/p\u003e\n\u003cp\u003e因为是交接的服务，得通过代码再确认一下。\u003c/p\u003e","title":"Golang database/sql 数据库断线自动重连机制解析"},{"content":"问题表现 重现代码：\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;time\u0026#34; ) func main() { client := \u0026amp;http.Client{ Timeout: time.Duration(3) * time.Second, } for i := 0; i \u0026lt; 100; i++ { go func() { for { req, _ := http.NewRequest(http.MethodGet, \u0026#34;https://baidu.com\u0026#34;, nil) rsp, err := client.Do(req) if err != nil { fmt.Println(\u0026#34;request failed\u0026#34;, err) continue } rsp.Body.Close() body, err := io.ReadAll(rsp.Body) if err != nil { fmt.Println(\u0026#34;read body failed\u0026#34;, err) continue } fmt.Println(string(body)) } }() } select {} } 启动后，随着请求越来越多，很快就出现了\u0026quot;cannot assign requested address\u0026quot;错误，服务器出现大量TIME_WAIT连接。\n问题原因 net/http代码\ntype Client struct { // Transport specifies the mechanism by which individual // HTTP requests are made. // If nil, DefaultTransport is used. Transport RoundTripper 未配置Transport时，使用默认的DefaultTransport。\nvar DefaultTransport RoundTripper = \u0026amp;Transport{ Proxy: ProxyFromEnvironment, DialContext: defaultTransportDialContext(\u0026amp;net.Dialer{ Timeout: 30 * time.Second, KeepAlive: 30 * time.Second, }), ForceAttemptHTTP2: true, MaxIdleConns: 100, IdleConnTimeout: 90 * time.Second, TLSHandshakeTimeout: 10 * time.Second, ExpectContinueTimeout: 1 * time.Second, } 这里指定了最大空闲连接为100，未指定单个host的最大空闲连接。\nfunc (t *Transport) maxIdleConnsPerHost() int { if v := t.MaxIdleConnsPerHost; v != 0 { return v } return DefaultMaxIdleConnsPerHost } 如果未配置MaxIdleConnsPerHost，则使用默认的DefaultMaxIdleConnsPerHost配置。\n// DefaultMaxIdleConnsPerHost is the default value of [Transport]\u0026#39;s // MaxIdleConnsPerHost. const DefaultMaxIdleConnsPerHost = 2 这下清楚了：\n100个协程，请求同一个地址，只能保留2个空闲连接，超出的请求完就会退出，产生一个TIME_WAIT；\n然后再创建一个连接，请求完关闭，又产生一个TIME_WAIT，直至耗尽端口。\n解决方案 创建Http.Client时，配置MaxIdleConnsPerHost即可。\n","permalink":"https://liudon.com/posts/cannot-assign-requested-address-in-golang-http-client/","summary":"\u003ch3 id=\"问题表现\"\u003e问题表现\u003c/h3\u003e\n\u003cp\u003e重现代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;io\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;net/http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClient\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#a6e22e\"\u003eTimeout\u003c/span\u003e: \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDuration\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ei\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewRequest\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ehttp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMethodGet\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://baidu.com\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ersp\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclient\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDo\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ereq\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;request failed\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ersp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBody\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eClose\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003ebody\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eio\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eReadAll\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ersp\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eBody\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;read body failed\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(string(\u003cspan style=\"color:#a6e22e\"\u003ebody\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eselect\u003c/span\u003e {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e启动后，随着请求越来越多，很快就出现了\u0026quot;cannot assign requested address\u0026quot;错误，服务器出现大量TIME_WAIT连接。\u003c/p\u003e","title":"Golang默认Http Client导致的cannot assign requested address错误"},{"content":"自从买了登山杖，娃一直说想去爬山。\n前段时间天气一直不好，山上也还是光秃秃的，就一直没去。\n趁着清明假期，带娃爬山去。\n去年假期去过一次香山，路上超堵，这次还是选择了离家不远的百望山：好爬不累。\n有了登山杖，这次我们没有走以往的大路，直奔山中的小路。\n一路台阶，走走停停，不到半个小时就登顶了。\n快到山顶的时候起风了，在山上稍作休息便下山了。\n下山直奔新街口，到老西安饭庄，来个羊肉泡馍。\n可能是自己掰的馍不够小，感觉没有那么入味，并没有很惊艳。\n吃完饭时间还早，好不容易进一趟城，上后海转转。\n沿着湖边，慢悠悠地闲逛。\n到了银锭桥，人头攒动。\n顺着人流，进入烟袋斜街，两边各种文创小店，买了些小吃稍微休息。\n出烟袋斜街，来鼓楼打个卡。\n继续向前溜达，进入南锣鼓巷。\n上一次来南锣鼓巷，应该还是刚来北京不久和同事一起来的。\n依旧是人挤人，扎进胡同里碰到个大爷，提醒不要买东西，这里东西特别贵，匆匆逛完就回家了。\n一天下来10公里，倒也没有想象的那么累。\n","permalink":"https://liudon.com/posts/qingming-festival-holiday-2025/","summary":"\u003cp\u003e自从买了登山杖，娃一直说想去爬山。\u003c/p\u003e\n\u003cp\u003e前段时间天气一直不好，山上也还是光秃秃的，就一直没去。\u003c/p\u003e\n\u003cp\u003e趁着清明假期，带娃爬山去。\u003c/p\u003e\n\u003cp\u003e去年假期去过一次香山，路上超堵，这次还是选择了离家不远的百望山：好爬不累。\u003c/p\u003e","title":"清明踏春，爬山看海"},{"content":"去年10月底，考虑到老的绿源电动车已经骑了5年，电池越来越不行，马上要冬天了，考虑换个新电动车。\n到各个品牌店里转了一圈，发现都没有车子，说是新规的缘故，要到11月份才能有新车。\n同事给推荐的小牛F400T，11月之后到店里看了，新规不让卖了，考虑一番选择了G400T。\n双11活动，京东下单3699元，店里直接提货。\n第二天直奔车管所，注销旧车，新车上牌。\n再到京通上申请以旧补贴，500元到手，整个下来3000出头。\n跟5年前的旧车比，真是天翻地覆的变化，手机解锁、蓝牙/NFC解锁，实时定位。\n续航也比之前多了很多，冬天最冷的时候三天一充，平时基本一周一充。\n到现在马上5个月，已经骑行了1000公里。\n","permalink":"https://liudon.com/posts/xiaoniu-g400t-electric-bike-experience/","summary":"\u003cp\u003e去年10月底，考虑到老的绿源电动车已经骑了5年，电池越来越不行，马上要冬天了，考虑换个新电动车。\u003c/p\u003e\n\u003cp\u003e到各个品牌店里转了一圈，发现都没有车子，说是新规的缘故，要到11月份才能有新车。\u003c/p\u003e","title":"购入小牛G400T电动车"},{"content":"盼了一冬天的雪没下，开春了，来了场大雪。\n你的浏览器不支持 video 标签。 ","permalink":"https://liudon.com/posts/heavy-snow-in-beijing/","summary":"\u003cp\u003e盼了一冬天的雪没下，开春了，来了场大雪。\u003c/p\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/heavy-snow-in-beijing/WechatIMG152.jpg_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/heavy-snow-in-beijing/WechatIMG152.jpg_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"WechatIMG152.jpg\" width=\"1080\" height=\"1441\" alt=\"\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\n\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/heavy-snow-in-beijing/WechatIMG153.jpg_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/heavy-snow-in-beijing/WechatIMG153.jpg_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"WechatIMG153.jpg\" width=\"1080\" height=\"1441\" alt=\"\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/heavy-snow-in-beijing/WechatIMG154.jpg_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/heavy-snow-in-beijing/WechatIMG154.jpg_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"WechatIMG154.jpg\" width=\"1080\" height=\"1441\" alt=\"\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\n\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/heavy-snow-in-beijing/WechatIMG155.jpg_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/heavy-snow-in-beijing/WechatIMG155.jpg_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"WechatIMG155.jpg\" width=\"1080\" height=\"1441\" alt=\"\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e\n\u003cfigure\u003e\n    \u003cvideo src=2025-03-15.mp4 controls\u003e\n    你的浏览器不支持 \u003ccode\u003evideo\u003c/code\u003e 标签。\n    \u003c/video\u003e\n\u003c/figure\u003e","title":"北京的三月飞雪"},{"content":" Open-source GenBI AI Agent that empowers data-driven teams to chat with their data to generate Text-to-SQL, charts, spreadsheets, reports, and BI.\nWrenAI 是一个开源的Text-SQL 的工具，通过导入数据库结构，通过提问的方式生成SQL。\n出于安全考虑，我们使用本地llm模型进行部署。\n部署ollama 参考安装文档：https://hub.docker.com/r/ollama/ollama\ncurl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey \\ | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list \\ | sed \u0026#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g\u0026#39; \\ | sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list sudo apt-get update sudo apt-get install -y nvidia-container-toolkit sudo nvidia-ctk runtime configure --runtime=docker sudo systemctl restart docker docker run -d --gpus=all -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama 部署对应模型\ndocker exec -it ollama ollama run nomic-embed-text:latest docker exec -it ollama ollama run phi4:14b 部署完成后，需要在安全组里放开11434端口访问。\n部署WrenAI 参考官方文档：https://docs.getwren.ai/oss/installation/custom_llm\n创建本地配置目录\nmkdir -p ~/.wrenai 配置目录下新增.env文件，内容如下：\nCOMPOSE_PROJECT_NAME=wrenai PLATFORM=linux/amd64 PROJECT_DIR=/root/.wrenai # service port WREN_ENGINE_PORT=8080 WREN_ENGINE_SQL_PORT=7432 WREN_AI_SERVICE_PORT=5555 WREN_UI_PORT=3000 IBIS_SERVER_PORT=8000 WREN_UI_ENDPOINT=http://wren-ui:${WREN_UI_PORT} LLM_PROVIDER=litellm_llm GENERATION_MODEL=phi4:14b // 自定义LLM模型 LLM_OLLAMA_URL=http://部署机器IP:11434 EMBEDDER_OLLAMA_URL=http://部署机器IP:11434 OPENAI_API_KEY=sk-***** EMBEDDER_PROVIDER=litellm_embedder EMBEDDING_MODEL=nomic-embed-text // embedding模型 EMBEDDING_MODEL_DIMENSION=768 # ai service settings QDRANT_HOST=qdrant SHOULD_FORCE_DEPLOY=1 # vendor keys LLM_OPENAI_API_KEY= EMBEDDER_OPENAI_API_KEY= LLM_AZURE_OPENAI_API_KEY= EMBEDDER_AZURE_OPENAI_API_KEY= QDRANT_API_KEY= # version # CHANGE THIS TO THE LATEST VERSION WREN_PRODUCT_VERSION=0.15.3 WREN_ENGINE_VERSION=0.13.1 WREN_AI_SERVICE_VERSION=0.15.9 IBIS_SERVER_VERSION=0.13.1 WREN_UI_VERSION=0.20.1 WREN_BOOTSTRAP_VERSION=0.1.5 # user id (uuid v4) USER_UUID= # for other services POSTHOG_API_KEY=phc_nhF32aj4xHXOZb0oqr2cn4Oy9uiWzz6CCP4KZmRq9aE POSTHOG_HOST=https://app.posthog.com TELEMETRY_ENABLED=true # this is for telemetry to know the model, i think ai-service might be able to provide a endpoint to get the information #GENERATION_MODEL=gpt-4o-mini LANGFUSE_SECRET_KEY= LANGFUSE_PUBLIC_KEY= # the port exposes to the host # OPTIONAL: change the port if you have a conflict HOST_PORT=3000 AI_SERVICE_FORWARD_PORT=5555 # Wren UI EXPERIMENTAL_ENGINE_RUST_VERSION=false 配置目录下新增config.yaml文件，内容如下：\n# you should rename this file to config.yaml and put it in ~/.wrenai # please pay attention to the comments starting with # and adjust the config accordingly type: llm provider: litellm_llm timeout: 600 models: - api_base: http://部署机器IP:11434/v1 # change this to your ollama host, api_base should be \u0026lt;ollama_url\u0026gt;/v1 model: openai/phi4:14b # openai/\u0026lt;ollama_model_name\u0026gt; kwargs: n: 1 temperature: 0 --- type: embedder provider: litellm_embedder models: - model: openai/nomic-embed-text # put your ollama embedder model name here api_base: http://部署机器IP:11434/v1 # change this to your ollama host, url should be \u0026lt;ollama_url\u0026gt; timeout: 120 # 如果是CPU模式，需要调大这个超时时间 --- type: engine provider: wren_ui endpoint: http://wren-ui:3000 --- type: document_store provider: qdrant location: http://qdrant:6333 embedding_model_dim: 768 # put your embedding model dimension here timeout: 120 recreate_index: false --- # the format of llm and embedder should be \u0026lt;provider\u0026gt;.\u0026lt;model_name\u0026gt; such as litellm_llm.gpt-4o-2024-08-06 # the pipes may be not the latest version, please refer to the latest version: https://raw.githubusercontent.com/canner/WrenAI/\u0026lt;WRENAI_VERSION_NUMBER\u0026gt;/docker/config.example.yaml type: pipeline pipes: - name: db_schema_indexing embedder: litellm_embedder.openai/nomic-embed-text document_store: qdrant - name: historical_question_indexing embedder: litellm_embedder.openai/nomic-embed-text document_store: qdrant - name: table_description_indexing embedder: litellm_embedder.openai/nomic-embed-text document_store: qdrant - name: db_schema_retrieval llm: litellm_llm.openai/phi4:14b embedder: litellm_embedder.openai/nomic-embed-text document_store: qdrant - name: historical_question_retrieval embedder: litellm_embedder.openai/nomic-embed-text document_store: qdrant - name: sql_generation llm: litellm_llm.openai/phi4:14b engine: wren_ui - name: sql_correction llm: litellm_llm.openai/phi4:14b engine: wren_ui - name: followup_sql_generation llm: litellm_llm.openai/phi4:14b engine: wren_ui - name: sql_summary llm: litellm_llm.openai/phi4:14b - name: sql_answer llm: litellm_llm.openai/phi4:14b engine: wren_ui - name: sql_breakdown llm: litellm_llm.openai/phi4:14b engine: wren_ui - name: sql_expansion llm: litellm_llm.openai/phi4:14b engine: wren_ui - name: sql_explanation llm: litellm_llm.openai/phi4:14b - name: sql_regeneration llm: litellm_llm.openai/phi4:14b engine: wren_ui - name: semantics_description llm: litellm_llm.openai/phi4:14b - name: relationship_recommendation llm: litellm_llm.openai/phi4:14b engine: wren_ui - name: question_recommendation llm: litellm_llm.openai/phi4:14b - name: question_recommendation_db_schema_retrieval llm: litellm_llm.openai/phi4:14b embedder: litellm_embedder.openai/nomic-embed-text document_store: qdrant - name: question_recommendation_sql_generation llm: litellm_llm.openai/phi4:14b engine: wren_ui - name: chart_generation llm: litellm_llm.openai/phi4:14b - name: chart_adjustment llm: litellm_llm.openai/phi4:14b - name: intent_classification llm: litellm_llm.openai/phi4:14b embedder: litellm_embedder.openai/nomic-embed-text document_store: qdrant - name: data_assistance llm: litellm_llm.openai/phi4:14b - name: sql_pairs_indexing document_store: qdrant embedder: litellm_embedder.openai/nomic-embed-text - name: sql_pairs_deletion document_store: qdrant embedder: litellm_embedder.openai/nomic-embed-text - name: sql_pairs_retrieval document_store: qdrant embedder: litellm_embedder.openai/nomic-embed-text llm: litellm_llm.openai/phi4:14b - name: preprocess_sql_data llm: litellm_llm.openai/phi4:14b - name: sql_executor engine: wren_ui - name: sql_question_generation llm: litellm_llm.openai/phi4:14b - name: sql_generation_reasoning llm: litellm_llm.openai/phi4:14b --- settings: column_indexing_batch_size: 50 table_retrieval_size: 10 table_column_retrieval_size: 100 allow_using_db_schemas_without_pruning: false query_cache_maxsize: 1000 query_cache_ttl: 3600 langfuse_host: https://cloud.langfuse.com langfuse_enable: true logging_level: DEBUG development: true 下载部署shell，执行安装： https://docs.getwren.ai/oss/installation#using-wren-ai-launcher\ncurl -L https://github.com/Canner/WrenAI/releases/latest/download/wren-launcher-linux.tar.gz | tar -xz \u0026amp;\u0026amp; ./wren-launcher-linux 选择Custom模式，点击确定，部署成功。\n记得防火墙放通3000端口访问。\n部署完成后，通过浏览器访问http://部署机器IP:3000访问WrenAI服务。\n限制 MySQL当前仅支持8.0以上版本；\n纯CPU硬件下一次提问耗时在15分钟以上，腾讯云GPU计算型GN7 - 8核 32G下一次提问耗时在5分钟左右。\n","permalink":"https://liudon.com/posts/wrenai-local-llm-usage-guide/","summary":"\u003cblockquote\u003e\n\u003cp\u003eOpen-source GenBI AI Agent that empowers data-driven teams to chat with their data to generate Text-to-SQL, charts, spreadsheets, reports, and BI.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eWrenAI 是一个开源的Text-SQL 的工具，通过导入数据库结构，通过提问的方式生成SQL。\u003c/p\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/wrenai-local-llm-usage-guide/wren_workflow.png_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/wrenai-local-llm-usage-guide/wren_workflow.png_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"wren_workflow.png\" width=\"1080\" height=\"437\" alt=\"\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e","title":"wrenAI本地LLM模型部署"},{"content":"娃看完中华寻宝记，一直想去天津转转。\n大年初九，返京第二天，带娃错峰去一趟天津。\n7点出门，直奔北京南站，一路不敢耽搁，在发车前10分钟赶上了车。\n以前一直听我爸说老家的河最终流到了海河，在路上看地图，发现确实最终汇入了海河。\n世纪钟，本以为整点会报时来着，等了半天结果不是。\n上午在意式风情区转了转，结果就是一些卖吃的、纪念品的地方，网红书店打卡。\n路上遇到的小蓝车，居然是带后座的，可惜娃太大坐不下了。\n桂发祥总店里的大麻花。\n耳朵眼炸糕，来一个就行，多了吃不下。\n中午简单吃个饭，转站五大道，先去听个相声。\n路过瓷房子，外面简单看一眼就好。\n名流茶馆，特别小的一个门脸。\n上一次现场听相声，还是在北京，那会岳云鹏还没火。\n2个小时，物超所值，这次天津行最值的一个地方了。\n听完出来，外面已经变天，风巨大，特别的冷。\n简单转了转，直奔古文化街，看摩天轮。\n晚上吃过饭，外面实在是太冷了，风超级大。\n摩天轮没有开，远远的打个卡。\n返程，又是开车前10分钟上车。\n","permalink":"https://liudon.com/posts/the-trip-of-tianjin/","summary":"\u003cp\u003e娃看完中华寻宝记，一直想去天津转转。\u003c/p\u003e\n\u003cp\u003e大年初九，返京第二天，带娃错峰去一趟天津。\u003c/p\u003e\n\u003cp\u003e7点出门，直奔北京南站，一路不敢耽搁，在发车前10分钟赶上了车。\u003c/p\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/the-trip-of-tianjin/IMG_0328.PNG_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/the-trip-of-tianjin/IMG_0328.PNG_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"IMG_0328.PNG\" width=\"1080\" height=\"2341\" alt=\"\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e","title":"天津一日游"},{"content":" 2024年已经过去3个月了，这篇年终总结从元旦拖到了现在。\n2024年是我的本命年，这一年发生了很多事，这一年过的并不太如意。\n早就想要总结这一年，但不知道从哪下笔。\n工作 今年的工作愈发忙碌，统计了一下这一年9点半下班打车85次。\n工作的时间越来越长，持续的加班让整个人变得疲惫、易怒。\n到公司基本一坐就是一天，没时间活动，尝试了两个月骑行上下班。\n生活 因为一些事情，跟媳妇闹得一度想要离婚。\n好在聊开了，也让我懂得有事一定要沟通，不要憋在心里。\n上一次带娃出行是18年了，趁着暑假带娃出去走走。\n我们全家去了一趟青岛，虽然时间很短，但是娃玩的很开心。\n十一的时候，带娃爬了一次长城，我俩也算“好汉”了。\n尝试了一次绿道骑行，路况不好，不建议走。\n车技一般，还是容易起步熄火，不过媳妇说开的越来越好了，也敢一个人上路了。\n博客 今年可以用笔耕不辍来形容，全年一共更新了23篇内容，共计18w字。\n访问Top3的文章：\n加速Cloudflare访问\n你好 Follow\n搭建自托管IPFS Gateway服务，替代Cloudflare的IPFS Gateway\n今年搞定了新站的Google Adsense申请，蚂蚁肉也是肉。\n财务 今年把商贷还清了。\n股市收益+24%，重仓NVDA，悲剧的是开年获利已经全部回吐了。\n新的一年，继续加油！\n","permalink":"https://liudon.com/posts/review-2024/","summary":"\u003cblockquote\u003e\n\u003cp\u003e2024年已经过去3个月了，这篇年终总结从元旦拖到了现在。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e2024年是我的本命年，这一年发生了很多事，这一年过的并不太如意。\u003c/p\u003e\n\u003cp\u003e早就想要总结这一年，但不知道从哪下笔。\u003c/p\u003e","title":"2024年终总结"},{"content":"昨天像往常一样打开博客，发现评论没有加载出来。\n一开始以为是手机网络问题，用电脑复现了一下，发现twikoo的js访问报错了。\nstaticfile.org是一个公共的前端cdn，怎么证书有问题了呢？\n搜索了一下，结果找到这么一篇内容：\n和 WDCP 、LNMP 、OneinStack 一样，这次的 Staticfile 、BootCDN 、Polyfill 事件也是背后指向同一个组织[[1]]。更进一步的研究表明这些组织似乎会恶意攻击其他提供类似服务的供应商，同时采取接触洽谈来并入攻击目标。 在这种做法下，曾经由七牛云提供服务的Staticfile.org被易手，而原先由个人提供服务、由又拍云提供接入服务的BootCSS也同样被易手。 但是这些背后的交易在事件发生前却没有人进行公开，也许是原来的提供者厌倦了日复一日付出却看不到回报的生活，也许是这些组织瞒天过海许下了虚假的承诺，让原本积累了大量用户的基础服务成为了这些组织用来攻击用户们的利刃。\n详细内容见供应链投毒后，我们的选择还剩下哪些？\nstaticfile.org目前已不再由七牛负责维护，而是一个叫河南泉磐网络科技有限公司负责，该服务已不可靠，存在黑产利用的情况。\n更换为cdnjs.cloudflare.com服务后，评论功能恢复正常。\n","permalink":"https://liudon.com/posts/remove-staticfile.org-from-your-website/","summary":"\u003cp\u003e昨天像往常一样打开博客，发现评论没有加载出来。\u003c/p\u003e\n\u003cp\u003e一开始以为是手机网络问题，用电脑复现了一下，发现twikoo的js访问报错了。\u003c/p\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/remove-staticfile.org-from-your-website/20241016-175127.png_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/remove-staticfile.org-from-your-website/20241016-175127.png_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"20241016-175127.png\" width=\"1080\" height=\"207\" alt=\"\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e","title":"停止使用staticfile.org服务"},{"content":"背景 细心的朋友可能会发现，我的博客图片都带上了水印。\n经过博客被恶意镜像这个事情后，我一直在思考如何防止内容被恶意盗用，尤其是博客里的一些图片。\n在当Hugo遇上AVIF，优化图片加载这篇文章里，使用了ImageMagick工具做了图片压缩。\n当时文章最后说留了个坑，其实就是今天的这篇内容，利用ImageMagick自动给图片添加水印。\n实现 思路其实和之前图片压缩一样，还是在Github Action里使用ImageMagick工具进行添加水印操作，不依赖第三方云服务。\nworkflow代码：\n- name: Compress Image run: | # 安装依赖 sudo apt-get update sudo apt-get install -y build-essential libx11-dev libxext-dev zlib1g-dev \\ libpng-dev libjpeg-dev libfreetype6-dev libxml2-dev liblcms2-dev \\ libopenexr-dev libtiff-dev libraw-dev libheif-dev libde265-dev \\ libfftw3-dev libglib2.0-dev libwebp-dev # 编译ImageMagick wget https://download.imagemagick.org/ImageMagick/download/ImageMagick.tar.gz tar xvzf ImageMagick.tar.gz cd ImageMagick-7.* ./configure make sudo make install sudo ldconfig /usr/local/lib magick --version cd ../ # 将原图转换大小，同时添加文本水印 find ./content/posts/ -type f \\( -name \u0026#34;*.jpg\u0026#34; -o -name \u0026#34;*.png\u0026#34; -o -name \u0026#34;*.jpeg\u0026#34; \\) -exec magick {} -pointsize 48 -fill \u0026#34;#909090\u0026#34; -font ./static/ArchitectsDaughter-Regular.ttf -gravity south -annotate +0+20 \u0026#34;@liudon\\nhttps://liudon.com\u0026#34; -resize 1080x\\\u0026gt; {} \\; # 将处理后的原图生成webp格式文件 find ./content/posts/ -type f \\( -name \u0026#34;*.jpg\u0026#34; -o -name \u0026#34;*.png\u0026#34; -o -name \u0026#34;*.jpeg\u0026#34; \\) -exec magick {} -quality 75 -define webp:image-hint=photo {}_1080x.webp \\; # 将处理后的原图生成avif格式文件 find ./content/posts/ -type f \\( -name \u0026#34;*.jpg\u0026#34; -o -name \u0026#34;*.png\u0026#34; -o -name \u0026#34;*.jpeg\u0026#34; \\) -exec magick {} {}_1080x.avif \\; 先将原图进行大小转换，同时添加文本水印：\n-fill #909090 代表水印颜色 -pointsize 48 代表水印文字大小 -font ./static/ArchitectsDaughter-Regular.ttf 代表水印字体，我使用了ArchitectsDaughter字体，提前下载到了git仓库 @liudon\\nhttps://liudon.com 代表文本水印内容，\\n表示换行 -gravity south 水印位置，九宫格位置 -annotate +0+20 水印偏移 水印字体文件下载\n将处理后的原图生成webp和avif格式文件\n注意，通过sudo apt-get install -y imagemagick libheif-dev安装的ImageMagick版本是6.x，转换过程会有些问题，所以这里改为了通过源码编译最新7.x版本，编译的时间略久一些。\nVersion: ImageMagick 7.1.1-39 Q16-HDRI x86_64 22428 https://imagemagick.org Copyright: (C) 1999 ImageMagick Studio LLC License: https://imagemagick.org/script/license.php Features: Cipher DPC HDRI OpenMP(4.5) Delegates (built-in): bzlib djvu fontconfig freetype heic jbig jng jp2 jpeg lcms lqr lzma openexr png raw tiff webp x xml zlib zstd Compiler: gcc (11.4) 好了，这样后续提交Github后，Workflow就会自动利用ImageMagick帮我们处理图片了。\n","permalink":"https://liudon.com/posts/auto-add-watermark-imagemagick-protect-copyright/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cp\u003e细心的朋友可能会发现，我的博客图片都带上了水印。\u003c/p\u003e\n\u003cp\u003e经过\u003ca href=\"https://liudon.com/posts/blog-malicious-mirroring/\"\u003e博客被恶意镜像\u003c/a\u003e这个事情后，我一直在思考如何防止内容被恶意盗用，尤其是博客里的一些图片。\u003c/p\u003e\n\u003cp\u003e在\u003ca href=\"https://liudon.com/posts/use-avif-to-optimize-images-on-hugo/\"\u003e当Hugo遇上AVIF，优化图片加载\u003c/a\u003e这篇文章里，使用了ImageMagick工具做了图片压缩。\u003c/p\u003e\n\u003cp\u003e当时文章最后说留了个坑，其实就是今天的这篇内容，利用ImageMagick自动给图片添加水印。\u003c/p\u003e","title":"使用 ImageMagick 自动添加水印，保护图片版权"},{"content":"Livid大佬新搞了个支持Solana的IPFS/IPNS网关，了解到还有一个.sol的web3域名。\nSolana域名服务（SNS）的目标是提供一种去中心化且可负担的方式，将域名（.sol）和链上数据连接起来。这些链上数据可以是SOL地址、 IPFS CID、图片、文本、或者任何其它的东西。\nThe mechanics of purchasing a .sol domain are a bit different than ENS — they don’t expire and most domain sales are run via auction.\nhttps://brandsec.com.au/sol-domains/\n哇塞，这域名没有过期一说，不需要续费。\n正好liudon.sol还未注册，决定入手。\n用MetaMask试了下，连接钱包的时候没有反应，问了下Livid，说是得用Phantom。\n下载好Phantom，在sns.id注册域名，提交订单的时候发现不支持ETH支付。\n又回到MetaMask，用ETH兑换USDC。\n但是提交订单支付的时候，提示还是没有USDC。\n奇了怪了，请教了一下Livid，原来这俩是不同的网络：\nMetaMask使用的是Ethereum； Phantom使用的是Solana； 按Livid的提示，用交易所把USDC转到了Phantom钱包。\n重新付款，又提示没有SOL，查了一下，原来Solana网络手续费都是用的SOL。\n又回到MetaMask兑换了些SOL，然后通过交易所转换时，发现必须得有SOL支付手续费才能进行转换。\n呃，这下彻底死胡同了。\n再次请教Livid，通过交易所兑换了些SOL，转到了Phantom钱包，这下总算搞定了。\n现在，你可以通过https://liudon.sol.build访问了。\n","permalink":"https://liudon.com/posts/how-to-register-a-.sol-domain-name/","summary":"\u003cp\u003eLivid大佬新搞了个\u003ca href=\"https://www.v2ex.com/t/1078126\"\u003e支持Solana的IPFS/IPNS网关\u003c/a\u003e，了解到还有一个\u003ccode\u003e.sol\u003c/code\u003e的web3域名。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSolana域名服务（SNS）的目标是提供一种去中心化且可负担的方式，将域名（.sol）和链上数据连接起来。这些链上数据可以是SOL地址、 IPFS CID、图片、文本、或者任何其它的东西。\u003c/p\u003e","title":"如何注册一个.sol域名"},{"content":"假期第三天，腰间盘犯了，在家躺了三天。\n假期最后一天，感觉轻了许多，今天北京天气非常好，带娃出来走走。\n不同角度的奥林匹克塔，第一次登上仰山俯视整个奥林匹克广场。\n鸟巢。\n娃发现的红蜻蜓和蝴蝶。\n拍娃。\n水上运动。\n","permalink":"https://liudon.com/posts/half-day-tour-of-olympic-forest-park/","summary":"\u003cp\u003e假期第三天，腰间盘犯了，在家躺了三天。\u003c/p\u003e\n\u003cp\u003e假期最后一天，感觉轻了许多，今天北京天气非常好，带娃出来走走。\u003c/p\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/half-day-tour-of-olympic-forest-park/WechatIMG101.jpg_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/half-day-tour-of-olympic-forest-park/WechatIMG101.jpg_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"WechatIMG101.jpg\" width=\"1080\" height=\"1440\" alt=\"\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\n\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/half-day-tour-of-olympic-forest-park/WechatIMG111.jpg_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/half-day-tour-of-olympic-forest-park/WechatIMG111.jpg_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"WechatIMG111.jpg\" width=\"1080\" height=\"1440\" alt=\"\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e","title":"奥森公园半日游"},{"content":"五一的时候带娃骑过南边这段，网上查了说北边这段不好骑，难得2号下午有空，决定先自己走一遍看看。\n从家附近的奥北森林公园开始，骑行到沙河水库，整个行程近30公里，耗时3个小时左右。\n奥北森林公园不大，出来后要走一段太平庄中街和建材城东路的社会路段，目前还在施工，道路坑洼不好骑，不过还好并不长。\n路过霍家营小区，查了一下原来是个霍家营村。\n进入霍营公园，里面很大，有专门的骑行道。\n出公园后，穿过马路，过桥右拐，注意别走错，是直接过桥。\n路过第一个路标，还是继续树林间骑行，道路一般，没有公园的专用道好骑。\n树叶已经开始变黄了，没想到，在北京还能看见一片玉米地。\n平西府的介绍，出来后上北清路转上承路，这段是社会道路，也正在施工，不好骑。\n路边有个小口子，从这进入一片绿地，地图上看在白庙村附近。\n穿过社会道路，注意安全。\n看定位在温都水城附近了，还要再穿一次社会道路。\n林间绿道结束了，出来就是定泗路，非常难走的一段，路窄，而且各种大车。\n记住这个小口子，回来的时候一不小心错过，白骑了好一段路。\n定泗路转苍龙街，然后就开始沿着温榆河一直走，路也很窄，还是有点危险的。\n沙河水库正在改造施工，我按地图路线走的，结果到跟前没法继续了。\n正确的路线应该是在来的路上有一个过河的导行路，从那里过去。\n休息了20分钟，打道回府。\n总结来说，北边这段路线要穿越占用社会道路，定泗路开始尤其危险，并不适合带娃骑行。\n路上的一些杂拍，穿林而过，感觉挺好。\n","permalink":"https://liudon.com/posts/changping-42km-greenway-cycling/","summary":"\u003cp\u003e五一的时候带娃骑过南边这段，网上查了说北边这段不好骑，难得2号下午有空，决定先自己走一遍看看。\u003c/p\u003e\n\u003cp\u003e从家附近的奥北森林公园开始，骑行到沙河水库，整个行程近30公里，耗时3个小时左右。\u003c/p\u003e","title":"昌平42公里骑行绿道打卡"},{"content":"早上5点半起床洗漱，6点出门打车直奔清河站，6点50的火车S515清河-雁栖湖。\n虽然坐地铁经常路过清河站，但还是第一次来清河站坐车。\n我们提前20分钟到的车站，已经开始排队了。\n等了一小会就开始进站了，提前进站台等车。\n终于见到了传说中粉色的怀密线列车了。\n这趟车跟普通火车不一样，不是固定座位。\n清河是第二站，上车还是有座的。\n1个小时到雁栖湖站，出站打了个滴滴，半个小时左右到慕田峪长城。\n进门往前走，直奔摆渡车，景区里人还不多。\n摆渡车下来，继续往前，会先路过索道滑道的入口，我们是缆车继续往前走。\n上缆车，几分钟就到山顶了，直奔西线开爬。\n一望无际的长城 远眺中国尊 特别陡的好汉坡 登顶后的风光 因为在电视上看过八达岭长城十一的阵势，特意选了人少一些的慕田峪长城。\n整个行程下来，人都不算太多。\n当天风特别大，还好穿了抗风的外套。\n另外爬好汉坡的时候，短短几分钟，经历了大晴天-\u0026gt;下雨-\u0026gt;下雪-\u0026gt;大晴天的变化。\n西线除了最后的好汉坡，大部分地方都是平路，台阶都很少。\n我们走走停停，3个小时左右就下山了，感觉并没有太累。\n回程没买到雁栖湖站的票，只好买的怀柔北站。\n幸好买的怀柔北站，赶上十一学生回家，怀柔北站上车就没座了。\n","permalink":"https://liudon.com/posts/climbing-mutianyu-great-wall-on-october-1st/","summary":"\u003cp\u003e早上5点半起床洗漱，6点出门打车直奔清河站，6点50的火车S515清河-雁栖湖。\u003c/p\u003e\n\u003cp\u003e虽然坐地铁经常路过清河站，但还是第一次来清河站坐车。\u003c/p\u003e\n\u003cp\u003e我们提前20分钟到的车站，已经开始排队了。\u003c/p\u003e","title":"十月一日爬慕田峪长城"},{"content":" 这篇文章会介绍基于Github Workflow使用ImageMagick生成AVIF图片，来优化Hugo站点的加载速度。\n背景 AVIF是什么？\nAVIF（AV1 Image File Format）是一种基于AV1视频编码标准的图像文件格式。\nA modern image format based on the AV1 video format.\nAVIF generally has better compression than WebP, JPEG, PNG and GIF and is designed to supersede them.\n在2024年，绝大部分浏览器都已经支持了AVIF格式。\nImageMagick是什么？\nImageMagick® is a free, open-source software suite, used for editing and manipulating digital images.\nIt can be used to create, edit, compose, or convert bitmap images, and supports a wide range of file formats, including JPEG, PNG, GIF, TIFF, and Ultra HDR.\nImageMagick是一款用于图像处理的一个工具。\n对比 AVIF说的这么好，我们来验证对比一下。\n对于一张PNG的图片，使用ImageMagick分别生成WEBP和AVIF格式的图片，文件大小如下：\n-rw-r--r--@ 1 liudon staff 1.1M 9 29 23:02 20240922-170856.png -rw-r--r--@ 1 liudon staff 15K 9 29 23:08 20240922-170856.png.avif -rw-r--r--@ 1 liudon staff 25K 9 29 23:07 20240922-170856.png.webp WEBP比PNG要节省90%左右，AVIF要比WEBP再小40%左右。\n效果出奇的好，开搞吧。\n使用 1. 生成AVIF文件 博客使用了Github Workflow来进行部署，所以生成ImageMagick的工作也就放在了Github Workflow上。\n- name: Compress Image run: | sudo apt-get update sudo apt-get install -y imagemagick libheif-dev find ./content/posts/ -type f \\( -name \u0026#34;*.jpg\u0026#34; -o -name \u0026#34;*.png\u0026#34; -o -name \u0026#34;*.jpeg\u0026#34; \\) -exec convert {} -resize 1080x\\\u0026gt; -quality 75 -define webp:image-hint=photo {}_1080x.webp \\; find ./content/posts/ -type f \\( -name \u0026#34;*.jpg\u0026#34; -o -name \u0026#34;*.png\u0026#34; -o -name \u0026#34;*.jpeg\u0026#34; \\) -exec convert {} -resize 1080x\\\u0026gt; {}_1080x.avif \\; 新增压缩图片步骤，同时生成WEBP和AVIF格式文件。\n含义说明，可以自行调整：\n-resize 1080x\u0026gt; 表示缩放到1080宽，\u0026gt;表示只有在原图宽大于1080时才进行缩放，小于不做处理。 -quality 75 表示处理后图片质量，值越小图越小，图片也越不清晰。 -define webp:image-hint=photo 这里是为了对齐Hugo自身的图片处理参数。 2. 使用AVIF文件 修改layouts/_default/_markup/render-image.html文件：\n{{- $respSizes := slice 1080 -}} {{- $dataSizes := \u0026#34;(min-width: 768px) 1080px, 100vw\u0026#34; -}} {{- $holder := \u0026#34;GIP\u0026#34; -}} {{- $hint := \u0026#34;photo\u0026#34; -}} {{- $filter := \u0026#34;box\u0026#34; -}} {{- $Destination := .Destination -}} {{- $Page := .Page -}} {{- $Text := .Text -}} {{- $Title := .Title -}} {{- $responsiveImages := (.Page.Params.responsiveImages | default site.Params.responsiveImages) | default true }} {{ with $src := .Page.Resources.GetMatch .Destination }} {{- if $responsiveImages -}} {{- $imageTypes := slice -}} {{- if and hugo.IsExtended (ne $src.MediaType.Type \u0026#34;image/webp\u0026#34;) -}} {{- $imageTypes = $imageTypes | append \u0026#34;avif\u0026#34; -}} \u0026lt;!-- avif need the first --\u0026gt; {{- $imageTypes = $imageTypes | append \u0026#34;webp\u0026#34; -}} {{- end -}} {{- if gt (index $respSizes 0) $src.Width -}} {{- $respSizes = slice $src.Width -}} {{- end -}} \u0026lt;picture\u0026gt; {{- range $imageType := $imageTypes -}} \u0026lt;source type=\u0026#34;image/{{ $imageType }}\u0026#34; srcset=\u0026#34; {{- $compressedImage := printf \u0026#34;%s_1080x.%s\u0026#34; $Destination $imageType -}} {{- $cmSrc := $Page.Resources.GetMatch $compressedImage -}} {{- if $cmSrc -}} \u0026lt;!--avif/webp file exist--\u0026gt; {{ $cmSrc.RelPermalink | absURL}} 1080w {{- else -}} \u0026lt;!-- hugo not support avif format --\u0026gt; {{ if ne $imageType \u0026#34;avif\u0026#34; }} {{- with $respSizes -}} {{- range $i, $e := . -}} {{- if ge $src.Width . -}} {{- if $i }}, {{ end -}}{{- ($src.Resize (print . \u0026#34;x \u0026#34; $imageType \u0026#34; \u0026#34; $filter) ).RelPermalink | absURL}} {{ . }}w {{- end -}} {{- end -}} {{- end -}} {{ end }} {{- end -}}\u0026#34; sizes=\u0026#34;{{ $dataSizes }}\u0026#34; /\u0026gt; {{- end -}} \u0026lt;img src=\u0026#34;{{ $Destination | safeURL }}\u0026#34; width=\u0026#34;{{ .Width }}\u0026#34; height=\u0026#34;{{ .Height }}\u0026#34; alt=\u0026#34;{{ $Text }}\u0026#34; title=\u0026#34;{{ $Title }}\u0026#34; loading=\u0026#34;lazy\u0026#34; /\u0026gt; \u0026lt;/picture\u0026gt; {{- else }} \u0026lt;img src=\u0026#34;{{ $Destination | safeURL }}\u0026#34; width=\u0026#34;{{ $src.Width }}\u0026#34; height=\u0026#34;{{ $src.Height }}\u0026#34; alt=\u0026#34;{{ $Text }}\u0026#34; title=\u0026#34;{{ $Title }}\u0026#34; loading=\u0026#34;lazy\u0026#34; /\u0026gt; {{- end }} {{ end }} 这里如果AVIF/WEBP文件已经存在，那么直接使用对应文件（注意：我这里都是生成的1080宽，如果你有调整记得一起调整）；\n否则会使用Hugo自身的Image Processing生成对应格式文件。\n效果 优化前：\n优化后：\n从WEBP切换到AVIF，文件大小减少了30%左右。\n哈哈，太棒了，效果杠杠滴。\n唯一的缺点就是每次都是全量生成图片，Workflow执行略久些（我的要5分钟左右），这里后面再优化。\n从23年11月开始有的想法，在24年9月最后一天终于实现了。🎉🎉🎉\n","permalink":"https://liudon.com/posts/use-avif-to-optimize-images-on-hugo/","summary":"\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/use-avif-to-optimize-images-on-hugo/avif-on-hugo.png_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/use-avif-to-optimize-images-on-hugo/avif-on-hugo.png_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"avif-on-hugo.png\" width=\"1080\" height=\"328\" alt=\"avif-on-hugo\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e\n\u003cp\u003e这篇文章会介绍基于Github Workflow使用ImageMagick生成AVIF图片，来优化Hugo站点的加载速度。\u003c/p\u003e","title":"当Hugo遇上AVIF，优化图片加载"},{"content":"起因 9月初的时候，在Google Search Console里发现了一个外链，域名是**.top。\n随手点过去看了下，发现居然跟我的博客内容一模一样，就是内容变成了繁体。\n知道这肯定是被拿来镜像了，不过当时也没在意，就没管。\n后来在v2ex上也发现类似的问题，还有其他博主也反馈有被镜像，感觉像是个黑产批量的操作。\n这周Google Search Console反馈我的站点有个新问题，点进去一看，嚯。\n在谷歌里搜了一下，发现已经有很多这个站点的收录了。\n开始影响到我的博客收录了，这怎么能忍呢，必须处理掉它。\n分析 测试了一下这个站点，不得不说，这个人是相当的聪明。\n使用了Cloudflare服务，隐藏了真实的服务ip。\n同时判断了访问ip，如果是国内用户直接返回了404，海外才会正常返回，这样一般国内用户就发现不了。\n还重写了robots.txt，只让谷歌收录。\n查了一下域名Whois信息，注册在阿里云。\n页面上挂的备案号都是我的，搞事情的话后面再扯上我，这就麻烦了。\n这就像块牛皮癣，越想越恶心。\n我的博客搞了两套部署，一套部署在Cloudflare Pages，一套部署在IPFS。\n接下来就是搞清楚，他是镜像的哪个站点：\n1. IPFS站点 看他的robots.txt内容，我一开始怀疑是镜像的IPFS站点liudon.xyz，感觉像是在我的robots.txt前面加了一段内容。\ncurl \u0026#39;https://liudon.xyz/robots.txt\u0026#39; User-agent: * Disallow: / 幸好还有一个Robots meta 标记，于是把IPFS部署的站点加上了这个属性。\n部署后发现这个镜像站并没有更新，排除了这个可能。\n2. Github 静态仓库 我在Github上单独搞了个分支存放生成的静态文件，Cloudflare Pages直接读取这个分支进行部署。\n怀疑他是不是监控了这个仓库的提交记录，直接拿这个来部署的镜像站。\n我把Cloudflare Pages的自动部署关掉，然后直接修改静态文件。\n更新后发现，这个静态站并没有预期的更新。\n3. Cloudflare Worker 在分析过程中，发现我的博客更新后，他的站点也会很快就更新。\n因为他的网站部署在Cloudflare上，考虑是走的Cloudflare Worker反代，直接请求目标站点，然后进行繁体翻译返回。\n这样就完全不需要关心更新的问题，完全自动化处理，太完美了。\n反制 其实这里并没有太好的办法反制，robots文件被他重写了，无法控制，使用Robots meta 标记的话会影响到我们自己的收录。\n只能是通过加一段JS代码，参考自竹林里有冰，判断访问的域名非法的话，直接跳转到正确地址。\nconst host = window.location.host if (host !== \u0026#39;liudon.com\u0026#39; \u0026amp;\u0026amp; ! host.startsWith(\u0026#39;localhost\u0026#39;) \u0026amp;\u0026amp; ! host.startsWith(\u0026#39;127.0.0.1\u0026#39;)) { document.body.innerHTML = [ \u0026#39;\u0026lt;div style=\u0026#34;margin: auto;\u0026#34;\u0026gt;\u0026#39;, \u0026#39;\u0026lt;h1\u0026gt;当前页面并非本文作者的主页，将在五秒后跳转。\u0026lt;/h1\u0026gt;\u0026#39;, \u0026#39;\u0026lt;/div\u0026gt;\u0026#39;, ].join(\u0026#39;\u0026#39;) document.body.style = [ \u0026#39;background-color: white;\u0026#39;, \u0026#39;color: black;\u0026#39;, \u0026#39;text-align: center;\u0026#39;, \u0026#39;font-size: 50px;\u0026#39;, \u0026#39;width: 100vw;\u0026#39;, \u0026#39;height: 100vh;\u0026#39;, \u0026#39;display: flex;\u0026#39;, ].join(\u0026#39;\u0026#39;) setTimeout(() =\u0026gt; { window.location.href = \u0026#39;https://liudon.com\u0026#39; }, 5000) } 查了一下，搜索Bot爬取的时候会执行js，希望能更新掉已收录的网页信息。\n","permalink":"https://liudon.com/posts/blog-malicious-mirroring/","summary":"\u003ch2 id=\"起因\"\u003e起因\u003c/h2\u003e\n\u003cp\u003e9月初的时候，在\u003ccode\u003eGoogle Search Console\u003c/code\u003e里发现了一个外链，域名是\u003ccode\u003e**.top\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e随手点过去看了下，发现居然跟我的博客内容一模一样，就是内容变成了繁体。\u003c/p\u003e","title":"博客被恶意镜像"},{"content":"上周末在搭建个人锻炼页面时，遇到个Github Pages部署的困惑。\n看了running_page项目文档，是支持部署到Github Pages页面的，对应的操作流程定义在github/workflows/gh-pages.yml文件。\n- name: Install dependencies run: pnpm install - name: Build run: PATH_PREFIX=/${{ github.event.repository.name }} pnpm build - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: # Upload dist repository path: \u0026#39;./dist\u0026#39; - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 核心逻辑就是上面这段。\n之前搞过部署hugo静态站点到Github Pages，使用的分支方式部署，编译后的静态文件单独用一个分支存放。\n这里以我自己的博客项目举例，大致流程如下图：\n按我的理解，这里最终访问的文件内容是存在gh-page分支下的。\n但是实际部署完running_page项目后，我发现并没有出现gh-page分支，但是Github Pages却可以正常访问。\n有点不可思议，这个访问的数据是在哪里的呢？\n带着这个疑问，在v2ex上发了个咨询贴。\n经过网友解惑，大致搞明白了这里的流程：\nGithub Pages的发布源有两种方式，通过分支部署和通过Github Actions部署，分别对应上图的两条分支。\n这里最终都会将build后的静态文件部署到Github Pages服务上，供用户访问。\n分支部署的方式，其实是有一个内置工作流部署到Github Pages服务上的。\n整个部署流程大致就是这样，最终的静态文件都是存在Github Pages服务上的。\n","permalink":"https://liudon.com/posts/github-pages-deployment-tutorial/","summary":"\u003cp\u003e上周末在\u003ca href=\"https://liudon.com/posts/building-a-workout-page/\"\u003e搭建个人锻炼页面\u003c/a\u003e时，遇到个\u003ccode\u003eGithub Pages\u003c/code\u003e部署的困惑。\u003c/p\u003e\n\u003cp\u003e看了\u003ccode\u003erunning_page\u003c/code\u003e项目文档，是支持部署到\u003ccode\u003eGithub Pages\u003c/code\u003e页面的，对应的操作流程定义在\u003ca href=\"https://github.com/yihong0618/running_page/blob/master/.github/workflows/gh-pages.yml\"\u003egithub/workflows/gh-pages.yml\u003c/a\u003e文件。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e name: Install dependencies\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    run: pnpm install\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e name: Build\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    run: PATH_PREFIX\u003cspan style=\"color:#f92672\"\u003e=/$\u003c/span\u003e{{ github\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eevent\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erepository\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ename }} pnpm build\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e name: Upload artifact\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    uses: actions\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eupload\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003epages\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eartifact\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003ev3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    with:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# Upload dist repository\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;./dist\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e name: Deploy to GitHub Pages\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    id: deployment\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    uses: actions\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003edeploy\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003epages\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003ev4\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e核心逻辑就是上面这段。\u003c/p\u003e","title":"Github Pages 部署流程解析"},{"content":"工作的缘故，平时基本一坐一天，缺少运动。\n时间久了，各种毛病也就出来了。\n搬到新大楼后，每天中午吃完饭楼下遛个弯，走一走，身体精神也好了很多。\n坚持了一段时间，也不了了之了。\n今年开始，决定骑车通勤，上下班路上运动一下。\n最近在别人博客里发现了运动记录，发现是通过running_page项目实现的。\n顺藤摸瓜，又发现了workouts_page项目，支持多种运动。\n于是看文档，部署起来，我的个人锻炼页面。\n整个流程：\n使用Apple Watch记录运动，导入到Strava应用里，在通过workouts_page工作流拉取数据构建页面。\n部署过程中，顺带发现个问题，提了个PR。\n这里还有个小插曲，没搞明白PR的流程，在未合入前又提交了其他代码，只好重新提了一个PR。😂\n","permalink":"https://liudon.com/posts/building-a-workout-page/","summary":"\u003cp\u003e工作的缘故，平时基本一坐一天，缺少运动。\u003c/p\u003e\n\u003cp\u003e时间久了，各种毛病也就出来了。\u003c/p\u003e\n\u003cp\u003e搬到新大楼后，每天中午吃完饭楼下遛个弯，走一走，身体精神也好了很多。\u003c/p\u003e\n\u003cp\u003e坚持了一段时间，也不了了之了。\u003c/p\u003e","title":"搭建个人锻炼页面"},{"content":" Follow: Next generation information browser.\n最近博客圈开始流行Follow邀请码，大家各种求码，一码难求。\n蹲在Discord群里一周，虽然时有发码，但最终还是狼多肉少，抢不到码呀。\n上周五好不容易加上管理员，要到了一枚邀请码，终于可以激活体验了。\n在Follow里，订阅变的异常简单，输入url，它会自己检查rss订阅。\n另外发现我的博客，在Follow显示的内容不全。\n检查了一下，发现是输出的RSS内容不全。\n修改hugo配置文件，开启RSS输出全文。\nShowFullTextinRSS: true 从木木大佬那里看到，可以认证自己的Feed，我也来搞一下我的。\nThis message is used to verify that this feed (feedId:55815884011044914) belongs to me (userId:56204227179125760). Join me in enjoying the next generation information browser https://follow.is. 咱也是带标的了。\n","permalink":"https://liudon.com/posts/hi-follow/","summary":"\u003cblockquote\u003e\n\u003cp\u003eFollow:  Next generation information browser.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e最近博客圈开始流行\u003ccode\u003eFollow邀请码\u003c/code\u003e，大家各种求码，一码难求。\u003c/p\u003e\n\u003cp\u003e蹲在\u003ccode\u003eDiscord\u003c/code\u003e群里一周，虽然时有发码，但最终还是狼多肉少，抢不到码呀。\u003c/p\u003e","title":"你好 Follow"},{"content":"中秋第一天，娃约了同学在公园玩，骑车、滑轮滑，晚上娃带我去了她说非常好吃的一家店吃饭。\n晚上回来，想着第二天在家呆一天也是看电视，打算带她爬长城，查了一下，往返的票早已售罄，只好放弃这个方案。\n园博园开了灯会，微博上看说是人巨多，还是放弃吧。\n跟娃商量了一下，最后我们决定还是爬山，再刷一次百望山。\n第二天一早睡到9点，起床洗漱，吃早饭，收拾东西，出门的时候都已经10点半了。\n还好不远，山也不高，我们也不着急，就当遛弯。\n来了好几次了，进园就直奔主题：爬。\n这次我俩先走了一段山路，虽然是台阶，但是确实快。\n昨天玩的太累，我们商量着还是继续走坡道吧。\n花了40分钟左右登顶，最快的一次记录了。\n爬到山顶，找了个阴凉，补充能量，娃请我吃雪糕。\n今天天气一般，能见度不高，远处都是灰蒙蒙的。\n歇到1点多，我俩开始下山。\n之前在微博看到陈晓卿分享的一家新疆馆子白钻美食，决定晚上带娃去尝尝。\n坐了1个半小时的地铁，到了吕营大街。\n高德导航说是十里河K2出口出站，这个口确实离的近，但是出站需要爬超级长的楼梯。\n我俩傻乎乎的爬楼上来，累个够呛。\n建议选择K1出站口，电梯出站，上来跟K2出口挨着，没有多远。\n4点多到店，一开始还担心不到饭点有没有饭，进门一看已经有几桌在吃饭的了。\n馆子里吃饭的维族人不少，看来确实是本地特色，吃完饭娃还问我是不是外国人。😂\n不知道份量，先点了羊腿抓饭和羊肉串，娃说好吃，推荐的烤包子已经没有了。\n然后又点了一份过油拌面，面条非常劲道，味道非常棒。\n喝了据说是本地的茶，查了一下，说是叫“砖茶”，免费的。\n店不大，但是味道挺好，推荐去试试，就是有点远。\n吃完地铁回家，等公交的时候错过了一趟车，还多等了半个小时。\n今天是暴走的一天。\n","permalink":"https://liudon.com/posts/mid-autumn-festival-climb/","summary":"\u003cp\u003e中秋第一天，娃约了同学在公园玩，骑车、滑轮滑，晚上娃带我去了她说非常好吃的一家店吃饭。\u003c/p\u003e\n\u003cp\u003e晚上回来，想着第二天在家呆一天也是看电视，打算带她爬长城，查了一下，往返的票早已售罄，只好放弃这个方案。\u003c/p\u003e","title":"中秋爬山"},{"content":"中午的时候，突然收到一条消息，打开一看，提示我的Google Adsense审核通过了。\n偶然发现Google Adsense里居然有40美金，想起来是之前老博客加的广告。\n看着新博客每天也有了一些访问，打算申请Google Adsense，补充些维护成本。\n按之前的流程搞了一遍，提交了申请。\n结果过了1周多，收到审核不通过邮件，说是不符合规范：低质内容，质量不高。\n搜了一下，说是现在新网站审核门槛高了。\n不放弃，继续申请呗。\n从3月份开始，申请了7次，全部被拒。\n尤其是8月25日被拒后，提示我审核次数过多，必须得等到8月31日以后才能再次申请。\n上社区发了帖子，咨询到底是什么原因，结果也没收到答复。\n这个时候，就已经有点心灰意冷，想要放弃了。\n9月5日的时候，想着再最后申请一把试试看，再不通过就算了。\n等了1周多，感觉这次估计又悬了，已经放弃了，结果今天竟然审核通过了。\n历经了8次申请，耗时半年，终于申请下来了，算是这段时间难得的一件好事。\n","permalink":"https://liudon.com/posts/my-google-adsense-approval-journey/","summary":"\u003cp\u003e中午的时候，突然收到一条消息，打开一看，提示我的\u003ccode\u003eGoogle Adsense\u003c/code\u003e审核通过了。\u003c/p\u003e\n\u003cp\u003e偶然发现\u003ccode\u003eGoogle Adsense\u003c/code\u003e里居然有40美金，想起来是之前\u003ca href=\"https://liudon.org\"\u003e老博客\u003c/a\u003e加的广告。\u003c/p\u003e","title":"Google Adsense的审核之旅"},{"content":"本文会介绍如何接入filebase的Names(IPNS)服务，使你的IPFS站点持久在线。\n背景 周末更新博客时，发现workflow的上传IPFS任务执行失败了。\nRun aquiladev/ipfs-action@master Error: RequestInit: duplex option is required when sending a body. node:internal/deps/undici/undici:12502 Error.captureStackTrace(err, this); ^ TypeError: RequestInit: duplex option is required when sending a body. at node:internal/deps/undici/undici:12502:13 at process.processTicksAndRejections (node:internal/process/task_queues:95:5) Node.js v20.13.1 查了一下，应该是Github更新了NodeJS版本导致的。\nThe following actions use a deprecated Node.js version and will be forced to run on node20: actions/checkout@v2, peaceiris/actions-hugo@v2, peaceiris/actions-gh-pages@v3, aquiladev/ipfs-action@master. For more info: https://github.blog/changelog/2024-03-07-github-actions-all-actions-will-run-on-node20-instead-of-node16-by-default/ 研究了一下，问题在于js-ipfs包的fetch方法没有传duplex参数导致。\n看Github文档，官方已经不再更新了。\nDEPRECATED: js-IPFS has been superseded by Helia 搜索一番，发现了两个包helia和js-kubo-rpc-client。\nhelia调用方法有变化，js-kubo-rpc-client和原来的js-ipfs使用一致。\n捣鼓了一番，没调通，不懂前端的锅，只能放弃，顺便给作者提了个issue，还是作者来适配吧。\n隔天看的时候，在Pull requests里发现已经有升级后的提交了。\n哈哈，原来filebase官方早就升级适配了，filebase/ipfs-action，顺带发现居然还支持了IPNS更新，太完美了！！！\n折腾记录 关于IPNS的作用，可以参考zu1k大佬的IPFS 新手指北。\n关于IPFS的部署，可以参考我的将博客部署到星际文件系统(IPFS)。\n生成密钥 因为我在云主机上部署了ipfs服务，已经有在更新IPNS。\n这里引入filebase后，相当于多个节点来更新，需要保证IPNS地址上一致的。\n所以需要将云主机的密钥导出后，导入到filebase。\n之前使用的是ipfs默认密钥，这个是无法导出的，所以只能重新生成一个密钥, ipfs-action为密钥名字，改成你自己的：\nipfs key gen ipfs-action \u0026gt; k51qzi5uqu5dh5kbbff1ucw3ksphpy3vxx4en4dbtfh90pvw4mzd8nfm5r5fnl 注意：filebase还不支持type/size参数，这里必须使用默认方式创建，否则在filebase导入已有密钥会报错。\n查看已有密钥：\nipfs key list -l \u0026gt; k51qzi5uqu5djx9olgjcibdiurrr09w75v6rdfx0cvwye295k787sssssf0d9d self \u0026gt; k51qzi5uqu5dktnw0vc8j9ci42e8gk741ici7ofpv40mo4f6e1ossssnc7uwg ipfs-action 导出密钥：\nipfs key export ipfs-action 执行后，当前目录下会生成一个ipfs-action.key文件，内容为二进制。\nfilebase导入key要求为base64编码，将其转为base64编码：\ncat ipfs-action.key | base64 \u0026gt; 5oiR5piv5rWL6K+V 记住这里的base64内容，下面会用到。\n创建NAME 进入filebase控制台，点击Create Name。\nLabel: 备注，可以随便填 CID: 填入IPFS的cid地址 Name Network: 固定选IPNS Enabled：固定选Yes Import Existing Private Key (Optional)：填入第一步的base64内容 确定提交。\n修改workflow - name: IPFS upload to filebase uses: filebase/ipfs-action@master with: path: ./public service: filebase pinName: ipfs-action filebaseBucket: ${{ secrets.FILEBASE_BUCKET }} filebaseKey: ${{ secrets.FILEBASE_KEY }} filebaseSecret: ${{ secrets.FILEBASE_SECRET }} key: ipfs-action 新增key参数，值为第二步Label填入的内容。\n提交后，执行workflow，在执行结果里找到IPNS地址。\nRun filebase/ipfs-action@master Parsing options... Parsed Options: {\u0026#34;path\u0026#34;:\u0026#34;/home/runner/work/***.github.io/***.github.io/public\u0026#34;,\u0026#34;service\u0026#34;:\u0026#34;filebase\u0026#34;,\u0026#34;host\u0026#34;:\u0026#34;ipfs.io\u0026#34;,\u0026#34;port\u0026#34;:\u0026#34;5001\u0026#34;,\u0026#34;protocol\u0026#34;:\u0026#34;https\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;key\u0026#34;:\u0026#34;ipfs-action\u0026#34;,\u0026#34;pinName\u0026#34;:\u0026#34;ipfs-action\u0026#34;,\u0026#34;pinataKey\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;pinataSecret\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;pinataPinName\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;filebaseBucket\u0026#34;:\u0026#34;***\u0026#34;,\u0026#34;filebaseKey\u0026#34;:\u0026#34;***\u0026#34;,\u0026#34;filebaseSecret\u0026#34;:\u0026#34;***\u0026#34;,\u0026#34;infuraProjectId\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;infuraProjectSecret\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;timeout\u0026#34;:\u0026#34;60000\u0026#34;,\u0026#34;verbose\u0026#34;:false,\u0026#34;pattern\u0026#34;:\u0026#34;public/**/*\u0026#34;} Adding files... Starting filebase client Started filebase client Storing files... Stored files... CID: bafybeihagzsdupyrecky7bnstzckgf5flxbrdz542jmfaep4xtbj6aa2ea Updating name... Updated name... Done Upload to IPFS finished successfully { cid: \u0026#39;bafybeihagzsdupyrecky7bnstzckgf5flxbrdz542jmfaep4xtbj6aa2ea\u0026#39;, ipfs: \u0026#39;bafybeihagzsdupyrecky7bnstzckgf5flxbrdz542jmfaep4xtbj6aa2ea\u0026#39;, ipns: \u0026#39;k51qzi5uqu5dktnw0vc8j9ci42e8gk741ici7ofpv40mo4f6e1ovj1isnc7uwg\u0026#39; } 更新DNSlink 更新域名的dnslink值：\n普通域名\neth域名\n第一次和外国人在线沟通，时差原因搞了两天才把filebase导入报错的问题解决。 😂😂😂\n另外吐槽一下filebase服务，sdk已经有相关实现了，文档都还没更新。\n","permalink":"https://liudon.com/posts/keep-your-ipfs-site-online-with-filebase-ipns/","summary":"\u003cp\u003e本文会介绍如何接入\u003ccode\u003efilebase\u003c/code\u003e的Names(IPNS)服务，使你的\u003ccode\u003eIPFS\u003c/code\u003e站点持久在线。\u003c/p\u003e\n\u003ch4 id=\"背景\"\u003e背景\u003c/h4\u003e\n\u003cp\u003e周末更新博客时，发现workflow的上传IPFS任务执行失败了。\u003c/p\u003e","title":"让你的IPFS站点持久在线：接入Filebase的Names(IPNS)服务"},{"content":"刚放暑假的时候，就答应了娃带她去一趟青岛。\n8月份要回老家，所以定在了7月中下旬出发。\n车票/酒店都订好了，结果来了个台风格美。\n出发前一周一直在查天气，就怕去了一直下雨。\n看了台风的预测路径，感觉可能能赶在台风来之前的空档，硬着头皮出发吧。\n7月26日乘坐高铁G203，中午12点左右到达青岛。\n老天很给面子，是个晴天，还有点晒。\n本来的计划路线：\n第一天： 中午到达青岛 -\u0026gt; 天主教堂 -\u0026gt; 栈桥 -\u0026gt; 八大关 -\u0026gt; 第二海水浴场 第二天： 海底世界/极地海洋馆 -\u0026gt; 石老人海水浴场 -\u0026gt; 五四广场/奥帆中心夜景 第三天： 酒店休息返京 按这个路线，定了两个酒店，一个在栈桥附近，一个在海洋馆附近。\n到了青岛后，先去酒店放行李，然后打车去吃饭。\n青岛的第一顿饭，我们选了吃海鲜，事前查了些攻略，选择了栈桥附近的燕欣饭馆。\n中午很饿，上来就吃，忘记拍照了，只有吃完后的照片了。\n油焖大虾相当不错，海肠捞饭非常好吃，韭菜很鲜。\n3个人，一共花了240元，非常推荐的一家店。\n吃完饭，溜达到天主教堂打卡。\n然后是栈桥，人非常多，中午非常晒。\n于是回酒店稍作休息，决定打车直奔第二海水浴场玩水。\n踩水的感觉太好玩了，娃从一开始的有点害怕，到后面追着水玩。\n玩完打车去的美团推荐的双合园，地方很小，需要等位。\n吃下来，感觉不如第一顿好吃，菜品一般，不太推荐。\n吃完已经9点了，错过了夜景时间，直接回酒店休息了。\n第二天起床，发现外面下雨了，风很大，最终没逃过台风的影响。\n昨天路过海洋馆，看了外面排队的人巨多，决定不去室内这种海洋馆了。\n先去了银鱼巷溜达一圈，没啥看的，中午在1907青岛老味道吃的午饭，非常不推荐的一家店。\n吃完饭打车到奥帆中心，想着坐船玩一圈，到了发现因为风大停运了。\n打卡完，直奔第三海水浴场玩水。\n到了发现因为风大不让下水了，只能在沙滩上玩沙子了。\n和娃一起抓了几只小螃蟹，虽然天气不好，娃玩的还是很开心。\n实在不想吃海鲜了，晚饭在酒店附近吃了个米村拌饭，发现旁边有家类似北京的老年厨房，非常便宜，菜品也不错，第二天早晨在这里解决了。\n天气不好，晚上在酒店看电视了，点了个麦当劳夜宵，结果娃没吃多少，全我吃了，给我撑的。\n第三天天晴了，但是风还是大。\n决定到第二海水浴场看看运气，到了之后还是不让下水，在沙滩上玩了会沙子。\n时间差不多，回酒店办退房。\n然后步行到火车站，上车回京。\n青岛之行就此结束了，尽管行程很短，天气不太好，但一家人在一起就很开心，唯一的教训就是晚上夜宵不要吃的太多。 😂\n","permalink":"https://liudon.com/posts/the-trip-of-qingdao/","summary":"\u003cp\u003e刚放暑假的时候，就答应了娃带她去一趟青岛。\u003c/p\u003e\n\u003cp\u003e8月份要回老家，所以定在了7月中下旬出发。\u003c/p\u003e\n\u003cp\u003e车票/酒店都订好了，结果来了个台风格美。\u003c/p\u003e\n\u003cp\u003e出发前一周一直在查天气，就怕去了一直下雨。\u003c/p\u003e","title":"一次简短的青岛之行"},{"content":"$ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest $ $ protoc-gen-go --version protoc-gen-go v1.34.2 $ $ sh make.sh user.pb.go:123:45: undeclared name: any (requires version go1.18 or later) $ 流水线编译报错，其中make.sh文件代码：\n... protoc -I=./ --proto_path=./ --go_out=./ --go_opt=paths=source_relative user.proto ... go build 同样的代码在本机编译就没问题，但是放到流水线里编译就报上面的错误。\n登到流水线编译机器上，看了下go的版本已经是1.18.1了，按理不应该报这个错误的。\n关键之前流水线编译是没问题的，怀疑是开发分支代码的问题，用master分支编译了一下，也还是报这个错误。\n手动执行make.sh里的每条命令，发现是protoc编译pb文件时报的这个错误。\n经过一番查找后，发现是protoc-gen-go在4月份更新了版本，引入了新特性。\nprotoc-gen-go\u0026rsquo;s versions\nVersions in this module v1 v1.34.2 Jun 11, 2024 v1.34.1 May 6, 2024 v1.34.0 Apr 30, 2024 v1.33.0 Mar 5, 2024 v1.32.0 Dec 22, 2023 Protobuf Editions Overview\nProtobuf Editions replace the proto2 and proto3 designations that we have used for Protocol Buffers. Instead of adding syntax = \u0026ldquo;proto2\u0026rdquo; or syntax = \u0026ldquo;proto3\u0026rdquo; at the top of proto definition files, you use an edition number, such as edition = \u0026ldquo;2024\u0026rdquo;, to specify the default behaviors your file will have. Editions enable the language to evolve incrementally over time.\nInstead of the hardcoded behaviors that older versions have had, editions represent a collection of features with a default value (behavior) per feature. Features are options on a file, message, field, enum, and so on, that specify the behavior of protoc, the code generators, and protobuf runtimes. You can explicitly override a behavior at those different levels (file, message, field, …) when your needs don’t match the default behavior for the edition you’ve selected. You can also override your overrides. The section later in this topic on lexical scoping goes into more detail on that.\n改用历史版本后解决。\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@v1.33.0 ","permalink":"https://liudon.com/posts/solving-undeclared-name-any-requires-version-go1.18-or-later-compilation-error/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ protoc-gen-go --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprotoc-gen-go v1.34.2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ sh make.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euser.pb.go:123:45: undeclared name: any (requires version go1.18 or later)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e流水线编译报错，其中\u003ccode\u003emake.sh\u003c/code\u003e文件代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprotoc -I=./ --proto_path=./ --go_out=./ --go_opt=paths=source_relative user.proto \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego build\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e同样的代码在本机编译就没问题，但是放到流水线里编译就报上面的错误。\u003c/p\u003e","title":"解决 \"undeclared name: any (requires version go1.18 or later)\" 编译错误"},{"content":"背景 4月底的时候，Livid大佬提醒，Cloudflare应该是调整了IPFS Gateway网关策略，我的IPFS镜像博客无法访问了。\n没查到Cloudflare的调整说明，不过还好IPFS官方也提供了公共网关gateway.ipfs.io，将域名解析改到官网网关。\n但还是无法访问，被Cloudflare拦截了。\nError 1014 Ray ID: 887cc7fcfa2804bb • 2024-05-22 12:24:05 UTC CNAME Cross-User Banned What happened? You\u0026#39;ve requested a page on a website that is part of the Cloudflare network. The host is configured as a CNAME across accounts on Cloudflare, which is not allowed by Cloudflare\u0026#39;s security policy. What can I do? If this is an R2 custom domain, it may still be initializing. If you have attempted to manually point a CNAME DNS record to your R2 bucket, you must do it using a custom domain. Refer to R2\u0026#39;s documentation for details. Visit our website to learn more about Cloudflare. 这周在Discord群里，看到有人发消息，说是Cloudflare将下线IPFS Gateway网关服务。\nhttps://blog.cloudflare.com/cloudflares-public-ipfs-gateways-and-supporting-interplanetary-shipyard\nAll traffic using the cloudflare-ipfs.com or cf-ipfs.com hostname(s) will continue to work without interruption and be redirected to ipfs.io or dweb.link until August 14th, 2024, at which time the Cloudflare hostnames will no longer connect to IPFS and all users must switch the hostname they use to ipfs.io or dweb.link to ensure no service interruption takes place. If you are using either of the Cloudflare hostnames, please be sure to switch to one of the new ones as soon as possible ahead of the transition date to avoid any service interruptions!\n方案调研 经过一番搜索，找到了一篇自建IPFS Gateway网关的资料，里面用到了bifrost-gateway组件。\nTo run against a compatible, local trustless gateway provided by Kubo or IPFS Desktop: $ PROXY_GATEWAY_URL=\u0026#34;http://127.0.0.1:8080\u0026#34; ./bifrost-gateway 看文档，可以通过这个命令搭建一个自己的网关服务，同时支持DNSLink方式访问。\n太棒了，感觉可以自己搭一套网关，然后用Nginx反代对外提供服务。\n在之前将博客部署到星际文件系统(IPFS)文章中，已经通过Kubo搭建了一套本地IPFS服务。\n上机器验证一下可行性：\n启动Bifrost Gateway，网关默认地址为https://127.0.0.1:8081\n$ PROXY_GATEWAY_URL=\u0026#34;http://127.0.0.1:8080\u0026#34; ./bifrost-gateway 2024/05/22 20:54:00 Starting bifrost-gateway dev-build 2024/05/22 20:54:00 Proxy backend (PROXY_GATEWAY_URL) at http://127.0.0.1:8080 2024/05/22 20:54:00 BLOCK_CACHE_SIZE: 1024 2024/05/22 20:54:00 GRAPH_BACKEND: false 2024/05/22 20:54:00 Legacy RPC at /api/v0 (KUBO_RPC_URL) provided by http://127.0.0.1:5001 2024/05/22 20:54:00 Path gateway listening on http://127.0.0.1:8081 2024/05/22 20:54:00 Smoke test (JPG): http://127.0.0.1:8081/ipfs/bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi 2024/05/22 20:54:00 Subdomain gateway configured on dweb.link and http://localhost:8081 2024/05/22 20:54:00 Smoke test (Subdomain+DNSLink+UnixFS+HAMT): http://localhost:8081/ipns/en.wikipedia-on-ipfs.org/wiki/ 2024/05/22 20:54:00 Metrics exposed at http://127.0.0.1:8041/debug/metrics/prometheus 在另外一个终端下，执行命令\n$ curl \u0026#39;http://127.0.0.1:8081/\u0026#39; -H\u0026#34;Host:liudon.xyz\u0026#34; -I HTTP/1.1 200 OK Accept-Ranges: bytes Access-Control-Allow-Headers: Content-Type Access-Control-Allow-Headers: Range Access-Control-Allow-Headers: User-Agent Access-Control-Allow-Headers: X-Requested-With Access-Control-Allow-Methods: GET Access-Control-Allow-Methods: HEAD Access-Control-Allow-Methods: OPTIONS Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Content-Length Access-Control-Expose-Headers: Content-Range Access-Control-Expose-Headers: X-Chunked-Output Access-Control-Expose-Headers: X-Ipfs-Path Access-Control-Expose-Headers: X-Ipfs-Roots Access-Control-Expose-Headers: X-Stream-Output Content-Length: 26283 Content-Type: text/html Etag: \u0026#34;QmebCXeD6XDB9xsVvX5Te91EeF5t7sk65A3adsLQ9bostj\u0026#34; Last-Modified: Wed, 22 May 2024 12:57:29 GMT X-Ipfs-Path: /ipns/liudon.xyz/ X-Ipfs-Roots: QmebCXeD6XDB9xsVvX5Te91EeF5t7sk65A3adsLQ9bostj Date: Wed, 22 May 2024 12:57:29 GMT 验证可行，不过我记得Kubo默认就有网关服务的，试一下直接通过Kubo默认网关的情况。\nKubo默认网关地址为http://127.0.0.1:8080，注意不要对外网提供8080端口访问，否则会被别人当成公共网关使用\n$ curl \u0026#39;http://127.0.0.1:8080/\u0026#39; -H\u0026#34;Host:liudon.xyz\u0026#34; -I HTTP/1.1 200 OK Accept-Ranges: bytes Access-Control-Allow-Headers: Content-Type Access-Control-Allow-Headers: Range Access-Control-Allow-Headers: User-Agent Access-Control-Allow-Headers: X-Requested-With Access-Control-Allow-Methods: GET Access-Control-Allow-Origin: * Access-Control-Expose-Headers: Content-Length Access-Control-Expose-Headers: Content-Range Access-Control-Expose-Headers: X-Chunked-Output Access-Control-Expose-Headers: X-Ipfs-Path Access-Control-Expose-Headers: X-Ipfs-Roots Access-Control-Expose-Headers: X-Stream-Output Content-Length: 26283 Content-Type: text/html Etag: \u0026#34;QmebCXeD6XDB9xsVvX5Te91EeF5t7sk65A3adsLQ9bostj\u0026#34; Last-Modified: Wed, 22 May 2024 12:59:25 GMT X-Ipfs-Path: /ipns/liudon.xyz/ X-Ipfs-Roots: QmebCXeD6XDB9xsVvX5Te91EeF5t7sk65A3adsLQ9bostj Date: Wed, 22 May 2024 12:59:25 GMT 也是可以的，那就没必要多搞一套bifrost网关了。\n具体实现 通过Nginx反向代理转发到本地IPFS网关，只需要改一下解析就可以继续使用IPFS服务了。\nNginx反向代理 server { listen 443 ssl http2; server_name liudon.xyz; ssl_certificate /etc/nginx/ssl/liudon.xyz/fullchain.cer; ssl_certificate_key /etc/nginx/ssl/liudon.xyz/liudon.xyz.key; ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers \u0026#39;TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384\u0026#39;; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; location / { proxy_pass http://127.0.0.1:8080; proxy_set_header Host $host; // 注意这里要传递反代的域名信息，限制只能访问我们自己dnslink对应的资源 } access_log /var/log/nginx/liudon.xyz.access.log; error_log /var/log/nginx/liudon.xyz.error.log; } 申请Let's Encrypt证书，证书相关的就不多做介绍了，网上资料很多。\n更改DNS解析 原有的解析 类型：CNAME 名称：liudon.xyz 内容：cloudflare-ipfs.com 新的解析 类型：A 名称：liudon.xyz 内容：你的服务器公网IP 搞定，又可以继续白嫖IPFS服务了。\n","permalink":"https://liudon.com/posts/replacing-cloudflare-ipfs-gateway-with-self-hosted-gateway/","summary":"\u003ch4 id=\"背景\"\u003e背景\u003c/h4\u003e\n\u003cp\u003e4月底的时候，Livid大佬提醒，\u003ccode\u003eCloudflare\u003c/code\u003e应该是调整了\u003ccode\u003eIPFS Gateway\u003c/code\u003e网关策略，我的\u003ca href=\"https://liudon.xyz\"\u003eIPFS镜像博客\u003c/a\u003e无法访问了。\u003c/p\u003e\n\u003cp\u003e没查到\u003ccode\u003eCloudflare\u003c/code\u003e的调整说明，不过还好\u003ccode\u003eIPFS\u003c/code\u003e官方也提供了公共网关\u003ccode\u003egateway.ipfs.io\u003c/code\u003e，将域名解析改到官网网关。\u003c/p\u003e","title":"搭建自托管IPFS Gateway服务，替代Cloudflare的IPFS Gateway"},{"content":"302跳转的跨域问题\n场景一：302不返回跨域头 请求\nGET /302 HTTP/1.1 Host: liudon.xyz Origin: https://www.baidu.com User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 返回\nHTTP/1.1 200 OK Cache-Control: private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Cf-Ray: 88535773eaf5107e-HKG Content-Length: 143 Content-Type: text/html Date: Fri, 17 May 2024 11:42:00 GMT Expires: Thu, 01 Jan 1970 00:00:01 GMT Location: https://liudon.org Server: cloudflare Vary: Accept-Encoding 浏览器报错\nAccess to fetch at \u0026#39;https://liudon.xyz/302\u0026#39; from origin \u0026#39;https://www.baidu.com\u0026#39; has been blocked by CORS policy: No \u0026#39;Access-Control-Allow-Origin\u0026#39; header is present on the requested resource. If an opaque response serves your needs, set the request\u0026#39;s mode to \u0026#39;no-cors\u0026#39; to fetch the resource with CORS disabled. 场景二：302跳转返回跨域头 请求\nGET /302_return_origin_header HTTP/1.1 Host: liudon.xyz Origin: https://www.baidu.com User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 返回\nHTTP/1.1 200 OK Access-Control-Allow-Origin: https://www.baidu.com Cache-Control: private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Cf-Ray: 88535773eaf5107e-HKG Content-Length: 143 Content-Type: text/html Date: Fri, 17 May 2024 11:42:00 GMT Expires: Thu, 01 Jan 1970 00:00:01 GMT Location: https://liudon.org Server: cloudflare Vary: Accept-Encoding 浏览器报错\nAccess to fetch at \u0026#39;https://liudon.org/\u0026#39; (redirected from \u0026#39;https://liudon.xyz/302_return_origin_header\u0026#39;) from origin \u0026#39;https://www.baidu.com\u0026#39; has been blocked by CORS policy: No \u0026#39;Access-Control-Allow-Origin\u0026#39; header is present on the requested resource. If an opaque response serves your needs, set the request\u0026#39;s mode to \u0026#39;no-cors\u0026#39; to fetch the resource with CORS disabled. 注意，这里302跳转请求没有报错，是跳转后的连接报了跨域错误。\nLocation请求\nGET / HTTP/1.1 Host: liudon.org Origin: null Referer: https://www.baidu.com/ User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 302返回了跨域头，所以浏览器请求了Location地址。\n但为什么两次请求header头里的Origin字段值不一致呢？第二次Location请求为什么Origin字段值是null？\n第一次： Origin: https://www.baidu.com 第二次 Origin: null 经过一番搜索，终于找到了一些资料。\nThe Origin header value may be null in a number of cases, including (non-exhaustively):\nOrigins whose scheme is not one of http, https, ftp, ws, wss, or gopher (including blob, file and data). Cross-origin images and media data, including that in , and elements. Documents created programmatically using createDocument(), generated from a data: URL, or that do not have a creator browsing context. Redirects across origins. iframes with a sandbox attribute that doesn\u0026rsquo;t contain the value allow-same-origin. Responses that are network errors. Referrer-Policy set to no-referrer for non-cors request modes (e.g. simple form posts).\n出自 https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin#description\nA request request has a redirect-tainted origin if these steps return true:\nLet lastURL be null.\nFor each url of request’s URL list:\nIf lastURL is null, then set lastURL to url and continue.\nIf url’s origin is not same origin with lastURL’s origin and request’s origin is not same origin with lastURL’s origin, then return true.\nSet lastURL to url. Return false. Serializing a request origin, given a request request, is to run these steps:\nIf request has a redirect-tainted origin, then return \u0026ldquo;null\u0026rdquo;.\nReturn request’s origin, serialized.\n出自 https://fetch.spec.whatwg.org/#concept-request-tainted-origin\n简单说就是如果302跳转的域与上一次请求域不同的话，就会将Origin设置为null。\n","permalink":"https://liudon.com/posts/the-cors-issue-with-302-redirect/","summary":"\u003cp\u003e302跳转的跨域问题\u003c/p\u003e\n\u003ch4 id=\"场景一302不返回跨域头\"\u003e场景一：302不返回跨域头\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e请求\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGET /302 HTTP/1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eHost: liudon.xyz\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOrigin: https://www.baidu.com\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e返回\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eHTTP/1.1 200 OK\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCache-Control: private, max-age=0, no-store, no-cache, must-revalidate, post-check=0, pre-check=0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCf-Ray: 88535773eaf5107e-HKG\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eContent-Length: 143\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eContent-Type: text/html\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDate: Fri, 17 May 2024 11:42:00 GMT\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExpires: Thu, 01 Jan 1970 00:00:01 GMT\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLocation: https://liudon.org\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eServer: cloudflare\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eVary: Accept-Encoding\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003e浏览器报错\u003c/strong\u003e\u003c/p\u003e","title":"302跳转的跨域问题(CORS)"},{"content":"什么是sqlcommenter？\nsqlcommenter is a suite of middlewares/plugins that enable your ORMs to augment SQL statements before execution, with comments containing information about the code that caused its execution. This helps in easily correlating slow performance with source code and giving insights into backend database performance. In short it provides some observability into the state of your client-side applications and their impact on the database’s server-side.\nGORM提供了hints组件，可以支持sqlcommenter。\nimport \u0026#34;gorm.io/hints\u0026#34; DB.Clauses(hints.Comment(\u0026#34;select\u0026#34;, \u0026#34;master\u0026#34;)).Find(\u0026amp;User{}) // SELECT /*master*/ * FROM `users`; DB.Clauses(hints.CommentBefore(\u0026#34;insert\u0026#34;, \u0026#34;node2\u0026#34;)).Create(\u0026amp;user) // /*node2*/ INSERT INTO `users` ...; DB.Clauses(hints.CommentAfter(\u0026#34;select\u0026#34;, \u0026#34;node2\u0026#34;)).Create(\u0026amp;user) // /*node2*/ INSERT INTO `users` ...; DB.Clauses(hints.CommentAfter(\u0026#34;where\u0026#34;, \u0026#34;hint\u0026#34;)).Find(\u0026amp;User{}, \u0026#34;id = ?\u0026#34;, 1) // SELECT * FROM `users` WHERE id = ? /* hint */ 但是需要在每个执行语句里引入类似.Clauses(hints.CommentBefore(\u0026quot;insert\u0026quot;, \u0026quot;node2\u0026quot;))代码。\n我希望是全局增加sqlcommenter，业务侧不需要过多调整。\n完整代码如下：\nplugins/gorm.go package plugins import ( \u0026#34;fmt\u0026#34; gorm \u0026#34;gorm.io/gorm\u0026#34; gormclause \u0026#34;gorm.io/gorm/clause\u0026#34; ) type Comment struct { Content string } func (c Comment) Name() string { return \u0026#34;COMMENT\u0026#34; } func (c Comment) Build(builder gormclause.Builder) { builder.WriteString(\u0026#34;/* \u0026#34;) builder.WriteString(c.Content) builder.WriteString(\u0026#34; */\u0026#34;) } func (c Comment) MergeClause(mergeClause *gormclause.Clause) { } func (c Comment) ModifyStatement(stmt *gorm.Statement) { clause := stmt.Clauses[c.Name()] // 注意这里一定要是Expression，因为Expression为nil的话，是不会触发Build方法执行的 // 这里一开始参考hints注册的BeforeExpression，导致Build未执行，直到把整个gorm流程梳理一遍才发现问题所在 clause.Expression = c stmt.Clauses[c.Name()] = clause } var extraClause = []string{\u0026#34;COMMENT\u0026#34;} type CommentClausePlugin struct{} // NewCommentClausePlugin create a new ExtraPlugin func NewCommentClausePlugin() *CommentClausePlugin { return \u0026amp;CommentClausePlugin{} } // Name plugin name func (ep *CommentClausePlugin) Name() string { return \u0026#34;CommentClausePlugin\u0026#34; } // Initialize register BuildClauses func (ep *CommentClausePlugin) Initialize(db *gorm.DB) (err error) { initClauses(db) db.Callback().Create().Before(\u0026#34;gorm:create\u0026#34;).Register(\u0026#34;CommentClausePlugin\u0026#34;, AddAnnotation) db.Callback().Delete().Before(\u0026#34;gorm:delete\u0026#34;).Register(\u0026#34;CommentClausePlugin\u0026#34;, AddAnnotation) db.Callback().Query().Before(\u0026#34;gorm:query\u0026#34;).Register(\u0026#34;CommentClausePlugin\u0026#34;, AddAnnotation) db.Callback().Update().Before(\u0026#34;gorm:update\u0026#34;).Register(\u0026#34;CommentClausePlugin\u0026#34;, AddAnnotation) db.Callback().Raw().Before(\u0026#34;gorm:raw\u0026#34;).Register(\u0026#34;CommentClausePlugin\u0026#34;, AddAnnotation) db.Callback().Row().Before(\u0026#34;gorm:row\u0026#34;).Register(\u0026#34;CommentClausePlugin\u0026#34;, AddAnnotation) return } func AddAnnotation(db *gorm.DB) { if db.Error != nil { return } rid := \u0026#34;xx\u0026#34; // 从context上下文里取rid信息 if v, ok := db.Statement.Context.Value(\u0026#34;rid\u0026#34;).(string); ok { rid = v } content := fmt.Sprintf(\u0026#34;rid=%s\u0026#34;, rid) if db.Statement.SQL.Len() \u0026gt; 0 { oldSQL := db.Statement.SQL.String() db.Statement.SQL.Reset() db.Statement.SQL.WriteString(fmt.Sprintf(\u0026#34;%s %s\u0026#34;, content, oldSQL)) return } db.Statement.AddClause(Comment{Content: content}) } // initClauses init SQL clause func initClauses(db *gorm.DB) { if db.Error != nil { return } createClause := append(extraClause, db.Callback().Create().Clauses...) deleteClause := append(extraClause, db.Callback().Delete().Clauses...) queryClause := append(extraClause, db.Callback().Query().Clauses...) updateClause := append(extraClause, db.Callback().Update().Clauses...) rawClause := append(extraClause, db.Callback().Raw().Clauses...) rowClause := append(extraClause, db.Callback().Row().Clauses...) db.Callback().Create().Clauses = createClause db.Callback().Delete().Clauses = deleteClause db.Statement.Callback().Query().Clauses = queryClause db.Callback().Update().Clauses = updateClause db.Callback().Raw().Clauses = rawClause db.Callback().Row().Clauses = rowClause } main.go package main import ( \u0026#34;context\u0026#34; \u0026#34;plugins\u0026#34; gorm \u0026#34;gorm.io/gorm\u0026#34; \u0026#34;github.com/google/uuid\u0026#34; ) type Product struct { gorm.Model Code string Price uint } func main() { dsn := \u0026#34;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4\u0026amp;parseTime=True\u0026amp;loc=Local\u0026#34; db, err := gorm.Open(mysql.Open(dsn), \u0026amp;gorm.Config{}) db.Use(plugins.NewCommentClausePlugin()) db.Create(\u0026amp;Product{Code: \u0026#34;D42\u0026#34;, Price: 100}) // 传入context，指定rid ctx := context.WithValue(context.Background(), \u0026#34;rid\u0026#34;, uuid.New().String()) db.WithContext(ctx).Create(\u0026amp;Product{Code: \u0026#34;D42\u0026#34;, Price: 100}) } 阻塞了两天的问题，终于解决了！😁😁😁\nhow gorm generates sql\n","permalink":"https://liudon.com/posts/gorm-supports-sqlcommenter/","summary":"\u003cp\u003e什么是sqlcommenter？\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003esqlcommenter is a suite of middlewares/plugins that enable your ORMs to augment SQL statements before execution, with comments containing information about the code that caused its execution. This helps in easily correlating slow performance with source code and giving insights into backend database performance. In short it provides some observability into the state of your client-side applications and their impact on the database’s server-side.\u003c/p\u003e","title":"GORM增加sqlcommenter特性"},{"content":"在gorm下实现sqlcommenter过程中，遇到一些问题，顺便把gorm整个流程梳理了一遍，整理记录一下。\ngorm使用示例\npackage main import ( \u0026#34;gorm.io/driver/mysql\u0026#34; \u0026#34;gorm.io/gorm\u0026#34; ) type Product struct { gorm.Model Code string Price uint } func main() { // 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情 dsn := \u0026#34;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4\u0026amp;parseTime=True\u0026amp;loc=Local\u0026#34; db, err := gorm.Open(mysql.Open(dsn), \u0026amp;gorm.Config{}) var product Product db.First(\u0026amp;product, 1) // 根据整型主键查找 } 我们以First查询为例，看一下是怎么转成具体sql的。\n在finisher_api.go文件，声明了First方法。\n// First finds the first record ordered by primary key, matching given conditions conds func (db *DB) First(dest interface{}, conds ...interface{}) (tx *DB) { // 注册Order类型的Clause tx = db.Limit(1).Order(clause.OrderByColumn{ Column: clause.Column{Table: clause.CurrentTable, Name: clause.PrimaryKey}, }) // 这里如果有指定条件的话，注册一个Where类型的Clause if len(conds) \u0026gt; 0 { if exprs := tx.Statement.BuildCondition(conds[0], conds[1:]...); len(exprs) \u0026gt; 0 { tx.Statement.AddClause(clause.Where{Exprs: exprs}) } } tx.Statement.RaiseErrorOnNotFound = true tx.Statement.Dest = dest return tx.callbacks.Query().Execute(tx) } 在gorm.go文件，可以找到tx.callbacks定义。\ntype Config struct { ... callbacks *callbacks cacheStore *sync.Map } callbacks.go\n// callbacks gorm callbacks manager type callbacks struct { processors map[string]*processor } type processor struct { db *DB Clauses []string fns []func(*DB) callbacks []*callback } type callback struct { name string before string after string remove bool replace bool match func(*DB) bool handler func(*DB) processor *processor } // 返回query类型的processor func (cs *callbacks) Query() *processor { return cs.processors[\u0026#34;query\u0026#34;] } func (p *processor) Execute(db *DB) *DB { // call scopes for len(db.Statement.scopes) \u0026gt; 0 { db = db.executeScopes() } var ( curTime = time.Now() stmt = db.Statement resetBuildClauses bool ) // 注意这里的stmt.BuildClauses，后面会用到这个信息 if len(stmt.BuildClauses) == 0 { stmt.BuildClauses = p.Clauses resetBuildClauses = true } if optimizer, ok := db.Statement.Dest.(StatementModifier); ok { optimizer.ModifyStatement(stmt) } // assign model values if stmt.Model == nil { stmt.Model = stmt.Dest } else if stmt.Dest == nil { stmt.Dest = stmt.Model } // parse model values if stmt.Model != nil { if err := stmt.Parse(stmt.Model); err != nil \u0026amp;\u0026amp; (!errors.Is(err, schema.ErrUnsupportedDataType) || (stmt.Table == \u0026#34;\u0026#34; \u0026amp;\u0026amp; stmt.TableExpr == nil \u0026amp;\u0026amp; stmt.SQL.Len() == 0)) { if errors.Is(err, schema.ErrUnsupportedDataType) \u0026amp;\u0026amp; stmt.Table == \u0026#34;\u0026#34; \u0026amp;\u0026amp; stmt.TableExpr == nil { db.AddError(fmt.Errorf(\u0026#34;%w: Table not set, please set it like: db.Model(\u0026amp;user) or db.Table(\\\u0026#34;users\\\u0026#34;)\u0026#34;, err)) } else { db.AddError(err) } } } // assign stmt.ReflectValue if stmt.Dest != nil { stmt.ReflectValue = reflect.ValueOf(stmt.Dest) for stmt.ReflectValue.Kind() == reflect.Ptr { if stmt.ReflectValue.IsNil() \u0026amp;\u0026amp; stmt.ReflectValue.CanAddr() { stmt.ReflectValue.Set(reflect.New(stmt.ReflectValue.Type().Elem())) } stmt.ReflectValue = stmt.ReflectValue.Elem() } if !stmt.ReflectValue.IsValid() { db.AddError(ErrInvalidValue) } } // 根据优先级执行不同callback的回调方法 for _, f := range p.fns { f(db) } if stmt.SQL.Len() \u0026gt; 0 { db.Logger.Trace(stmt.Context, curTime, func() (string, int64) { sql, vars := stmt.SQL.String(), stmt.Vars if filter, ok := db.Logger.(ParamsFilter); ok { sql, vars = filter.ParamsFilter(stmt.Context, stmt.SQL.String(), stmt.Vars...) } return db.Dialector.Explain(sql, vars...), db.RowsAffected }, db.Error) } if !stmt.DB.DryRun { stmt.SQL.Reset() stmt.Vars = nil } if resetBuildClauses { stmt.BuildClauses = nil } return db } 接下来，我们来看一下内置的callback是如何注册的。\nmysql.go\nvar ( // CreateClauses create clauses CreateClauses = []string{\u0026#34;INSERT\u0026#34;, \u0026#34;VALUES\u0026#34;, \u0026#34;ON CONFLICT\u0026#34;} // QueryClauses query clauses QueryClauses = []string{} // UpdateClauses update clauses UpdateClauses = []string{\u0026#34;UPDATE\u0026#34;, \u0026#34;SET\u0026#34;, \u0026#34;WHERE\u0026#34;, \u0026#34;ORDER BY\u0026#34;, \u0026#34;LIMIT\u0026#34;} // DeleteClauses delete clauses DeleteClauses = []string{\u0026#34;DELETE\u0026#34;, \u0026#34;FROM\u0026#34;, \u0026#34;WHERE\u0026#34;, \u0026#34;ORDER BY\u0026#34;, \u0026#34;LIMIT\u0026#34;} defaultDatetimePrecision = 3 ) ... func (dialector Dialector) Initialize(db *gorm.DB) (err error) { if dialector.DriverName == \u0026#34;\u0026#34; { dialector.DriverName = \u0026#34;mysql\u0026#34; } if dialector.DefaultDatetimePrecision == nil { dialector.DefaultDatetimePrecision = \u0026amp;defaultDatetimePrecision } if dialector.Conn != nil { db.ConnPool = dialector.Conn } else { db.ConnPool, err = sql.Open(dialector.DriverName, dialector.DSN) if err != nil { return err } } withReturning := false if !dialector.Config.SkipInitializeWithVersion { err = db.ConnPool.QueryRowContext(context.Background(), \u0026#34;SELECT VERSION()\u0026#34;).Scan(\u0026amp;dialector.ServerVersion) if err != nil { return err } if strings.Contains(dialector.ServerVersion, \u0026#34;MariaDB\u0026#34;) { dialector.Config.DontSupportRenameIndex = true dialector.Config.DontSupportRenameColumn = true dialector.Config.DontSupportForShareClause = true dialector.Config.DontSupportNullAsDefaultValue = true withReturning = checkVersion(dialector.ServerVersion, \u0026#34;10.5\u0026#34;) } else if strings.HasPrefix(dialector.ServerVersion, \u0026#34;5.6.\u0026#34;) { dialector.Config.DontSupportRenameIndex = true dialector.Config.DontSupportRenameColumn = true dialector.Config.DontSupportForShareClause = true dialector.Config.DontSupportDropConstraint = true } else if strings.HasPrefix(dialector.ServerVersion, \u0026#34;5.7.\u0026#34;) { dialector.Config.DontSupportRenameColumn = true dialector.Config.DontSupportForShareClause = true dialector.Config.DontSupportDropConstraint = true } else if strings.HasPrefix(dialector.ServerVersion, \u0026#34;5.\u0026#34;) { dialector.Config.DisableDatetimePrecision = true dialector.Config.DontSupportRenameIndex = true dialector.Config.DontSupportRenameColumn = true dialector.Config.DontSupportForShareClause = true dialector.Config.DontSupportDropConstraint = true } if strings.Contains(dialector.ServerVersion, \u0026#34;TiDB\u0026#34;) { dialector.Config.DontSupportRenameColumnUnique = true } } // register callbacks callbackConfig := \u0026amp;callbacks.Config{ CreateClauses: CreateClauses, QueryClauses: QueryClauses, UpdateClauses: UpdateClauses, DeleteClauses: DeleteClauses, } if !dialector.Config.DisableWithReturning \u0026amp;\u0026amp; withReturning { if !utils.Contains(callbackConfig.CreateClauses, \u0026#34;RETURNING\u0026#34;) { callbackConfig.CreateClauses = append(callbackConfig.CreateClauses, \u0026#34;RETURNING\u0026#34;) } if !utils.Contains(callbackConfig.UpdateClauses, \u0026#34;RETURNING\u0026#34;) { callbackConfig.UpdateClauses = append(callbackConfig.UpdateClauses, \u0026#34;RETURNING\u0026#34;) } if !utils.Contains(callbackConfig.DeleteClauses, \u0026#34;RETURNING\u0026#34;) { callbackConfig.DeleteClauses = append(callbackConfig.DeleteClauses, \u0026#34;RETURNING\u0026#34;) } } // 注册默认callback callbacks.RegisterDefaultCallbacks(db, callbackConfig) for k, v := range dialector.ClauseBuilders() { db.ClauseBuilders[k] = v } return } callbacks.go\nvar ( createClauses = []string{\u0026#34;INSERT\u0026#34;, \u0026#34;VALUES\u0026#34;, \u0026#34;ON CONFLICT\u0026#34;} queryClauses = []string{\u0026#34;SELECT\u0026#34;, \u0026#34;FROM\u0026#34;, \u0026#34;WHERE\u0026#34;, \u0026#34;GROUP BY\u0026#34;, \u0026#34;ORDER BY\u0026#34;, \u0026#34;LIMIT\u0026#34;, \u0026#34;FOR\u0026#34;} updateClauses = []string{\u0026#34;UPDATE\u0026#34;, \u0026#34;SET\u0026#34;, \u0026#34;WHERE\u0026#34;} deleteClauses = []string{\u0026#34;DELETE\u0026#34;, \u0026#34;FROM\u0026#34;, \u0026#34;WHERE\u0026#34;} ) type Config struct { LastInsertIDReversed bool CreateClauses []string QueryClauses []string UpdateClauses []string DeleteClauses []string } func RegisterDefaultCallbacks(db *gorm.DB, config *Config) { enableTransaction := func(db *gorm.DB) bool { return !db.SkipDefaultTransaction } if len(config.CreateClauses) == 0 { config.CreateClauses = createClauses } if len(config.QueryClauses) == 0 { config.QueryClauses = queryClauses } if len(config.DeleteClauses) == 0 { config.DeleteClauses = deleteClauses } if len(config.UpdateClauses) == 0 { config.UpdateClauses = updateClauses } // 注册不同类型的callback createCallback := db.Callback().Create() createCallback.Match(enableTransaction).Register(\u0026#34;gorm:begin_transaction\u0026#34;, BeginTransaction) createCallback.Register(\u0026#34;gorm:before_create\u0026#34;, BeforeCreate) createCallback.Register(\u0026#34;gorm:save_before_associations\u0026#34;, SaveBeforeAssociations(true)) createCallback.Register(\u0026#34;gorm:create\u0026#34;, Create(config)) createCallback.Register(\u0026#34;gorm:save_after_associations\u0026#34;, SaveAfterAssociations(true)) createCallback.Register(\u0026#34;gorm:after_create\u0026#34;, AfterCreate) createCallback.Match(enableTransaction).Register(\u0026#34;gorm:commit_or_rollback_transaction\u0026#34;, CommitOrRollbackTransaction) createCallback.Clauses = config.CreateClauses queryCallback := db.Callback().Query() queryCallback.Register(\u0026#34;gorm:query\u0026#34;, Query) queryCallback.Register(\u0026#34;gorm:preload\u0026#34;, Preload) queryCallback.Register(\u0026#34;gorm:after_query\u0026#34;, AfterQuery) queryCallback.Clauses = config.QueryClauses deleteCallback := db.Callback().Delete() deleteCallback.Match(enableTransaction).Register(\u0026#34;gorm:begin_transaction\u0026#34;, BeginTransaction) deleteCallback.Register(\u0026#34;gorm:before_delete\u0026#34;, BeforeDelete) deleteCallback.Register(\u0026#34;gorm:delete_before_associations\u0026#34;, DeleteBeforeAssociations) deleteCallback.Register(\u0026#34;gorm:delete\u0026#34;, Delete(config)) deleteCallback.Register(\u0026#34;gorm:after_delete\u0026#34;, AfterDelete) deleteCallback.Match(enableTransaction).Register(\u0026#34;gorm:commit_or_rollback_transaction\u0026#34;, CommitOrRollbackTransaction) deleteCallback.Clauses = config.DeleteClauses updateCallback := db.Callback().Update() updateCallback.Match(enableTransaction).Register(\u0026#34;gorm:begin_transaction\u0026#34;, BeginTransaction) updateCallback.Register(\u0026#34;gorm:setup_reflect_value\u0026#34;, SetupUpdateReflectValue) updateCallback.Register(\u0026#34;gorm:before_update\u0026#34;, BeforeUpdate) updateCallback.Register(\u0026#34;gorm:save_before_associations\u0026#34;, SaveBeforeAssociations(false)) updateCallback.Register(\u0026#34;gorm:update\u0026#34;, Update(config)) updateCallback.Register(\u0026#34;gorm:save_after_associations\u0026#34;, SaveAfterAssociations(false)) updateCallback.Register(\u0026#34;gorm:after_update\u0026#34;, AfterUpdate) updateCallback.Match(enableTransaction).Register(\u0026#34;gorm:commit_or_rollback_transaction\u0026#34;, CommitOrRollbackTransaction) updateCallback.Clauses = config.UpdateClauses rowCallback := db.Callback().Row() rowCallback.Register(\u0026#34;gorm:row\u0026#34;, RowQuery) rowCallback.Clauses = config.QueryClauses rawCallback := db.Callback().Raw() rawCallback.Register(\u0026#34;gorm:raw\u0026#34;, RawExec) rawCallback.Clauses = config.QueryClauses } 到这里，默认callback就注册完成了，但是是如何转成对应sql的呢？\n别急，我们继续往下看。\n在RegisterDefaultCallbacks方法里注册了一个gorm:query类型的callback，对应的回调方法为Query。\nquery.go\nfunc Query(db *gorm.DB) { if db.Error == nil { // 调用BuildQuerySQL方法 BuildQuerySQL(db) if !db.DryRun \u0026amp;\u0026amp; db.Error == nil { rows, err := db.Statement.ConnPool.QueryContext(db.Statement.Context, db.Statement.SQL.String(), db.Statement.Vars...) if err != nil { db.AddError(err) return } defer func() { db.AddError(rows.Close()) }() gorm.Scan(rows, db, 0) } } } func BuildQuerySQL(db *gorm.DB) { if db.Statement.Schema != nil { for _, c := range db.Statement.Schema.QueryClauses { db.Statement.AddClause(c) } } if db.Statement.SQL.Len() == 0 { db.Statement.SQL.Grow(100) clauseSelect := clause.Select{Distinct: db.Statement.Distinct} if db.Statement.ReflectValue.Kind() == reflect.Struct \u0026amp;\u0026amp; db.Statement.ReflectValue.Type() == db.Statement.Schema.ModelType { var conds []clause.Expression for _, primaryField := range db.Statement.Schema.PrimaryFields { if v, isZero := primaryField.ValueOf(db.Statement.Context, db.Statement.ReflectValue); !isZero { conds = append(conds, clause.Eq{Column: clause.Column{Table: db.Statement.Table, Name: primaryField.DBName}, Value: v}) } } if len(conds) \u0026gt; 0 { db.Statement.AddClause(clause.Where{Exprs: conds}) } } if len(db.Statement.Selects) \u0026gt; 0 { clauseSelect.Columns = make([]clause.Column, len(db.Statement.Selects)) for idx, name := range db.Statement.Selects { if db.Statement.Schema == nil { clauseSelect.Columns[idx] = clause.Column{Name: name, Raw: true} } else if f := db.Statement.Schema.LookUpField(name); f != nil { clauseSelect.Columns[idx] = clause.Column{Name: f.DBName} } else { clauseSelect.Columns[idx] = clause.Column{Name: name, Raw: true} } } } else if db.Statement.Schema != nil \u0026amp;\u0026amp; len(db.Statement.Omits) \u0026gt; 0 { selectColumns, _ := db.Statement.SelectAndOmitColumns(false, false) clauseSelect.Columns = make([]clause.Column, 0, len(db.Statement.Schema.DBNames)) for _, dbName := range db.Statement.Schema.DBNames { if v, ok := selectColumns[dbName]; (ok \u0026amp;\u0026amp; v) || !ok { clauseSelect.Columns = append(clauseSelect.Columns, clause.Column{Table: db.Statement.Table, Name: dbName}) } } } else if db.Statement.Schema != nil \u0026amp;\u0026amp; db.Statement.ReflectValue.IsValid() { queryFields := db.QueryFields if !queryFields { switch db.Statement.ReflectValue.Kind() { case reflect.Struct: queryFields = db.Statement.ReflectValue.Type() != db.Statement.Schema.ModelType case reflect.Slice: queryFields = db.Statement.ReflectValue.Type().Elem() != db.Statement.Schema.ModelType } } if queryFields { stmt := gorm.Statement{DB: db} // smaller struct if err := stmt.Parse(db.Statement.Dest); err == nil \u0026amp;\u0026amp; (db.QueryFields || stmt.Schema.ModelType != db.Statement.Schema.ModelType) { clauseSelect.Columns = make([]clause.Column, len(stmt.Schema.DBNames)) for idx, dbName := range stmt.Schema.DBNames { clauseSelect.Columns[idx] = clause.Column{Table: db.Statement.Table, Name: dbName} } } } } // inline joins fromClause := clause.From{} if v, ok := db.Statement.Clauses[\u0026#34;FROM\u0026#34;].Expression.(clause.From); ok { fromClause = v } if len(db.Statement.Joins) != 0 || len(fromClause.Joins) != 0 { if len(db.Statement.Selects) == 0 \u0026amp;\u0026amp; len(db.Statement.Omits) == 0 \u0026amp;\u0026amp; db.Statement.Schema != nil { clauseSelect.Columns = make([]clause.Column, len(db.Statement.Schema.DBNames)) for idx, dbName := range db.Statement.Schema.DBNames { clauseSelect.Columns[idx] = clause.Column{Table: db.Statement.Table, Name: dbName} } } specifiedRelationsName := make(map[string]interface{}) for _, join := range db.Statement.Joins { if db.Statement.Schema != nil { var isRelations bool // is relations or raw sql var relations []*schema.Relationship relation, ok := db.Statement.Schema.Relationships.Relations[join.Name] if ok { isRelations = true relations = append(relations, relation) } else { // handle nested join like \u0026#34;Manager.Company\u0026#34; nestedJoinNames := strings.Split(join.Name, \u0026#34;.\u0026#34;) if len(nestedJoinNames) \u0026gt; 1 { isNestedJoin := true gussNestedRelations := make([]*schema.Relationship, 0, len(nestedJoinNames)) currentRelations := db.Statement.Schema.Relationships.Relations for _, relname := range nestedJoinNames { // incomplete match, only treated as raw sql if relation, ok = currentRelations[relname]; ok { gussNestedRelations = append(gussNestedRelations, relation) currentRelations = relation.FieldSchema.Relationships.Relations } else { isNestedJoin = false break } } if isNestedJoin { isRelations = true relations = gussNestedRelations } } } if isRelations { genJoinClause := func(joinType clause.JoinType, parentTableName string, relation *schema.Relationship) clause.Join { tableAliasName := relation.Name if parentTableName != clause.CurrentTable { tableAliasName = utils.NestedRelationName(parentTableName, tableAliasName) } columnStmt := gorm.Statement{ Table: tableAliasName, DB: db, Schema: relation.FieldSchema, Selects: join.Selects, Omits: join.Omits, } selectColumns, restricted := columnStmt.SelectAndOmitColumns(false, false) for _, s := range relation.FieldSchema.DBNames { if v, ok := selectColumns[s]; (ok \u0026amp;\u0026amp; v) || (!ok \u0026amp;\u0026amp; !restricted) { clauseSelect.Columns = append(clauseSelect.Columns, clause.Column{ Table: tableAliasName, Name: s, Alias: utils.NestedRelationName(tableAliasName, s), }) } } exprs := make([]clause.Expression, len(relation.References)) for idx, ref := range relation.References { if ref.OwnPrimaryKey { exprs[idx] = clause.Eq{ Column: clause.Column{Table: parentTableName, Name: ref.PrimaryKey.DBName}, Value: clause.Column{Table: tableAliasName, Name: ref.ForeignKey.DBName}, } } else { if ref.PrimaryValue == \u0026#34;\u0026#34; { exprs[idx] = clause.Eq{ Column: clause.Column{Table: parentTableName, Name: ref.ForeignKey.DBName}, Value: clause.Column{Table: tableAliasName, Name: ref.PrimaryKey.DBName}, } } else { exprs[idx] = clause.Eq{ Column: clause.Column{Table: tableAliasName, Name: ref.ForeignKey.DBName}, Value: ref.PrimaryValue, } } } } { onStmt := gorm.Statement{Table: tableAliasName, DB: db, Clauses: map[string]clause.Clause{}} for _, c := range relation.FieldSchema.QueryClauses { onStmt.AddClause(c) } if join.On != nil { onStmt.AddClause(join.On) } if cs, ok := onStmt.Clauses[\u0026#34;WHERE\u0026#34;]; ok { if where, ok := cs.Expression.(clause.Where); ok { where.Build(\u0026amp;onStmt) if onSQL := onStmt.SQL.String(); onSQL != \u0026#34;\u0026#34; { vars := onStmt.Vars for idx, v := range vars { bindvar := strings.Builder{} onStmt.Vars = vars[0 : idx+1] db.Dialector.BindVarTo(\u0026amp;bindvar, \u0026amp;onStmt, v) onSQL = strings.Replace(onSQL, bindvar.String(), \u0026#34;?\u0026#34;, 1) } exprs = append(exprs, clause.Expr{SQL: onSQL, Vars: vars}) } } } } return clause.Join{ Type: joinType, Table: clause.Table{Name: relation.FieldSchema.Table, Alias: tableAliasName}, ON: clause.Where{Exprs: exprs}, } } parentTableName := clause.CurrentTable for _, rel := range relations { // joins table alias like \u0026#34;Manager, Company, Manager__Company\u0026#34; nestedAlias := utils.NestedRelationName(parentTableName, rel.Name) if _, ok := specifiedRelationsName[nestedAlias]; !ok { fromClause.Joins = append(fromClause.Joins, genJoinClause(join.JoinType, parentTableName, rel)) specifiedRelationsName[nestedAlias] = nil } if parentTableName != clause.CurrentTable { parentTableName = utils.NestedRelationName(parentTableName, rel.Name) } else { parentTableName = rel.Name } } } else { fromClause.Joins = append(fromClause.Joins, clause.Join{ Expression: clause.NamedExpr{SQL: join.Name, Vars: join.Conds}, }) } } else { fromClause.Joins = append(fromClause.Joins, clause.Join{ Expression: clause.NamedExpr{SQL: join.Name, Vars: join.Conds}, }) } } db.Statement.AddClause(fromClause) } else { db.Statement.AddClauseIfNotExists(clause.From{}) } db.Statement.AddClauseIfNotExists(clauseSelect) // db.Statement.BuildClauses眼熟吗？还记得前面的stmt.BuildClauses吗？ db.Statement.Build(db.Statement.BuildClauses...) } } 重头戏终于来了，Query方法里调用了BuildQuerySQl，看名字也能猜到这里就是生成sql了，这里最终调用了db.Statement.Build方法。\nstatement.go\n// Build build sql with clauses names func (stmt *Statement) Build(clauses ...string) { var firstClauseWritten bool for _, name := range clauses { if c, ok := stmt.Clauses[name]; ok { if firstClauseWritten { stmt.WriteByte(\u0026#39; \u0026#39;) } firstClauseWritten = true if b, ok := stmt.DB.ClauseBuilders[name]; ok { b(c, stmt) } else { c.Build(stmt) } } } } 这里会根据statement的BuildCluauses属性，执行Clause的Build方法。\nclause.go\n// ClauseBuilder clause builder, allows to customize how to build clause type ClauseBuilder func(Clause, Builder) type Writer interface { WriteByte(byte) error WriteString(string) (int, error) } // Builder builder interface type Builder interface { Writer WriteQuoted(field interface{}) AddVar(Writer, ...interface{}) AddError(error) error } // Clause type Clause struct { Name string // WHERE BeforeExpression Expression AfterNameExpression Expression AfterExpression Expression Expression Expression Builder ClauseBuilder } // Build build clause func (c Clause) Build(builder Builder) { if c.Builder != nil { c.Builder(c, builder) } else if c.Expression != nil { if c.BeforeExpression != nil { c.BeforeExpression.Build(builder) builder.WriteByte(\u0026#39; \u0026#39;) } if c.Name != \u0026#34;\u0026#34; { builder.WriteString(c.Name) builder.WriteByte(\u0026#39; \u0026#39;) } if c.AfterNameExpression != nil { c.AfterNameExpression.Build(builder) builder.WriteByte(\u0026#39; \u0026#39;) } c.Expression.Build(builder) if c.AfterExpression != nil { builder.WriteByte(\u0026#39; \u0026#39;) c.AfterExpression.Build(builder) } } } 这里会执行对应Clause的Build方法。\n// Select select attrs when querying, updating, creating type Select struct { Distinct bool Columns []Column Expression Expression } func (s Select) Name() string { return \u0026#34;SELECT\u0026#34; } func (s Select) Build(builder Builder) { if len(s.Columns) \u0026gt; 0 { if s.Distinct { builder.WriteString(\u0026#34;DISTINCT \u0026#34;) } for idx, column := range s.Columns { if idx \u0026gt; 0 { builder.WriteByte(\u0026#39;,\u0026#39;) } builder.WriteQuoted(column) } } else { builder.WriteByte(\u0026#39;*\u0026#39;) } } func (s Select) MergeClause(clause *Clause) { if s.Expression != nil { if s.Distinct { if expr, ok := s.Expression.(Expr); ok { expr.SQL = \u0026#34;DISTINCT \u0026#34; + expr.SQL clause.Expression = expr return } } clause.Expression = s.Expression } else { clause.Expression = s } } 这是Select类型的Clause定义，是不是一下就清楚了。\ngorm通过callback里注册Clause，在Clause里实现了sql拼接操作。\n看了几回源码，这次总算是搞清楚了。\n","permalink":"https://liudon.com/posts/how-gorm-generates-sql/","summary":"\u003cp\u003e在\u003ccode\u003egorm\u003c/code\u003e下实现\u003ca href=\"https://google.github.io/sqlcommenter/\"\u003esqlcommenter\u003c/a\u003e过程中，遇到一些问题，顺便把\u003ccode\u003egorm\u003c/code\u003e整个流程梳理了一遍，整理记录一下。\u003c/p\u003e\n\u003cp\u003egorm使用示例\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epackage main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eimport (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;gorm.io/driver/mysql\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;gorm.io/gorm\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etype Product struct {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  gorm\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eModel\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Code  string\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Price uint\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e main() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e//\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e参考\u003c/span\u003e https:\u003cspan style=\"color:#f92672\"\u003e//\u003c/span\u003egithub\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecom\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003ego\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003esql\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003edriver\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003emysql\u003cspan style=\"color:#75715e\"\u003e#dsn-data-source-name 获取详情\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  dsn :\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4\u0026amp;parseTime=True\u0026amp;loc=Local\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  db, err :\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e gorm\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eOpen(mysql\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eOpen(dsn), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003egorm\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eConfig{})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e product Product\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  db\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eFirst(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eproduct, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e//\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e根据整型主键查找\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我们以\u003ccode\u003eFirst\u003c/code\u003e查询为例，看一下是怎么转成具体sql的。\u003c/p\u003e","title":"源码分析：GORM是如何生成sql的"},{"content":"18年的时候办了张工银亚洲的银行卡，好几年没有用过了。\n今年想起来了，发现网银登不上了，密码忘了。\n最悲剧的是，试了超过10次，账户冻结了。\n打95588咨询了一下，说是可以内地见证方式修改密码，只需要带上港澳通行证和身份证即可。\n1月27日，东城出入境办理港澳通行证签注，排队半个小时左右，自助机操作。\n顺路跑到附近可以见证开户的工行，说需要香港那边配合，人周末不上班，只能工作日。\n电话西二旗支行，说是可以早上早点来办理，要不过年人多，没时间处理。\n1月30日，早上直奔银行，赶在开门前到，第一个办理。\n工作人员会指导你填写资料，填完后会给你两个信封，里面是重置后的网银密码。\n1月31日下午，95588打电话，我以为是广告没接。\n第二天早上反应过来，在路上的时候又打过来了。\n香港那边直接电话，跟你确认身份信息后，下午就收到工行发来的已更新资料邮件。\n其实这里密码就重置完了，因为我同时办理了更新通信地址，我以为是只更新了地址。\n至此，整个流程就办完了，还是非常方便的。\n另外，发现招银亚洲也没法登陆了，U盾过期了，又跑了一趟招行，重新办了个U盾。\n好了，这下两个银行都可以正常使用了。\n","permalink":"https://liudon.com/posts/%E5%B7%A5%E9%93%B6%E4%BA%9A%E6%B4%B2%E7%BD%91%E9%93%B6%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/","summary":"\u003cp\u003e18年的时候办了张工银亚洲的银行卡，好几年没有用过了。\u003c/p\u003e\n\u003cp\u003e今年想起来了，发现网银登不上了，密码忘了。\u003c/p\u003e\n\u003cp\u003e最悲剧的是，试了超过10次，账户冻结了。\u003c/p\u003e\n\u003cp\u003e打95588咨询了一下，说是可以内地见证方式修改密码，只需要带上港澳通行证和身份证即可。\u003c/p\u003e","title":"工银亚洲网银密码重置"},{"content":"背景 这是当前的博客架构，文件保存在Github仓库，通过Cloudflare Page提供访问。\n众所周知，在国内，Cloudflare的CDN属于反向加速，平均耗时在1.5s左右。\n今天，我们就来讲一下，如何实现国内海外双线路博客访问。\n大体思路 海外继续走Cloudflare Page，国内再套一层CDN回源Cloudflare Page。 Cloudflare Page已经提供了一个cname域名A，形如xxx.pages.dev。 国内CDN添加域名后，也会提供一个cname域名B。 使用国内dns解析服务，配置cname双线路解析。 具体操作 Cloudflare Page添加新域名解析\n这个域名是为了给国内CDN回源使用，与博客当前域名不同即可。\n配置国内CDN\n我用的腾讯云，其他服务商也是可以的。\n加速域名：填写博客对外访问的域名 回源地址和Host：填写第一步新加的域名 添加成功后，会有一个cname地址，这里是国内线路解析要用到的。\nDNS解析调整\nCloudflare不支持双线路配置，国内服务商支持，我这里用的是腾讯云。\n首先将域名的NS解析改为国内服务商的NS地址，修改后2周左右会收到Cloudflare的邮件，不需要理会。\nliudon.com 的名称服务器不再指向 Cloudflare。它们现在指向： sandals.dnspod.net heron.dnspod.net [not set] [not set] [not set] 此更改意味着 liudon.com 不再使用 Cloudflare，因此不会再享受我们的安全和性能服务带来的优势。您的 DNS 记录将在 7 天内从我们的系统中彻底删除。 然后添加解析，默认走国内CDN，境外走Cloudflare Page。\n额外的问题 为了加速Google Analytics，使用Cloudflare Worker进行了反代，具体见加速Google Analytics。\n更改NS后，导致海外访问无法触发Cloudflare Worker了，导致没有博客统计数据了。\n经过一番搜索后，发现Cloudflare Page有类似的Function功能，只需要在网站根目录下新建functions目录，添加对应文件即可。\n这里以Hugo静态博客举例说明：\n在根目录的static目录下，新建functions目录，新建analytics目录，添加post.js文件。\n这个analytics/post.js是为了对应原有Worker的访问地址analytics/post，可自行修改。\npost.js文件代码如下：\nexport async function onRequest(context) { try { return await postHandler(context); } catch(e) { return new Response(`${e.message}\\n${e.stack}`, { status: 500 }); } } async function postHandler(context) { const GA_DOMAIN = \u0026#39;google-analytics.com\u0026#39;; const GA_COLLECT_PATH = \u0026#39;g\\/collect\u0026#39;; const COLLECT_PATH = \u0026#39;analytics/post\u0026#39;; const DOMAIN = \u0026#39;这里填你博客的域名\u0026#39;; const url = context.request.url; const cf_ip = context.request.headers.get(\u0026#39;CF-Connecting-IP\u0026#39;); const cf_country = context.request.cf.country; const ga_url = url.replace(`${DOMAIN}/${COLLECT_PATH}`, `${GA_DOMAIN}/${GA_COLLECT_PATH}`) const newReq = await readRequest(context.request, ga_url); context.waitUntil(fetch(newReq)); return new Response(null, { status: 204, statusText: \u0026#39;No Content\u0026#39;, }); } async function readRequest(request, url) { const { _, headers } = request; const nq = { method: request.method, headers: { Origin: headers.get(\u0026#39;origin\u0026#39;), \u0026#39;Cache-Control\u0026#39;: \u0026#39;max-age=0\u0026#39;, \u0026#39;User-Agent\u0026#39;: headers.get(\u0026#39;user-agent\u0026#39;), Accept: headers.get(\u0026#39;accept\u0026#39;), \u0026#39;Accept-Language\u0026#39;: headers.get(\u0026#39;accept-language\u0026#39;), \u0026#39;Content-Type\u0026#39;: headers.get(\u0026#39;content-type\u0026#39;) || \u0026#39;text/plain\u0026#39;, Referer: headers.get(\u0026#39;referer\u0026#39;), }, body: request.body, }; return new Request(url, nq); } 优化效果 有了国内CDN的加持，平均耗时优化到1s左右了。\n","permalink":"https://liudon.com/posts/%E5%8A%A0%E9%80%9Fcloudflare%E8%AE%BF%E9%97%AE/","summary":"\u003ch4 id=\"背景\"\u003e背景\u003c/h4\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/%E5%8A%A0%E9%80%9Fcloudflare%E8%AE%BF%E9%97%AE/blog.png_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/%E5%8A%A0%E9%80%9Fcloudflare%E8%AE%BF%E9%97%AE/blog.png_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"blog.png\" width=\"828\" height=\"753\" alt=\"博客架构\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e\n\u003cp\u003e这是当前的博客架构，文件保存在\u003ccode\u003eGithub\u003c/code\u003e仓库，通过\u003ccode\u003eCloudflare Page\u003c/code\u003e提供访问。\u003c/p\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/%E5%8A%A0%E9%80%9Fcloudflare%E8%AE%BF%E9%97%AE/slow.png_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/%E5%8A%A0%E9%80%9Fcloudflare%E8%AE%BF%E9%97%AE/slow.png_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"slow.png\" width=\"1080\" height=\"311\" alt=\"国内访问情况\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e\n\u003cp\u003e众所周知，在国内，\u003ccode\u003eCloudflare\u003c/code\u003e的CDN属于反向加速，平均耗时在1.5s左右。\u003c/p\u003e","title":"加速Cloudflare访问"},{"content":"2023年过完了，是时候来个总结了。\n博客 2023年一共更新了15篇内容，共计12000字。\n访问Top3的文章：\n将博客部署到星际文件系统(IPFS)\n利用Github Actions定时抓取微博\n优化博客的累计布局偏移(CLS)问题\n主要是因为有在v2ex发帖导流，所以访问量高一些。\n2023年12月北京暴雪记录\n没想到的是一篇暴雪记录，收获了最多的评论，可能大家更容易共情。\n不过从侧面也说明了技术的东西并没有太多人看，所以后来就不再分享导流了。\n工作 今年搬到了后厂村，见识了互联网的人流。\n在23年最后一个工作日，下班路上，算了一下，这一年晚上9点半之后打车59次。\n而且年底这段时间，打车愈发困难，至少要排队1个小时。\n相比之前一坐坐一天，每天中午会绕公司大楼转两圈。\n驾照 驾照终于到手了。\n趁着娃暑假、十一假期，开车上路了。\n参与了第一次摇号。\n换了新手机 用了5年的iPhone7 plus，过地铁NFC时不时刷不开了，感觉得换手机了。\n十一假期回来在官网订了15pro，需要11月21日才能发货。\n订货后，老手机的问题越来越多，换手机变的急迫起来。\n于是，开始刷实体店取货。\n用了探火app监控，10月11日中午抢到一台王府井取货。\n10月12日晚上8点出发，上16号线地铁后，老手机开始持续发烫，过一会自动黑屏了。\n按键有触感，但是屏幕不亮，怎么捣鼓也不行，手机越来越烫，都有点怕它炸了。\n换乘8号线的路上，试了试按住所有按键，手机重启了，看见苹果logo那一刻真好。\n重启完总算正常了，进店排队取货，提前了一个月拿到了新手机。\n升级体验非常好，使用丝滑，再也不用插着充电器玩手机了，感谢老婆。\n财务 提前还了两笔房贷，希望明年可以把商贷还完。\n股市收益率-1.11%，港股套牢中，美股稍微回了点血。\n本命年了，希望一切顺利。\n祝大家新年快乐！\n","permalink":"https://liudon.com/posts/review-2023/","summary":"\u003cp\u003e2023年过完了，是时候来个总结了。\u003c/p\u003e\n\u003ch4 id=\"博客\"\u003e博客\u003c/h4\u003e\n\u003cp\u003e2023年一共更新了15篇内容，共计12000字。\u003c/p\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/review-2023/20240104184720.png_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/review-2023/20240104184720.png_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"20240104184720.png\" width=\"733\" height=\"436\" alt=\"Google Analytics全年统计\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e\n\u003cp\u003e访问Top3的文章：\u003c/p\u003e","title":"2023年终总结"},{"content":" 记录暴雪下普通打工人的生活。\n12月14日 周四 北京的雪已经连着下了两天了。\n12月11日，也是因为下雪，晚上打车打到10点半才叫到车。\n所以这次下雪后，晚上就早走了。\n7:15坐上公司摆渡车，7:40左右到西二旗。\n下车前刷微博看到有说昌平线故障，还没细看就到站下车了，还没想到事情的严重性。\n路口已经有交警在指挥交通，看见两辆消防车在等红灯，事后想可能是去救援的。\n走到进站口，就听到有人喊，“昌平线故障不停车，请更换其他交通工具”。\n我坐13号线，继续往前走，就看到了下面的情景。\n栏杆里全是人，后面的人还在不断的往里进。\n看了下门口的人不动，人太多，不敢进去，先看看情况。\n过了一会，有人喊13号线也停了，扭头赶紧走。\n第一反应打车，看了下，排队900人，直接放弃，换公交。\n最近的公交站在西二旗大街，走吧。\n到公交站一看，人更多，本来路就窄，全是人，走都没法走。\n公交也没戏了，继续走吧，走过这段到前面看看再。\n事后看说有的车被挤爆了，吓的别的车都不敢开门了。\n走的有点冷，闻见一股香味，一看手机快8点半了，找个地吃点东西先。\n一碗馄饨下肚，暖和多了，继续上路。\n走的小腿有点酸了，终于到公交站了。\n等了一小会，总算上车了。\n车也不敢开的快，10迈左右。\n晚上10点，终于到家了。\n路上花费2小时45分钟。\n12月15日 周五 早上坐公交到地铁站。\n你的浏览器不支持 video 标签。 霍营地铁站盛况，人挤满了整个通道。\n立马出站，换乘公交。\n路上花费2小时。\n","permalink":"https://liudon.com/posts/2023%E5%B9%B412%E6%9C%88%E5%8C%97%E4%BA%AC%E6%9A%B4%E9%9B%AA%E8%AE%B0%E5%BD%95/","summary":"\u003cblockquote\u003e\n\u003cp\u003e记录暴雪下普通打工人的生活。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch4 id=\"12月14日-周四\"\u003e12月14日 周四\u003c/h4\u003e\n\u003cp\u003e北京的雪已经连着下了两天了。\u003c/p\u003e\n\u003cp\u003e12月11日，也是因为下雪，晚上打车打到10点半才叫到车。\u003c/p\u003e\n\u003cp\u003e所以这次下雪后，晚上就早走了。\u003c/p\u003e","title":"2023年12月北京暴雪记录"},{"content":"继续我们的博客优化之旅，本篇内容我们将介绍如何使用Hugo实现响应式和优化的图片。\n问题 在之前文章里，通过腾讯云数据万象实现了图片优化能力，具体的可参考文章累计布局偏移修复方案改进 —— 自动生成图片宽高。\n经过一段运行后，发现这里有一个弊端。\nRun hugo --gc --minify --cleanDestinationDir Start building sites … hugo v0.119.0-b84644c008e0dc2c4b67bd69cccf87a41a03937e linux/amd64 BuildDate=2023-09-24T15:20:17Z VendorInfo=gohugoio ERROR Failed to get JSON resource \u0026#34;https://static.***.com/64412246-9050f100-d0c1-11e9-893a-f9b0766533ad.png?imageInfo\u0026amp;t=1698674110\u0026#34;: Get \u0026#34;https://static.***.com/64412246-9050f100-d0c1-11e9-893a-f9b0766533ad.png?imageInfo\u0026amp;t=1698674110\u0026#34;: stream error: stream ID 1; STREAM_CLOSED; received from peer ERROR Failed to get JSON resource \u0026#34;https://static.***.com/SkRx5uFwQ8Cliyq.jpg?imageInfo\u0026amp;t=1698674110\u0026#34;: Get \u0026#34;https://static.***.com/SkRx5uFwQ8Cliyq.jpg?imageInfo\u0026amp;t=1698674110\u0026#34;: stream error: stream ID 3; STREAM_CLOSED; received from peer 随着图片数量增多，因为需要调接口查询图片信息，这里构建耗时变长，同时也特别容易出现超时导致构建失败。\n失败的时候，需要手动重跑构建，自动化发布卡壳了。\n优化 经过一番搜索，发现其实Hugo本身是支持图片处理能力的。\nImage processing\nResize, crop, rotate, filter, and convert images.\nhttps://gohugo.io/content-management/image-processing/\n下面以我使用的PaperMod主题为例，讲下如何通过image processing实现图片响应式优化。\nimage processing需要用到Page bundles，所以文章目录结构需要调整， 将一篇文章的资源（md文件，图片等）放在一个目录下。\ncontent/ ├── posts │ ├── my-post │ │ ├── content1.md │ │ ├── content2.md │ │ ├── image1.jpg │ │ ├── image2.png │ │ └── index.md │ └── my-other-post │ └── index.md 目录结构调整完毕后，接下来修改图片显示文件代码。\n这里需要生成webp格式图片，所以需要使用hugo的extended版本。\nPagerMod主题涉及到图片显示的一共三个文件：\n_default/_markup/render-image.html，对应markdown图片语法解析。\n{{- $respSizes := slice 480 720 1080 -}} /*生成的图片规格*/ {{- $dataSzes := \u0026#34;(min-width: 768px) 720px, 100vw\u0026#34; -}} {{- $holder := \u0026#34;GIP\u0026#34; -}} {{- $hint := \u0026#34;photo\u0026#34; -}} {{- $filter := \u0026#34;box\u0026#34; -}} {{- $Destination := .Destination -}} {{- $Text := .Text -}} {{- $Title := .Title -}} /*内容图片响应式开关配置，默认为true*/ {{- $responsiveImages := (.Page.Params.responsiveImages | default site.Params.responsiveImages) | default true }} {{ with $src := .Page.Resources.GetMatch .Destination }} {{- if $responsiveImages -}} \u0026lt;picture\u0026gt; /*只有使用了hugo扩展版本的，才生成webp格式图片*/ {{- if and hugo.IsExtended (ne $src.MediaType.Type \u0026#34;image/webp\u0026#34;) -}} \u0026lt;source type=\u0026#34;image/webp\u0026#34; srcset=\u0026#34; {{- with $respSizes -}} {{- range $i, $e := . -}} {{- if $i }}, {{ end -}}{{- ($src.Resize (print . \u0026#34;x webp \u0026#34; $hint \u0026#34; \u0026#34; $filter) ).RelPermalink | absURL }} {{ . }}w {{- end -}} {{- end -}}\u0026#34; sizes=\u0026#34;{{ $dataSzes }}\u0026#34; /\u0026gt; {{- end -}} \u0026lt;source type=\u0026#34;{{ $src.MediaType.Type }}\u0026#34; srcset=\u0026#34; {{- with $respSizes -}} {{- range $i, $e := . -}} {{- if ge $src.Width . -}} {{- if $i }}, {{ end -}}{{- ($src.Resize (print . \u0026#34;x jpg \u0026#34; $filter) ).RelPermalink | absURL}} {{ . }}w {{- end -}} {{- end -}} {{- end -}}, {{$src.Permalink }} {{printf \u0026#34;%dw\u0026#34; ($src.Width)}}\u0026#34; sizes=\u0026#34;{{ $dataSzes }}\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;{{ $Destination | safeURL }}\u0026#34; width=\u0026#34;{{ .Width }}\u0026#34; height=\u0026#34;{{ .Height }}\u0026#34; alt=\u0026#34;{{ $Text }}\u0026#34; title=\u0026#34;{{ $Title }}\u0026#34; loading=\u0026#34;lazy\u0026#34; /\u0026gt; \u0026lt;/picture\u0026gt; {{- else }} \u0026lt;img src=\u0026#34;{{ $Destination | safeURL }}\u0026#34; width=\u0026#34;{{ $src.Width }}\u0026#34; height=\u0026#34;{{ $src.Height }}\u0026#34; alt=\u0026#34;{{ $Text }}\u0026#34; title=\u0026#34;{{ $Title }}\u0026#34; loading=\u0026#34;lazy\u0026#34; /\u0026gt; {{- end }} {{ end }} partials/cover.html，对应文章封面解析。\n{{- $respSizes := slice 480 720 1080 -}} {{- $dataSzes := \u0026#34;(min-width: 768px) 720px, 100vw\u0026#34; -}} {{- $holder := \u0026#34;GIP\u0026#34; -}} {{- $hint := \u0026#34;photo\u0026#34; -}} {{- $filter := \u0026#34;box\u0026#34; -}} {{- with .cxt}} {{/* Apply proper context from dict */}} {{- if (and .Params.cover.image (not $.isHidden)) }} {{- $alt := (.Params.cover.alt | default .Params.cover.caption | plainify) }} \u0026lt;figure class=\u0026#34;entry-cover\u0026#34;\u0026gt; /*封面响应式图片配置开关，默认为true*/ {{- $responsiveImages := (.Params.cover.responsiveImages | default site.Params.cover.responsiveImages) | default true }} {{- $addLink := (and site.Params.cover.linkFullImages (not $.IsHome)) }} {{- $cover := (.Resources.ByType \u0026#34;image\u0026#34;).GetMatch (printf \u0026#34;*%s*\u0026#34; (.Params.cover.image)) }} {{- if $cover -}}{{/* i.e it is present in page bundle */}} {{- if $addLink }}\u0026lt;a href=\u0026#34;{{ (path.Join .RelPermalink .Params.cover.image) | absURL }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;{{ end -}} {{- if $responsiveImages -}} \u0026lt;picture\u0026gt; {{- if and hugo.IsExtended (ne $cover.MediaType.Type \u0026#34;image/webp\u0026#34;) -}} \u0026lt;source type=\u0026#34;image/webp\u0026#34; srcset=\u0026#34; {{- with $respSizes -}} {{- range $i, $e := . -}} {{- if $i }}, {{ end -}}{{- ($cover.Resize (print . \u0026#34;x webp \u0026#34; $hint \u0026#34; \u0026#34; $filter) ).RelPermalink | absURL }} {{ . }}w {{- end -}} {{- end -}}\u0026#34; sizes=\u0026#34;{{ $dataSzes }}\u0026#34; /\u0026gt; {{- end -}} \u0026lt;source type=\u0026#34;{{ $cover.MediaType.Type }}\u0026#34; srcset=\u0026#34; {{- with $respSizes -}} {{- range $i, $e := . -}} {{- if ge $cover.Width . -}} {{- if $i }}, {{ end -}}{{- ($cover.Resize (print . \u0026#34;x jpg \u0026#34; $filter) ).RelPermalink | absURL}} {{ . }}w {{- end -}} {{- end -}} {{- end -}}, {{$cover.Permalink }} {{printf \u0026#34;%dw\u0026#34; ($cover.Width)}}\u0026#34; sizes=\u0026#34;{{ $dataSzes }}\u0026#34; /\u0026gt; \u0026lt;img loading=\u0026#34;lazy\u0026#34; src=\u0026#34;{{ $cover.Permalink }}\u0026#34; alt=\u0026#34;{{ $alt }}\u0026#34; width=\u0026#34;{{ $cover.Width }}\u0026#34; height=\u0026#34;{{ $cover.Height }}\u0026#34;\u0026gt; \u0026lt;/picture\u0026gt; {{- else }}{{/* Unprocessable image or responsive images disabled */}} \u0026lt;img loading=\u0026#34;lazy\u0026#34; src=\u0026#34;{{ (path.Join .RelPermalink .Params.cover.image) | absURL }}\u0026#34; alt=\u0026#34;{{ $alt }}\u0026#34;\u0026gt; {{- end }} {{- else }}{{/* For absolute urls and external links, no img processing here */}} {{- if $addLink }}\u0026lt;a href=\u0026#34;{{ (.Params.cover.image) | absURL }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;{{ end -}} \u0026lt;img loading=\u0026#34;lazy\u0026#34; src=\u0026#34;{{ (.Params.cover.image) | absURL }}\u0026#34; alt=\u0026#34;{{ $alt }}\u0026#34;\u0026gt; {{- end }} {{- if $addLink }}\u0026lt;/a\u0026gt;{{ end -}} {{/* Display Caption */}} {{- if not $.IsHome }} {{ with .Params.cover.caption }}\u0026lt;p\u0026gt;{{ . | markdownify }}\u0026lt;/p\u0026gt;{{- end }} {{- end }} \u0026lt;/figure\u0026gt; {{- end }}{{/* End image */}} {{- end -}}{{/* End context */ -}} shortcodes/figure.html，对应文章内figure语法解析。\n{{- $respSizes := slice 480 720 1080 -}} {{- $dataSzes := \u0026#34;(min-width: 768px) 720px, 100vw\u0026#34; -}} {{- $holder := \u0026#34;GIP\u0026#34; -}} {{- $hint := \u0026#34;photo\u0026#34; -}} {{- $filter := \u0026#34;box\u0026#34; -}} {{ $src := .Get \u0026#34;src\u0026#34; }} {{ $align := .Get \u0026#34;align\u0026#34; }} {{ $alt := .Get \u0026#34;alt\u0026#34; }} {{ $caption := .Get \u0026#34;caption\u0026#34; }} /*内容图片响应式开关配置，默认为true*/ {{- $responsiveImages := (.Page.Params.responsiveImages | default site.Params.responsiveImages) | default true }} \u0026lt;figure{{ if or (.Get \u0026#34;class\u0026#34;) (eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34;) }} class=\u0026#34; {{- if eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34; }}align-center {{ end }} {{- with .Get \u0026#34;class\u0026#34; }}{{ . }}{{- end }}\u0026#34; {{- end -}}\u0026gt; {{- if .Get \u0026#34;link\u0026#34; -}} \u0026lt;a href=\u0026#34;{{ .Get \u0026#34;link\u0026#34; }}\u0026#34;{{ with .Get \u0026#34;target\u0026#34; }} target=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ with .Get \u0026#34;rel\u0026#34; }} rel=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt; {{- end }} {{ with $src := $.Page.Resources.GetMatch (.Get \u0026#34;src\u0026#34;) }} \u0026lt;picture\u0026gt; {{- if $responsiveImages -}} {{- if and hugo.IsExtended (ne $src.MediaType.Type \u0026#34;image/webp\u0026#34;) -}} \u0026lt;source type=\u0026#34;image/webp\u0026#34; srcset=\u0026#34; {{- with $respSizes -}} {{- range $i, $e := . -}} {{- if $i }}, {{ end -}}{{- ($src.Resize (print . \u0026#34;x webp \u0026#34; $hint \u0026#34; \u0026#34; $filter) ).RelPermalink | absURL }} {{ . }}w {{- end -}} {{- end -}}\u0026#34; sizes=\u0026#34;{{ $dataSzes }}\u0026#34; /\u0026gt; {{- end -}} \u0026lt;source type=\u0026#34;{{ $src.MediaType.Type }}\u0026#34; srcset=\u0026#34; {{- with $respSizes -}} {{- range $i, $e := . -}} {{- if ge $src.Width . -}} {{- if $i }}, {{ end -}}{{- ($src.Resize (print . \u0026#34;x jpg \u0026#34; $filter) ).RelPermalink | absURL}} {{ . }}w {{- end -}} {{- end -}} {{- end -}}, {{$src.Permalink }} {{printf \u0026#34;%dw\u0026#34; ($src.Width)}}\u0026#34; sizes=\u0026#34;{{ $dataSzes }}\u0026#34; /\u0026gt; {{- end }} \u0026lt;img loading=\u0026#34;lazy\u0026#34; src=\u0026#34;{{ $src }}{{- if eq ($align) \u0026#34;center\u0026#34; }}#center{{- end }}\u0026#34; {{- if or ($alt) ($caption) }} alt=\u0026#34;{{ with $alt }}{{ . }}{{ else }}{{ $caption | markdownify| plainify }}{{ end }}\u0026#34; {{- end -}} {{- with $src.Width -}} width=\u0026#34;{{ . }}\u0026#34;{{- end -}} {{- with $src.Height -}} height=\u0026#34;{{ . }}\u0026#34;{{- end -}} /\u0026gt; \u0026lt;!-- Closing img tag --\u0026gt; \u0026lt;/picture\u0026gt; {{ end }} {{- if .Get \u0026#34;link\u0026#34; }}\u0026lt;/a\u0026gt;{{ end -}} {{- if or (or (.Get \u0026#34;title\u0026#34;) (.Get \u0026#34;caption\u0026#34;)) (.Get \u0026#34;attr\u0026#34;) -}} \u0026lt;figcaption\u0026gt; {{ with (.Get \u0026#34;title\u0026#34;) -}} {{ . }} {{- end -}} {{- if or (.Get \u0026#34;caption\u0026#34;) (.Get \u0026#34;attr\u0026#34;) -}}\u0026lt;p\u0026gt; {{- .Get \u0026#34;caption\u0026#34; | markdownify -}} {{- with .Get \u0026#34;attrlink\u0026#34; }} \u0026lt;a href=\u0026#34;{{ . }}\u0026#34;\u0026gt; {{- end -}} {{- .Get \u0026#34;attr\u0026#34; | markdownify -}} {{- if .Get \u0026#34;attrlink\u0026#34; }}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/p\u0026gt; {{- end }} \u0026lt;/figcaption\u0026gt; {{- end }} \u0026lt;/figure\u0026gt; 使用效果 正常插入jpg/png图片，构建后会自动生成webp/原始格式下不同规格的图片。\nmarkdown图片显示 figure短代码显示 封面显示 提示：\n随着图片数量增多，可能会遇到构建超时的错误，类似下述信息：\nStart building sites … hugo v0.96.0+extended darwin/arm64 BuildDate=unknown Error: Error building site: \u0026#34;/Users/dondonliu/Code/liudon.github.io/content/posts/xxxx/index.md:1:1\u0026#34;: timed out initializing value. You may have a circular loop in a shortcode, or your site may have resources that take longer to build than the `timeout` limit in your Hugo config file. Built in 22356 ms 可以通过修改配置文件config.yml，新增timeout配置，调大超时时间解决。\nbuildDrafts: false buildFuture: false buildExpired: false timeout: 60s // 调大此处的时间即可 终于知道为啥PagerMod主题默认只有封面下才有生成不同规格的逻辑了。\n","permalink":"https://liudon.com/posts/responsive-and-optimized-images-with-hugo/","summary":"\u003cp\u003e继续我们的\u003ca href=\"/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/\"\u003e博客优化之旅\u003c/a\u003e，本篇内容我们将介绍如何使用\u003ccode\u003eHugo\u003c/code\u003e实现响应式和优化的图片。\u003c/p\u003e\n\u003ch4 id=\"问题\"\u003e问题\u003c/h4\u003e\n\u003cp\u003e在之前文章里，通过腾讯云数据万象实现了图片优化能力，具体的可参考文章\u003ca href=\"https://liudon.com/posts/hugo-auto-generate-image-width-and-height/\"\u003e累计布局偏移修复方案改进 —— 自动生成图片宽高\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e经过一段运行后，发现这里有一个弊端。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRun hugo --gc --minify --cleanDestinationDir\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStart building sites … \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo v0.119.0-b84644c008e0dc2c4b67bd69cccf87a41a03937e linux/amd64 BuildDate=2023-09-24T15:20:17Z VendorInfo=gohugoio\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eERROR Failed to get JSON resource \u0026#34;https://static.***.com/64412246-9050f100-d0c1-11e9-893a-f9b0766533ad.png?imageInfo\u0026amp;t=1698674110\u0026#34;: Get \u0026#34;https://static.***.com/64412246-9050f100-d0c1-11e9-893a-f9b0766533ad.png?imageInfo\u0026amp;t=1698674110\u0026#34;: stream error: stream ID 1; STREAM_CLOSED; received from peer\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eERROR Failed to get JSON resource \u0026#34;https://static.***.com/SkRx5uFwQ8Cliyq.jpg?imageInfo\u0026amp;t=1698674110\u0026#34;: Get \u0026#34;https://static.***.com/SkRx5uFwQ8Cliyq.jpg?imageInfo\u0026amp;t=1698674110\u0026#34;: stream error: stream ID 3; STREAM_CLOSED; received from peer\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e随着图片数量增多，因为需要调接口查询图片信息，这里构建耗时变长，同时也特别容易出现超时导致构建失败。\u003c/p\u003e","title":"使用Hugo实现响应式和优化的图片"},{"content":"起因 Google Analytics是一款优秀的流量分析服务，集成方便，使用简单。\n最近在优化页面访问速度，发现Google Analytics是一个优化点。\n优化 1. 访问加速 国内访问Google Analytics很慢，同时还面临着各种广告屏蔽插件拦截。\n这里借助Cloudflare Worker实现Google Analytics反代，同时更换采集路由规避广告屏蔽插件的拦截。\nCloudflare新建Worker，代码如下，保存后部署。\naddEventListener(\u0026#39;fetch\u0026#39;, (event) =\u0026gt; { // 这里可以加 filter return event.respondWith(handleRequest(event)); }); // worker 应用的路由地址，末尾不加 \u0026#39;/\u0026#39;，改为你的博客地址 const DOMAIN = \u0026#39;xxx.com\u0026#39;; // 博客插入的js地址文件名，可自定义 const JS_FILE = \u0026#39;ga.js\u0026#39; // 响应上报的接口路径，可自定义，规避广告屏蔽插件拦截 const COLLECT_PATH = \u0026#39;collect_path\u0026#39;; // 原 gtag 地址，将G-XXX改为你的id const JS_URL = \u0026#39;https://www.googletagmanager.com/gtag/js?id=G-XXX\u0026#39; // 下面不需要改 const G_DOMAIN = \u0026#39;google-analytics.com\u0026#39;; const G_COLLECT_PATH = \u0026#39;g\\/collect\u0026#39;; async function handleRequest(event) { const url = event.request.url; if (url.match(`${DOMAIN}/${JS_FILE}`)) { const requestJs = await (await fetch(JS_URL)).text(); const jsText = requestJs.replaceAll(\u0026#39;\\\u0026#34;www\\\u0026#34;\u0026#39;, \u0026#39;\\\u0026#34;\\\u0026#34;\u0026#39;).replaceAll(\u0026#39;.\u0026#39; + G_DOMAIN, DOMAIN).replaceAll(G_COLLECT_PATH, COLLECT_PATH); return new Response(jsText, { status: 200, statusText: \u0026#39;OK\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/javascript\u0026#39;, }, }); } else if (url.match(`${DOMAIN}/${COLLECT_PATH}`)) { const newReq = await readRequest(event.request); event.waitUntil(fetch(newReq)); } return new Response(null, { status: 204, statusText: \u0026#39;No Content\u0026#39;, }); } async function readRequest(request) { const { url, headers } = request; const body = await request.text(); const ga_url = url.replace(`${DOMAIN}/${COLLECT_PATH}`, `www.${G_DOMAIN}/${G_COLLECT_PATH}`); const nq = { method: \u0026#39;POST\u0026#39;, headers: { Host: \u0026#39;www.google-analytics.com\u0026#39;, Origin: headers.get(\u0026#39;origin\u0026#39;), \u0026#39;Cache-Control\u0026#39;: \u0026#39;max-age=0\u0026#39;, \u0026#39;User-Agent\u0026#39;: headers.get(\u0026#39;user-agent\u0026#39;), Accept: headers.get(\u0026#39;accept\u0026#39;), \u0026#39;Accept-Language\u0026#39;: headers.get(\u0026#39;accept-language\u0026#39;), \u0026#39;Content-Type\u0026#39;: headers.get(\u0026#39;content-type\u0026#39;) || \u0026#39;text/plain\u0026#39;, Referer: headers.get(\u0026#39;referer\u0026#39;), }, body: body, }; return new Request(ga_url, nq); } 页面插入对应js\n\u0026lt;!-- Google tag (gtag.js) --\u0026gt; \u0026lt;script async src=\u0026#34;https://xxx.com/ga.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; // 对应worker里的DOMAIN 和 JS_FILE，需要保持一致 \u0026lt;script\u0026gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag(\u0026#39;js\u0026#39;, new Date()); gtag(\u0026#39;config\u0026#39;, \u0026#39;G-XXX\u0026#39;); // 将G-XXX改为你的id \u0026lt;/script\u0026gt; 2. 文件瘦身 通过性能分析，发现js文件过大，影响页面加载速度。\n虽然使用了Cloudfare代理，但是Google Analytics原始的js文件为80KB左右。\n搜索一番，找到一个瘦身版Google Analytics。\nMinimal Google Analytics Snippet A simple snippet for tracking page views on your website without having to add external libraries. Also works for single page applications made with the likes of react and vue.js. Before Google Tag Manager + Analytics = 73kB After Snippet = 1.5kB 插入的js片断，只有1.5kb大小。\n唯一的缺点就是只有基本功能，这对于我们来说足够了。\n将第一步插入的js代码，更换为下述代码，需要将其中的xxx.com/collect_path改为第一步定义的DOMAIN和COLLECT_PATH变量值。\n\u0026lt;script\u0026gt; enScroll=!1,enFdl=!1,extCurrent=void 0,filename=void 0,targetText=void 0,splitOrigin=void 0;const lStor=localStorage,sStor=sessionStorage,doc=document,docEl=document.documentElement,docBody=document.body,docLoc=document.location,w=window,s=screen,nav=navigator||{},extensions=[\u0026#34;pdf\u0026#34;,\u0026#34;xls\u0026#34;,\u0026#34;xlsx\u0026#34;,\u0026#34;doc\u0026#34;,\u0026#34;docx\u0026#34;,\u0026#34;txt\u0026#34;,\u0026#34;rtf\u0026#34;,\u0026#34;csv\u0026#34;,\u0026#34;exe\u0026#34;,\u0026#34;key\u0026#34;,\u0026#34;pps\u0026#34;,\u0026#34;ppt\u0026#34;,\u0026#34;pptx\u0026#34;,\u0026#34;7z\u0026#34;,\u0026#34;pkg\u0026#34;,\u0026#34;rar\u0026#34;,\u0026#34;gz\u0026#34;,\u0026#34;zip\u0026#34;,\u0026#34;avi\u0026#34;,\u0026#34;mov\u0026#34;,\u0026#34;mp4\u0026#34;,\u0026#34;mpe\u0026#34;,\u0026#34;mpeg\u0026#34;,\u0026#34;wmv\u0026#34;,\u0026#34;mid\u0026#34;,\u0026#34;midi\u0026#34;,\u0026#34;mp3\u0026#34;,\u0026#34;wav\u0026#34;,\u0026#34;wma\u0026#34;];function a(e,t,n,o){const j=\u0026#34;G-G9ZDJQN9E2\u0026#34;,r=()=\u0026gt;Math.floor(Math.random()*1e9)+1,c=()=\u0026gt;Math.floor(Date.now()/1e3),F=()=\u0026gt;(sStor._p||(sStor._p=r()),sStor._p),E=()=\u0026gt;r()+\u0026#34;.\u0026#34;+c(),_=()=\u0026gt;(lStor.cid_v4||(lStor.cid_v4=E()),lStor.cid_v4),m=lStor.getItem(\u0026#34;cid_v4\u0026#34;),v=()=\u0026gt;m?void 0:enScroll==!0?void 0:\u0026#34;1\u0026#34;,p=()=\u0026gt;(sStor.sid||(sStor.sid=c()),sStor.sid),O=()=\u0026gt;{if(!sStor._ss)return sStor._ss=\u0026#34;1\u0026#34;,sStor._ss;if(sStor.getItem(\u0026#34;_ss\u0026#34;)==\u0026#34;1\u0026#34;)return void 0},a=\u0026#34;1\u0026#34;,g=()=\u0026gt;{if(sStor.sct)if(enScroll==!0)return sStor.sct;else x=+sStor.getItem(\u0026#34;sct\u0026#34;)+ +a,sStor.sct=x;else sStor.sct=a;return sStor.sct},i=docLoc.search,b=new URLSearchParams(i),h=[\u0026#34;q\u0026#34;,\u0026#34;s\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;query\u0026#34;,\u0026#34;keyword\u0026#34;],y=h.some(e=\u0026gt;i.includes(\u0026#34;\u0026amp;\u0026#34;+e+\u0026#34;=\u0026#34;)||i.includes(\u0026#34;?\u0026#34;+e+\u0026#34;=\u0026#34;)),u=()=\u0026gt;y==!0?\u0026#34;view_search_results\u0026#34;:enScroll==!0?\u0026#34;scroll\u0026#34;:enFdl==!0?\u0026#34;file_download\u0026#34;:\u0026#34;page_view\u0026#34;,f=()=\u0026gt;enScroll==!0?\u0026#34;90\u0026#34;:void 0,C=()=\u0026gt;{if(u()==\u0026#34;view_search_results\u0026#34;){for(let e of b)if(h.includes(e[0]))return e[1]}else return void 0},d=encodeURIComponent,k=e=\u0026gt;{let t=[];for(let n in e)e.hasOwnProperty(n)\u0026amp;\u0026amp;e[n]!==void 0\u0026amp;\u0026amp;t.push(d(n)+\u0026#34;=\u0026#34;+d(e[n]));return t.join(\u0026#34;\u0026amp;\u0026#34;)},A=!1,S=\u0026#34;https://xxx.com/collect_path\u0026#34;,M=k({v:\u0026#34;2\u0026#34;,tid:j,_p:F(),sr:(s.width*w.devicePixelRatio+\u0026#34;x\u0026#34;+s.height*w.devicePixelRatio).toString(),ul:(nav.language||void 0).toLowerCase(),cid:_(),_fv:v(),_s:\u0026#34;1\u0026#34;,dl:docLoc.origin+docLoc.pathname+i,dt:doc.title||void 0,dr:doc.referrer||void 0,sid:p(),sct:g(),seg:\u0026#34;1\u0026#34;,en:u(),\u0026#34;epn.percent_scrolled\u0026#34;:f(),\u0026#34;ep.search_term\u0026#34;:C(),\u0026#34;ep.file_extension\u0026#34;:e||void 0,\u0026#34;ep.file_name\u0026#34;:t||void 0,\u0026#34;ep.link_text\u0026#34;:n||void 0,\u0026#34;ep.link_url\u0026#34;:o||void 0,_ss:O(),_dbg:A?1:void 0}),l=S+\u0026#34;?\u0026#34;+M;if(nav.sendBeacon)nav.sendBeacon(l);else{let e=new XMLHttpRequest;e.open(\u0026#34;POST\u0026#34;,l,!0)}}a();function sPr(){return(docEl.scrollTop||docBody.scrollTop)/((docEl.scrollHeight||docBody.scrollHeight)-docEl.clientHeight)*100}doc.addEventListener(\u0026#34;scroll\u0026#34;,sEv,{passive:!0});function sEv(){const e=sPr();if(e\u0026lt;90)return;enScroll=!0,a(),doc.removeEventListener(\u0026#34;scroll\u0026#34;,sEv,{passive:!0}),enScroll=!1}document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;,function(){let e=document.getElementsByTagName(\u0026#34;a\u0026#34;);for(let t=0;t\u0026lt;e.length;t++)if(e[t].getAttribute(\u0026#34;href\u0026#34;)!=null){const n=e[t].getAttribute(\u0026#34;href\u0026#34;),s=n.substring(n.lastIndexOf(\u0026#34;/\u0026#34;)+1),o=s.split(\u0026#34;.\u0026#34;).pop();(e[t].hasAttribute(\u0026#34;download\u0026#34;)||extensions.includes(o))\u0026amp;\u0026amp;e[t].addEventListener(\u0026#34;click\u0026#34;,fDl,{passive:!0})}});function fDl(e){enFdl=!0;const t=e.currentTarget.getAttribute(\u0026#34;href\u0026#34;),n=t.substring(t.lastIndexOf(\u0026#34;/\u0026#34;)+1),s=n.split(\u0026#34;.\u0026#34;).pop(),o=n.replace(\u0026#34;.\u0026#34;+s,\u0026#34;\u0026#34;),i=e.currentTarget.text,r=t.replace(docLoc.origin,\u0026#34;\u0026#34;);a(s,o,i,r),enFdl=!1} \u0026lt;/script\u0026gt; 效果 ","permalink":"https://liudon.com/posts/optimize-google-analytics/","summary":"\u003ch3 id=\"起因\"\u003e起因\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eGoogle Analytics\u003c/code\u003e是一款优秀的流量分析服务，集成方便，使用简单。\u003c/p\u003e\n\u003cp\u003e最近在优化页面访问速度，发现\u003ccode\u003eGoogle Analytics\u003c/code\u003e是一个优化点。\u003c/p\u003e\n\u003ch3 id=\"优化\"\u003e优化\u003c/h3\u003e\n\u003ch4 id=\"1-访问加速\"\u003e1. 访问加速\u003c/h4\u003e\n\u003cp\u003e国内访问\u003ccode\u003eGoogle Analytics\u003c/code\u003e很慢，同时还面临着各种广告屏蔽插件拦截。\u003c/p\u003e","title":"加速Google Analytics"},{"content":"对于一个新站点来说，总是想着能让搜索引擎快点收录网站内容。\n今天，我们就来介绍一种利用Google Indexing API接口，通过Github Actions实现部署时通知Google抓取页面内容。\n操作步骤：\n申请Google API凭证\n访问Google Cloud控制台，如果没有项目，点击选择项目，然后新建项目。\n选择对应项目，点击IAM和管理标签，点击服务帐号，选择新建服务帐号。\n服务帐号名称：自己起个名字即可 服务帐号id：不需要修改，自动生成 服务角色：Owner 填写相关信息后，点击完成创建好服务帐号。\n创建完，默认是没有密钥的，记住账号的邮箱地址，后面要用到。\n点击后面的三个点按钮，选择管理密钥。\n点击添加密钥-\u0026gt;新建密钥，选择JSON格式，点击创建会下载一个文件，这里后面会用到。\n回到首页，点击API和服务，点击启用API和服务，搜索框输入Indexing，选择Web Search Indexing API，点击启用即可。\n将服务账号关联到Google Search Console\n进入Google Search Console控制台，选择你的网站。\n找到设置里的用户和权限，点击添加用户。\n邮箱地址：填写第一步分配的邮箱地址 权限：选择拥有者 配置Github Action\n添加Secret变量，变量key为GOOGLE_INDEXING_API_TOKEN，值为前面下载文件的内容。\n编辑workflow编排任务，新增步骤\n- name: easyindex run: | echo \u0026#39;${{ secrets.GOOGLE_INDEXING_API_TOKEN }}\u0026#39; \u0026gt; ./credentials.json touch ./url.csv echo \u0026#34;\\\u0026#34;notification_type\\\u0026#34;,\\\u0026#34;url\\\u0026#34;\u0026#34; \u0026gt;\u0026gt; ./url.csv # Headers line echo \u0026#34;\\\u0026#34;URL_UPDATED\\\u0026#34;,\\\u0026#34;https://liudon.com/\\\u0026#34;\u0026#34; \u0026gt;\u0026gt; ./url.csv # ADD URL 这里改为你的博客首页 echo \u0026#34;\\\u0026#34;URL_UPDATED\\\u0026#34;,\\\u0026#34;https://liudon.com/sitemap.xml\\\u0026#34;\u0026#34; \u0026gt;\u0026gt; ./url.csv # ADD URL 这里改为你的sitemap地址 curl -s -L https://github.com/usk81/easyindex-cli/releases/download/v1.0.6/easyindex-cli_1.0.6_linux_amd64.tar.gz | tar xz chmod +x ./easyindex-cli ./easyindex-cli google -d -c ./url.csv ","permalink":"https://liudon.com/posts/how-to-use-google-indexing-api-to-speed-up-blog-indexing/","summary":"\u003cp\u003e对于一个新站点来说，总是想着能让搜索引擎快点收录网站内容。\u003c/p\u003e\n\u003cp\u003e今天，我们就来介绍一种利用\u003ccode\u003eGoogle Indexing API\u003c/code\u003e接口，通过\u003ccode\u003eGithub Actions\u003c/code\u003e实现部署时通知\u003ccode\u003eGoogle\u003c/code\u003e抓取页面内容。\u003c/p\u003e","title":"使用Google Indexing API加速博客收录"},{"content":" 在本篇文章里，我会介绍如何在Netlify上部署Twikoo评论系统，如何接入到静态博客Hugo，以及如何实现Twikoo系统版本自动更新。\n2024年7月30日更新：因为Github接口策略调整，原有的匿名通过接口获取版本号方法失效，已更改为带token方式请求接口获取版本号，详见workflow里Get twikoo version步骤配置。\n背景 博客之前通过Vercel部署了Twikoo评论系统，但是最近发现加载很慢。\n看Twikoo官网文档，Netlify比Vercel国内访问会更优一些，于是搞了一把迁移。\n迁移过程中遇到了一些问题，网上搜了一番，发现Netlify下部署Twikoo的信息很少，这篇文章我会介绍整个操作过程。\n部署 参考官网文档，部署即可。\n这里一开始Fork成了https://github.com/twikoojs/twikoo，导致部署后访问404。\n注意，正确的仓库是https://github.com/twikoojs/twikoo-netlify。\n使用同一个MongoDB，配置原来的地址，这样已有的评论也不会丢。\n部署后，通过https://comment.liudon.com访问，返回200。\n但是访问https://liudon.com，提示CORS跨域错误，搜索一番网上资料也没找到相关信息。\n一般跨域错误都是返回头里缺少跨域相关的字段导致，因此决定使用Netlify来新增返回头规避。\n仓库下新增netlify.toml文件，针对根目录返回跨域头，内容如下。\n[[headers]] # Define which paths this specific [[headers]] block will cover. for = \u0026#34;/\u0026#34; [headers.values] Access-Control-Allow-Origin = \u0026#34;*\u0026#34; Access-Control-Allow-Headers = \u0026#34;Content-Type\u0026#34; Access-Control-Allow-Methods = \u0026#34;*\u0026#34; 再次刷新页面，报错又变成了404，但是直接访问https://comment.liudon.com地址是返回的200。\n经过一番定位，发现了问题所在：\ntwikoo-netlify库根目录地址是通过Location跳转到的/.netlify/functions/twikoo接口，/.netlify/functions/twikoo才是真正处理的接口。\n而vercel-netlify库是通过rewrite将所有请求转发到了/api/index接口。\n博客里写的Twikoo环境id填的是https://comment.liudon.com，更换为Netlify后，需要更换环境id，补齐后面的/.netlify/functions/twikoo。\n因为Netlify也支持Rewrite转发，所以决定还是通过netlify.toml文件增加转发配置解决，内容如下：\n[[redirects]] from = \u0026#34;/\u0026#34; to = \u0026#34;/.netlify/functions/twikoo\u0026#34; status = 200 force = true 注意一定不要漏了force参数，因为根目录文件是存在的，不带这个参数的话Rewrite是不生效的，必须指定这个。\n这下访问彻底ok了。\n不过很快又发现另外一个问题，看到别人博客上Twikoo版本已经是1.6.22，自己的还是1.5.11。\n搜索一番后，Twikoo已经给出了更新操作:\n针对 Netlify 部署的更新方式 1. 登录 Github，找到部署时 fork 到自己账号下的名为 twikoo-netlify 的仓库 2. 打开 package.json，点击编辑 3. 将 \u0026#34;twikoo-vercel\u0026#34;: \u0026#34;latest\u0026#34; 其中的 latest 修改为最新版本号。点击 Commit changes 4. 部署会自动触发 不过这样操作，每次版本更新，都需要手动去改一下package.json文件的版本，重新构建。\n对于一个程序员，我们的追求就是自动化。\n自动版本更新 服务端版本自动更新 这里利用Github Actions定时任务，通过接口拉取twikoo最新的版本，然后更新到package.json文件，从而实现版本自动更新。\n在自己twikoo-netlify仓库下，新增Actions，代码如下：\n# This is a basic workflow to help you get started with Actions name: CI # Controls when the workflow will run on: # Triggers the workflow on push or pull request events but only for the \u0026#34;main\u0026#34; branch push: branches: [ \u0026#34;main\u0026#34; ] pull_request: branches: [ \u0026#34;main\u0026#34; ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: schedule: - cron: \u0026#39;0 2 * * *\u0026#39; # 每天定时2点执行一次 # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs: # This workflow contains a single job called \u0026#34;build\u0026#34; build: # The type of runner that the job will run on runs-on: ubuntu-latest permissions: contents: write # Steps represent a sequence of tasks that will be executed as part of the job steps: # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses: actions/checkout@v3 # Runs a single command using the runners shell - name: update version env: github_token: ${{ secrets.TOKEN }} run: | response=$(curl -sf -H \u0026#34;Authorization: token $github_token\u0026#34; -H \u0026#34;Accept: application/vnd.github+json\u0026#34; https://api.github.com/repos/twikoojs/twikoo/releases/latest) version=$(echo $response | jq -r \u0026#39;.tag_name\u0026#39;) if [ -n \u0026#34;$version\u0026#34; ]; then sed -i \u0026#34;s/\\\u0026#34;twikoo-netlify\\\u0026#34;: \\\u0026#34;.*\\\u0026#34;/\\\u0026#34;twikoo-netlify\\\u0026#34;: \\\u0026#34;$version\\\u0026#34;/\u0026#34; package.json fi shell: bash # Runs a set of commands using the runners shell - name: Commit changes uses: EndBug/add-and-commit@v9 env: github_token: ${{ secrets.TOKEN }} add: . 这里会把修改后的package.json文件提交到仓库，所以需要申请一个Token，可以参考我上一篇文章申请，然后添加到仓库变量里。\n博客引用版本自动更新 这里一开始想到在前端去查服务端最新版本号，然后引用对应版本的js文件来实现。\n但是这样就会导致每次页面加载都要去查一次版本，会导致加载时间变长。\n因此还是决定在服务端部署时，获取最新版本号更新服务。\n引用版本配置化 comments.html文件修改：\n\u0026lt;script src=\u0026#34;https://cdn.staticfile.org/twikoo/{{ .Site.Params.twikoo.version }}/twikoo.all.min.js\u0026#34;\u0026gt; config.tml配置修改：\nparams: env: production # to enable google analytics, opengraph, twitter-cards and schema. ... # 其他配置 assets: disableHLJS: true # to disable highlight.js twikoo: version: 1.5.11 # 配置twikoo版本号 获取最新版本号部署 Actions新增步骤：\n- name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; #### - name: Get twikoo version id: twikoo run: | version=$(curl -s https://raw.githubusercontent.com/Liudon/twikoo-netlify/main/package.json | jq -r \u0026#39;.dependencies.\u0026#34;twikoo-netlify\u0026#34;\u0026#39;) echo \u0026#34;Twikoo version: $version\u0026#34; echo \u0026#34;twikoo_version=$version\u0026#34; \u0026gt;\u0026gt; $GITHUB_OUTPUT - name: Update config.yml version uses: fjogeleit/yaml-update-action@main with: valueFile: \u0026#39;config.yml\u0026#39; propertyPath: \u0026#39;params.twikoo.version\u0026#39; value: ${{ steps.twikoo.outputs.twikoo_version }} commitChange: true #### - name: Build run: hugo --gc --minify --cleanDestinationDir ####内代码即为获取版本号，更新config.tml版本号逻辑，然后再进行hugo部署。\n需要将https://raw.githubusercontent.com/Liudon/twikoo-netlify/main/package.json这个url里的Liudon/twikoo-netlify改为你的仓库名。\n这下后面Twikoo官方更新版本，博客的Twikoo也会跟着自动更新。\n","permalink":"https://liudon.com/posts/deploy-twikoo-on-netlify/","summary":"\u003cblockquote\u003e\n\u003cp\u003e在本篇文章里，我会介绍如何在Netlify上部署Twikoo评论系统，如何接入到静态博客Hugo，以及如何实现Twikoo系统版本自动更新。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cem\u003e2024年7月30日更新：因为\u003ca href=\"https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting\"\u003eGithub接口策略调整\u003c/a\u003e，原有的匿名通过接口获取版本号方法失效，已更改为带token方式请求接口获取版本号，详见workflow里Get twikoo version步骤配置。\u003c/em\u003e\u003c/p\u003e","title":"在Netlify上部署Twikoo评论系统"},{"content":"背景 在微博上关注了一些用户，比如tk教主，月风。\n但是有些内容过段时间不可见了，所以希望可以定时抓取微博归档备份下来。\n实现方案 整体思路：利用Github Actions的Scheduled任务，定时执行抓取shell脚本，将内容保存到文件，提交到Github仓库。\n新建仓库，比如weibo_archive。\n添加抓取脚本，完整代码。\n这里用到微博两个接口：\n// 抓取某个用户最新的10条微博数据，返回里有每条微博的id，这里如果内容过长的话会被截断 https://m.weibo.cn/api/container/getIndex?jumpfrom=weibocom\u0026amp;type=uid\u0026amp;value=$uid\u0026amp;containerid=107603$uid // 根据微博id，抓取微博完整的内容 https://m.weibo.cn/statuses/extend?id=$id 添加环境变量。\n进入个人设置-\u0026gt;Developer Settings-\u0026gt;Personal access tokens-\u0026gt;Tokens (classic)，创建新的Token，记下对应的值。\n进入第一步创建仓库的配置页，点击Secrets and variables下的Actions：\n切到Secret目录，创建新的Secret变量，名称为TOKEN，值为前一步记录的值；切到Variables目录，创建新的Variables变量，名称为WEIBO_UIDS，值为你需要抓取的微博用户id，多个用户的话以|分割。\n添加定时任务，完整yaml文件如下。\n# This is a basic workflow to help you get started with Actions name: CI # Controls when the workflow will run on: # Triggers the workflow on push or pull request events but only for the \u0026#34;main\u0026#34; branch push: branches: [ \u0026#34;main\u0026#34; ] pull_request: branches: [ \u0026#34;main\u0026#34; ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: schedule: - cron: \u0026#39;*/5 * * * *\u0026#39; # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs: # This workflow contains a single job called \u0026#34;build\u0026#34; build: # The type of runner that the job will run on runs-on: ubuntu-latest permissions: contents: write # Steps represent a sequence of tasks that will be executed as part of the job steps: # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses: actions/checkout@v3 # Runs a single command using the runners shell - name: archive weibo run: | chmod +x ./weibo_archive.sh ./weibo_archive.sh shell: bash env: weibo_uids: ${{ vars.weibo_uids }} # Runs a set of commands using the runners shell - name: Commit changes uses: EndBug/add-and-commit@v9 env: github_token: ${{ secrets.TOKEN }} add: . 效果 抓取后的内容，会按用户id分别保存到不同文件。\n不过这个方案有一个唯一的缺点，Github Actions定时任务时间粒度最小是5分钟，而且不能保证执行时间完全符合这个粒度，所以可能还是会有漏掉的内容。\nNote: The schedule event can be delayed during periods of high loads of GitHub Actions workflow runs. High load times include the start of every hour. If the load is sufficiently high enough, some queued jobs may be dropped. To decrease the chance of delay, schedule your workflow to run at a different time of the hour.\n","permalink":"https://liudon.com/posts/using-github-actions-to-schedule-weibo-scraping/","summary":"\u003ch4 id=\"背景\"\u003e背景\u003c/h4\u003e\n\u003cp\u003e在微博上关注了一些用户，比如\u003ca href=\"https://weibo.com/u/1401527553\"\u003etk教主\u003c/a\u003e，\u003ca href=\"https://weibo.com/u/1670659923\"\u003e月风\u003c/a\u003e。\u003c/p\u003e\n\u003cp\u003e但是有些内容过段时间不可见了，所以希望可以定时抓取微博归档备份下来。\u003c/p\u003e\n\u003ch4 id=\"实现方案\"\u003e实现方案\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e整体思路：利用\u003ccode\u003eGithub Actions\u003c/code\u003e的\u003ccode\u003eScheduled\u003c/code\u003e任务，定时执行抓取shell脚本，将内容保存到文件，提交到Github仓库。\u003c/strong\u003e\u003c/p\u003e","title":"利用Github Actions定时抓取微博"},{"content":"病情 上次洗完牙后，还是不时有出血的情况。\n前段时间更是出现牙龈劈开一块肉，特别容易塞东西的情况。\n于是，又跑到医院来看牙了。\n医生检查后，说是牙周病，需要牙周刮治，要约到8月份了。\n回来查了下，牙周刮治还是挺痛苦的，想着找个专业医院看看再。\n挂号 于是开始北大口腔挂号，中间挂了一次总院的普通号，但是网上好多说是规培生操作，又取消了。\n找了农行的代挂号服务，北大口腔只能微信预约，他们也没渠道，只能自己挂了。\n总院实在是挂不到，于是转战第一门诊部的号。\n功夫不负有心人，7月5日总算挂上了牙周科李菲医生的号。\n治疗 7月7日，第一次看医生，刮治是没的跑了。\n做了牙齿探针，每个牙都要测一下，略疼。\n开了治疗计划，刮治分两次，每次半口牙，总费用3000元左右。\n第一次只洗牙，确实是专业，洗牙不到半个小时搞定。\n最关键的，洗完后我刷牙确实很少再出血了。\n8月3日，第一次刮治，只做了右半边。\n医生说我这算是轻的，刮治比洗牙会疼一些，可以打麻药也可以不打。\n行吧，那咱就不打麻药，来吧。\n医生开始操作，感觉和洗牙是一样的，也是拿喷水的机器在牙上弄来弄去。\n但是比洗牙更深一些，感觉是直接到牙龈下面了，确实要更疼一些。\n洗完后，再拿一个铁丝一样的东西在牙上使劲刮来刮去。\n自我感觉，还是前面洗牙更痛苦一些，后面刮来刮去没什么感觉。\n铁丝一样的工具，第二次刮治拍的 半个小时搞定，本来我以为我这得一俩小时，医生说那得是非常严重的，你这属于轻的。\n9月2日，第二次刮治，做了左半边。\n左边牙龈问题更压重些，这次痛感更强烈一些。\n同样也是半个小时搞定，1个月后再来复诊。\n费用 洗牙：480元，单子找不到了，我记得是这个数。 第一次刮治：1286元 第二次刮治：1176元 总费用2942元，基本都走了医保。\n","permalink":"https://liudon.com/posts/%E5%8C%97%E5%A4%A7%E5%8F%A3%E8%85%94%E7%89%99%E5%91%A8%E5%88%AE%E6%B2%BB%E8%AE%B0%E5%BD%95/","summary":"\u003ch4 id=\"病情\"\u003e病情\u003c/h4\u003e\n\u003cp\u003e上次洗完牙后，还是不时有出血的情况。\u003c/p\u003e\n\u003cp\u003e前段时间更是出现牙龈劈开一块肉，特别容易塞东西的情况。\u003c/p\u003e\n\u003cp\u003e于是，又跑到医院来看牙了。\u003c/p\u003e\n\u003cp\u003e医生检查后，说是牙周病，需要牙周刮治，要约到8月份了。\u003c/p\u003e","title":"北大口腔牙周刮治记录"},{"content":"赶在8月底，趁着娃暑假的尾声，回了趟老家。\n老家有条俗语，“永福庄的街，三里长”。\n这天吃完午饭，临时起意，带媳妇溜溜大街，见识下我们的大街。\n小时候，整天在这条街上跑来跑去。\n我们那巷子基本很少是堵头的，你可以穿到任意一个巷子，最后还能回到大街。\n小时候的大街，感觉很宽很长。\n现在大街都垫高了，大街也变的窄了许多。\n大街上的人很少，好多店铺都关门了。\n走在大街上，小时候的一幕幕映在眼前。\n有的地方，已经拆了重盖；\n有的地方，已经人去楼空。\n爷爷待过的大队部 以前的供销社 老爷爷家 姥爷以前的药铺 姥姥家 最早是肉食店，后来开过药铺 里面以前是个学校 巷口的大饭店 一栋风格怪异的楼 巷子 刘家祖庙 赵家祖庙 赵家祖庙 关帝庙 ","permalink":"https://liudon.com/posts/%E6%95%85%E4%B9%A1%E5%9B%9E%E5%BF%86%E4%B9%8B%E6%97%85/","summary":"\u003cp\u003e赶在8月底，趁着娃暑假的尾声，回了趟老家。\u003c/p\u003e\n\u003cp\u003e老家有条俗语，“永福庄的街，三里长”。\u003c/p\u003e\n\u003cp\u003e这天吃完午饭，临时起意，带媳妇溜溜大街，见识下我们的大街。\u003c/p\u003e\n\u003cp\u003e小时候，整天在这条街上跑来跑去。\u003c/p\u003e","title":"故乡回忆之旅"},{"content":"背景 编译流水线代码\ngo get google.golang.org/protobuf/cmd/protoc-gen-go@latest protoc -I=./zzz --proto_path=./xx --go_out=./abc --go_opt=paths=xx.proto ... go build -o xxx 在go升级到1.20.1版本后，执行报错。\nprotoc-gen-go: program not found or is not executable 解决 Starting in Go 1.17, installing executables with go get is deprecated. go install may be used instead.\nIn a future Go release, go get will no longer build packages; it will only be used to add, update, or remove dependencies in go.mod. Specifically, go get will act as if the -d flag were enabled.\nhttps://docs.studygolang.com/doc/go-get-install-deprecation\n从 Go 1.7 版本开始，go get 命令默认只会下载包，不会自动编译和安装可执行文件。\n因此，如果你想要使用 go get 命令安装包并编译可执行文件，你需要使用 go install 命令。\n替换为go install解决。\n","permalink":"https://liudon.com/posts/golang-go-get-binary-not-found-solution/","summary":"\u003ch4 id=\"背景\"\u003e背景\u003c/h4\u003e\n\u003cp\u003e编译流水线代码\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego get google.golang.org/protobuf/cmd/protoc-gen-go@latest\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprotoc -I=./zzz --proto_path=./xx --go_out=./abc --go_opt=paths=xx.proto\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego build -o xxx\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在go升级到1.20.1版本后，执行报错。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprotoc-gen-go: program not found or is not executable\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"解决\"\u003e解决\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003eStarting in Go 1.17, installing executables with go get is deprecated. go install may be used instead.\u003c/p\u003e\n\u003cp\u003eIn a future Go release, go get will no longer build packages; it will only be used to add, update, or remove dependencies in go.mod. Specifically, go get will act as if the -d flag were enabled.\u003c/p\u003e","title":"解决Golang使用go get安装包后找不到可执行文件的问题"},{"content":"问题背景 前几天在Planet里follow自己的web3博客，遇到下面的错误。\n经过Livid大佬提醒，说是网站的JSON Feed不是标准格式导致的。\n因为我的已经修正没法截图，这里以dvel的博客举例，格式类似如下。\n[ { \u0026#34;content\u0026#34;: \u0026#34;用 ChatGPT 写一些小脚本真是太方便了。\\nGPT-4 发布后试了试，还是蛮不错的，代码是 ChatGPT 生成的。\\n几个来回就可以编写一个能正常使用的油猴脚本：\\n（略，HTML 代码） 在 https://chdbits.co/bakatest.php 有如上内容。 我要为这个网页编写一个油猴脚本。 通过自动获取 ChatGPT 的 API 来解析此问题的答案，供用户参考。 将内容输出到 `#outer \u0026amp;gt; h1` 的下面，同时输出你提取到的问题内容和答案，以便我看看你是否提取正确。 获取错啦。 问题的获取路径是 `#outer \u0026amp;gt; form \u0026amp;gt; table \u0026amp;gt; tbody \u0026amp;gt; tr:nth-child(1) \u0026amp;gt; td` 选项的获取路径是 `#outer \u0026amp;gt; form \u0026amp;gt; table \u0026amp;gt; tbody \u0026amp;gt; tr:nth-child(2) \u0026amp;gt; td` 使用这个 API： ``` curl https://api.openai.com/v1/chat/completions \\\\ -H \u0026amp;#39;Content-Type: application/json\u0026amp;#39; \\\\ -H \u0026amp;#39;Authorization: Bearer YOUR_API_KEY\u0026amp;#39; \\\\ -d \u0026amp;#39;{ \u0026amp;#34;model\u0026amp;#34;: \u0026amp;#34;gpt-3.5-turbo\u0026amp;#34;, \u0026amp;#34;messages\u0026amp;#34;: [{\u0026amp;#34;role\u0026amp;#34;: \u0026amp;#34;user\u0026amp;#34;, \u0026amp;#34;content\u0026amp;#34;: \u0026amp;#34;Say this is a test!\u0026amp;#34;}], \u0026amp;#34;temperature\u0026amp;#34;: 0.7 }\u0026amp;#39; ``` 响应格式为： ``` { \u0026amp;#34;id\u0026amp;#34;:\u0026amp;#34;chatcmpl-abc123\u0026amp;#34;, \u0026amp;#34;object\u0026amp;#34;:\u0026amp;#34;chat.completion\u0026amp;#34;, \u0026amp;#34;created\u0026amp;#34;:1677858242, \u0026amp;#34;model\u0026amp;#34;:\u0026amp;#34;gpt-3.5-turbo-0301\u0026amp;#34;, \u0026amp;#34;usage\u0026amp;#34;:{ \u0026amp;#34;prompt_tokens\u0026amp;#34;:13, \u0026amp;#34;completion_tokens\u0026amp;#34;:7, \u0026amp;#34;total_tokens\u0026amp;#34;:20 }, \u0026amp;#34;choices\u0026amp;#34;:[ { \u0026amp;#34;message\u0026amp;#34;:{ \u0026amp;#34;role\u0026amp;#34;:\u0026amp;#34;assistant\u0026amp;#34;, \u0026amp;#34;content\u0026amp;#34;:\u0026amp;#34;\\\\n\\\\nThis is a test!\u0026amp;#34; }, \u0026amp;#34;finish_reason\u0026amp;#34;:\u0026amp;#34;stop\u0026amp;#34;, \u0026amp;#34;index\u0026amp;#34;:0 } ] } ``` 它没有最近的互联网数据，所以还是需要把 API 的使用方式发给它。\\n然后它就帮我写好了，我不用复习 JavaScript，不用看油猴脚本的教程和文档，也不用查 @grant 等等标记是干嘛的。\\n可以再继续要求它改进一些，比如换个输出位置，优化 prompt，自动选中正确回答，支持单选题和多选题等等。\\n效果展示：\\n安装： https://greasyfork.org/zh-CN/scripts/461944-chd-quiz-answer\\n\u0026#34;, \u0026#34;permalink\u0026#34;: \u0026#34;https://dvel.me/posts/chd-quiz-answer/\u0026#34;, \u0026#34;summary\u0026#34;: \u0026#34;用 ChatGPT 写一些小脚本真是太方便了。\\nGPT-4 发布后试了试，还是蛮不错的，代码是 ChatGPT 生成的。\\n几个来回就可以编写一个能正常使用的油猴脚本：\\n（略，HTML 代码） 在 https://chdbits.co/bakatest.php 有如上内容。 我要为这个网页编写一个油猴脚本。 通过自动获取 ChatGPT 的 API 来解析此问题的答案，供用户参考。 将内容输出到 `#outer \u0026amp;gt; h1` 的下面，同时输出你提取到的问题内容和答案，以便我看看你是否提取正确。 获取错啦。 问题的获取路径是 `#outer \u0026amp;gt; form \u0026amp;gt; table \u0026amp;gt; tbody \u0026amp;gt; tr:nth-child(1) \u0026amp;gt; td` 选项的获取路径是 `#outer \u0026amp;gt; form \u0026amp;gt; table \u0026amp;gt; tbody \u0026amp;gt; tr:nth-child(2) \u0026amp;gt; td` 使用这个 API： ``` curl https://api.openai.com/v1/chat/completions \\\\ -H \u0026amp;#39;Content-Type: application/json\u0026amp;#39; \\\\ -H \u0026amp;#39;Authorization: Bearer YOUR_API_KEY\u0026amp;#39; \\\\ -d \u0026amp;#39;{ \u0026amp;#34;model\u0026amp;#34;: \u0026amp;#34;gpt-3.5-turbo\u0026amp;#34;, \u0026amp;#34;messages\u0026amp;#34;: [{\u0026amp;#34;role\u0026amp;#34;: \u0026amp;#34;user\u0026amp;#34;, \u0026amp;#34;content\u0026amp;#34;: \u0026amp;#34;Say this is a test!\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;CHD 油猴脚本：每日签到自动答题\u0026#34; }, ... ] 下面是一个JSON Feed的示例，详细规范见jsonfeed.org。\n{ \u0026#34;version\u0026#34;: \u0026#34;https://jsonfeed.org/version/1.1\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;My Example Feed\u0026#34;, \u0026#34;home_page_url\u0026#34;: \u0026#34;https://example.org/\u0026#34;, \u0026#34;feed_url\u0026#34;: \u0026#34;https://example.org/feed.json\u0026#34;, \u0026#34;items\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;content_text\u0026#34;: \u0026#34;This is a second item.\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://example.org/second-item\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;content_html\u0026#34;: \u0026#34;\u0026lt;p\u0026gt;Hello, world!\u0026lt;/p\u0026gt;\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://example.org/initial-post\u0026#34; } ] } 修复方案 添加自定义jsonfeed模版文件，路径为layouts/_default/index.jsonfeed.json。 文件内容如下：\n{{- $pctx := . -}} {{- if .IsHome -}}{{ $pctx = site }}{{- end -}} {{- $pages := slice -}} {{- if or $.IsHome $.IsSection -}} {{- $pages = $pctx.RegularPages -}} {{- else -}} {{- $pages = $pctx.Pages -}} {{- end -}} {{- $limit := site.Config.Services.RSS.Limit -}} {{- if ge $limit 1 -}} {{- $pages = $pages | first $limit -}} {{- end -}} {{- $title := \u0026#34;\u0026#34; }} {{- if eq .Title .Site.Title }} {{- $title = .Site.Title }} {{- else }} {{- with .Title }} {{- $title = print . \u0026#34; on \u0026#34;}} {{- end }} {{- $title = print $title .Site.Title }} {{- end }} { \u0026#34;version\u0026#34;: \u0026#34;https://jsonfeed.org/version/1.1\u0026#34;, \u0026#34;title\u0026#34;: {{ $title | jsonify }}, \u0026#34;home_page_url\u0026#34;: {{ .Permalink | jsonify }}, {{- with .OutputFormats.Get \u0026#34;jsonfeed\u0026#34; }} \u0026#34;feed_url\u0026#34;: {{ .Permalink | jsonify }}, {{- end }} {{- if (or .Site.Params.author .Site.Params.author_url) }} \u0026#34;authors\u0026#34;: [{ {{- if .Site.Params.author }} \u0026#34;name\u0026#34;: {{ .Site.Params.author | jsonify }}, {{- end }} {{- if .Site.Params.author_url }} \u0026#34;url\u0026#34;: {{ .Site.Params.author_url | jsonify }} {{- end }} }], {{- end }} {{- if $pages }} \u0026#34;items\u0026#34;: [ {{- range $index, $element := $pages }} {{- with $element }} {{- if $index }},{{end}} { \u0026#34;title\u0026#34;: {{ .Title | jsonify }}, \u0026#34;id\u0026#34;: {{ .Permalink | jsonify }}, \u0026#34;url\u0026#34;: {{ .Permalink | jsonify }}, {{- if .Site.Params.showFullTextinJSONFeed }} \u0026#34;summary\u0026#34;: {{ with .Description }}{{ . | jsonify }}{{ else }}{{ .Summary | jsonify }}{{ end -}}, \u0026#34;content_html\u0026#34;: {{ .Content | jsonify }}, {{- else }} \u0026#34;content_text\u0026#34;: {{ with .Description }}{{ . | jsonify }}{{ else }}{{ .Summary | jsonify }}{{ end -}}, {{- end }} {{- if .Params.cover.image }} {{- $cover := (.Resources.ByType \u0026#34;image\u0026#34;).GetMatch (printf \u0026#34;*%s*\u0026#34; (.Params.cover.image)) }} {{- if $cover }} \u0026#34;image\u0026#34;: {{ (path.Join .RelPermalink $cover) | absURL | jsonify }}, {{- end }} {{- end }} \u0026#34;date_published\u0026#34;: {{ .Date.Format \u0026#34;2006-01-02T15:04:05Z07:00\u0026#34; | jsonify }}, {{- $tags := slice -}} {{ with .Params.tags }} {{ range . }} {{ $tags = $tags | append (. | jsonify) }} {{end}} {{end}} \u0026#34;tags\u0026#34;: [{{ delimit $tags \u0026#34;, \u0026#34; }}] } {{- end }} {{- end }} ] {{ end }} } 开启JSON Feed。 配置文件调整如下：\noutputFormats: jsonfeed: # 添加jsonfeed输出格式 mediaType: application/feed+json baseName: feed rel: alternate isPlainText: true outputs: home: - HTML - RSS - json # fusejs搜索依赖index.json，不要漏掉这个配置 - jsonfeed # 开启jsonfeed params: ... showFullTextinJSONFeed: true # jsonfeed开启全文输出 参考资料：How to add JSON Feed support to Hugo\n","permalink":"https://liudon.com/posts/fix-hugo-json-feed/","summary":"\u003ch4 id=\"问题背景\"\u003e问题背景\u003c/h4\u003e\n\u003cp\u003e前几天在\u003ca href=\"https://planetics.xyz/\"\u003ePlanet\u003c/a\u003e里follow自己的\u003ca href=\"https://liudon.eth\"\u003eweb3博客\u003c/a\u003e，遇到下面的错误。\u003c/p\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/fix-hugo-json-feed/202303251415675.png_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/fix-hugo-json-feed/202303251415675.png_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"202303251415675.png\" width=\"716\" height=\"544\" alt=\"PlanetFeedError\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e\n\u003cp\u003e经过Livid大佬提醒，说是网站的JSON Feed不是标准格式导致的。\u003c/p\u003e\n\u003cp\u003e因为我的已经修正没法截图，这里以\u003ca href=\"https://dvel.me/index.json\"\u003edvel的博客\u003c/a\u003e举例，格式类似如下。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026#34;content\u0026#34;: \u0026#34;用 ChatGPT 写一些小脚本真是太方便了。\\nGPT-4 发布后试了试，还是蛮不错的，代码是 ChatGPT 生成的。\\n几个来回就可以编写一个能正常使用的油猴脚本：\\n（略，HTML 代码） 在 https://chdbits.co/bakatest.php 有如上内容。 我要为这个网页编写一个油猴脚本。 通过自动获取 ChatGPT 的 API 来解析此问题的答案，供用户参考。 将内容输出到 `#outer \u0026amp;gt; h1` 的下面，同时输出你提取到的问题内容和答案，以便我看看你是否提取正确。 获取错啦。 问题的获取路径是 `#outer \u0026amp;gt; form \u0026amp;gt; table \u0026amp;gt; tbody \u0026amp;gt; tr:nth-child(1) \u0026amp;gt; td` 选项的获取路径是 `#outer \u0026amp;gt; form \u0026amp;gt; table \u0026amp;gt; tbody \u0026amp;gt; tr:nth-child(2) \u0026amp;gt; td` 使用这个 API： ``` curl https://api.openai.com/v1/chat/completions \\\\ -H \u0026amp;#39;Content-Type: application/json\u0026amp;#39; \\\\ -H \u0026amp;#39;Authorization: Bearer YOUR_API_KEY\u0026amp;#39; \\\\ -d \u0026amp;#39;{ \u0026amp;#34;model\u0026amp;#34;: \u0026amp;#34;gpt-3.5-turbo\u0026amp;#34;, \u0026amp;#34;messages\u0026amp;#34;: [{\u0026amp;#34;role\u0026amp;#34;: \u0026amp;#34;user\u0026amp;#34;, \u0026amp;#34;content\u0026amp;#34;: \u0026amp;#34;Say this is a test!\u0026amp;#34;}], \u0026amp;#34;temperature\u0026amp;#34;: 0.7 }\u0026amp;#39; ``` 响应格式为： ``` { \u0026amp;#34;id\u0026amp;#34;:\u0026amp;#34;chatcmpl-abc123\u0026amp;#34;, \u0026amp;#34;object\u0026amp;#34;:\u0026amp;#34;chat.completion\u0026amp;#34;, \u0026amp;#34;created\u0026amp;#34;:1677858242, \u0026amp;#34;model\u0026amp;#34;:\u0026amp;#34;gpt-3.5-turbo-0301\u0026amp;#34;, \u0026amp;#34;usage\u0026amp;#34;:{ \u0026amp;#34;prompt_tokens\u0026amp;#34;:13, \u0026amp;#34;completion_tokens\u0026amp;#34;:7, \u0026amp;#34;total_tokens\u0026amp;#34;:20 }, \u0026amp;#34;choices\u0026amp;#34;:[ { \u0026amp;#34;message\u0026amp;#34;:{ \u0026amp;#34;role\u0026amp;#34;:\u0026amp;#34;assistant\u0026amp;#34;, \u0026amp;#34;content\u0026amp;#34;:\u0026amp;#34;\\\\n\\\\nThis is a test!\u0026amp;#34; }, \u0026amp;#34;finish_reason\u0026amp;#34;:\u0026amp;#34;stop\u0026amp;#34;, \u0026amp;#34;index\u0026amp;#34;:0 } ] } ``` 它没有最近的互联网数据，所以还是需要把 API 的使用方式发给它。\\n然后它就帮我写好了，我不用复习 JavaScript，不用看油猴脚本的教程和文档，也不用查 @grant 等等标记是干嘛的。\\n可以再继续要求它改进一些，比如换个输出位置，优化 prompt，自动选中正确回答，支持单选题和多选题等等。\\n效果展示：\\n安装： https://greasyfork.org/zh-CN/scripts/461944-chd-quiz-answer\\n\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026#34;permalink\u0026#34;: \u0026#34;https://dvel.me/posts/chd-quiz-answer/\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026#34;summary\u0026#34;: \u0026#34;用 ChatGPT 写一些小脚本真是太方便了。\\nGPT-4 发布后试了试，还是蛮不错的，代码是 ChatGPT 生成的。\\n几个来回就可以编写一个能正常使用的油猴脚本：\\n（略，HTML 代码） 在 https://chdbits.co/bakatest.php 有如上内容。 我要为这个网页编写一个油猴脚本。 通过自动获取 ChatGPT 的 API 来解析此问题的答案，供用户参考。 将内容输出到 `#outer \u0026amp;gt; h1` 的下面，同时输出你提取到的问题内容和答案，以便我看看你是否提取正确。 获取错啦。 问题的获取路径是 `#outer \u0026amp;gt; form \u0026amp;gt; table \u0026amp;gt; tbody \u0026amp;gt; tr:nth-child(1) \u0026amp;gt; td` 选项的获取路径是 `#outer \u0026amp;gt; form \u0026amp;gt; table \u0026amp;gt; tbody \u0026amp;gt; tr:nth-child(2) \u0026amp;gt; td` 使用这个 API： ``` curl https://api.openai.com/v1/chat/completions \\\\ -H \u0026amp;#39;Content-Type: application/json\u0026amp;#39; \\\\ -H \u0026amp;#39;Authorization: Bearer YOUR_API_KEY\u0026amp;#39; \\\\ -d \u0026amp;#39;{ \u0026amp;#34;model\u0026amp;#34;: \u0026amp;#34;gpt-3.5-turbo\u0026amp;#34;, \u0026amp;#34;messages\u0026amp;#34;: [{\u0026amp;#34;role\u0026amp;#34;: \u0026amp;#34;user\u0026amp;#34;, \u0026amp;#34;content\u0026amp;#34;: \u0026amp;#34;Say this is a test!\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026#34;title\u0026#34;: \u0026#34;CHD 油猴脚本：每日签到自动答题\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e下面是一个\u003ccode\u003eJSON Feed\u003c/code\u003e的示例，详细规范见\u003ca href=\"https://www.jsonfeed.org/\"\u003ejsonfeed.org\u003c/a\u003e。\u003c/p\u003e","title":"修正Hugo的JSON Feed格式"},{"content":"之前在2022年终总结提到过，我在练车考驾照。\n就在昨天，终于拿证了。👏👏👏\n咱也是可以上路开车的人了，虽然比别人晚了快10年才拿证。🐶\n2022年6月11日，在海淀驾校报名，周末连续班，报名费5380元。 2022年10月12日，科目一考试通过。 2022年10月22日，科目二模拟驾驶。 2022年11月13日，科目二第一次上车练习。 2022年11月24日，疫情严重，驾校发通知，自11月25日暂停培训。 2023年2月4日，年后驾校恢复培训，继续科目二练车。 2023年2月13日，科目二考试通过。 2023年3月11日，科目三上路练习。 2023年3月23日，上午科目三考试通过，下午科目四考试通过。 考试的时候，早上遇到临时交通管制，一直到9点40才开考。 考完回来，班车上的人说又管制不能考了。 班车拉回驾校，剩下的人中午加班考试。 终于不用再5点半起床赶班车了。🥱\n","permalink":"https://liudon.com/posts/my-journey-of-learning-to-drive/","summary":"\u003cp\u003e之前在\u003ca href=\"https://liudon.com/posts/review-2022/\"\u003e2022年终总结\u003c/a\u003e提到过，我在练车考驾照。\u003c/p\u003e\n\u003cp\u003e就在昨天，终于拿证了。👏👏👏\u003c/p\u003e\n\u003cp\u003e咱也是可以上路开车的人了，虽然比别人晚了快10年才拿证。🐶\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2022年6月11日，在海淀驾校报名，周末连续班，报名费5380元。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2022年10月12日，科目一考试通过。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2022年10月22日，科目二模拟驾驶。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2022年11月13日，科目二第一次上车练习。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2022年11月24日，疫情严重，驾校发通知，自11月25日暂停培训。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2023年2月4日，年后驾校恢复培训，继续科目二练车。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2023年2月13日，科目二考试通过。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2023年3月11日，科目三上路练习。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2023年3月23日，上午科目三考试通过，下午科目四考试通过。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e考试的时候，早上遇到临时交通管制，一直到9点40才开考。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e考完回来，班车上的人说又管制不能考了。\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e班车拉回驾校，剩下的人中午加班考试。\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e终于不用再5点半起床赶班车了。🥱\u003c/p\u003e","title":"我的学车之路"},{"content":"在这篇文章，我将会介绍如何利用Github Actions将hugo博客自动部署到IPFS上，并通过自定义域名访问IPFS上的文件。\nIPFS（InterPlanetary File System）中文称为星际文件系统，是一个旨在实现文件的分布式存储、共享和持久化的网络传输协议。\n照惯例,先上演示.访问我的IPFS博客\n欢迎各位pin我的博客， ipfs pin add /ipns/liudon.xyz\ncurl \u0026#39;https://liudon.xyz\u0026#39; -I HTTP/2 200 date: Tue, 21 Feb 2023 23:59:18 GMT content-type: text/html vary: Accept-Encoding access-control-allow-methods: GET access-control-allow-methods: GET, POST, OPTIONS last-modified: Tue, 21 Feb 2023 23:59:18 GMT x-ipfs-gateway-host: ipfs-bank1-sv15 x-ipfs-path: /ipns/liudon.xyz/ x-ipfs-roots: Qmd4pnpUj8CaLKoVMJNHJyrqwWVa4wvz1qKxZsU9vKgErL x-ipfs-pop: ipfs-bank1-sv15 timing-allow-origin: * access-control-allow-origin: * access-control-allow-headers: X-Requested-With, Range, Content-Range, X-Chunked-Output, X-Stream-Output access-control-expose-headers: Content-Range, X-Chunked-Output, X-Stream-Output x-ipfs-lb-pop: gateway-bank1-sv15 x-proxy-cache: MISS cf-cache-status: DYNAMIC report-to: {\u0026#34;endpoints\u0026#34;:[{\u0026#34;url\u0026#34;:\u0026#34;https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=FLcvWgtngoLuGZkl9jYsviSoOlSoE2Y0rKxI3bgNaKRxhNOrIm6nozqVzndav3%2B9QrvvcJ5GNmC11JBlN8tiigbF9CWPW33TbnLKyfdeblOcEhmZINTcC%2BJ6xhKs\u0026#34;}],\u0026#34;group\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} nel: {\u0026#34;success_fraction\u0026#34;:0,\u0026#34;report_to\u0026#34;:\u0026#34;cf-nel\u0026#34;,\u0026#34;max_age\u0026#34;:604800} server: cloudflare cf-ray: 79d36f598970531f-LAX alt-svc: h3=\u0026#34;:443\u0026#34;; ma=86400, h3-29=\u0026#34;:443\u0026#34;; ma=86400 准备工作: Cloudflare帐号 一台VPS主机,我用到腾讯云lighthouse主机2核2G 一个域名 方案介绍: 在VPS主机上安装启动IPFS服务,通过端口5001在内网提供API服务. 在GitHub上通过ssh建立端口转发,本地端口5001转发到VPS主机5001. 在GitHub上利用ipfs-http-client上传文进到5001端口. 绑定域名到IPNS地址,通过域名访问IPFS文件. 1. 部署IPFS服务 安装kubo,详见官方文档\nwget https://dist.ipfs.tech/kubo/v0.18.1/kubo_v0.18.1_linux-amd64.tar.gz tar -xvzf kubo_v0.18.1_linux-amd64.tar.gz \u0026gt; x kubo/install.sh \u0026gt; x kubo/ipfs \u0026gt; x kubo/LICENSE \u0026gt; x kubo/LICENSE-APACHE \u0026gt; x kubo/LICENSE-MIT \u0026gt; x kubo/README.md cd kubo sudo bash install.sh \u0026gt; Moved ./ipfs to /usr/local/bin ipfs --version \u0026gt; ipfs version 0.18.1 初始化IPFS\nipfs init --profile=server 添加到开机启动\n[Unit] Description=IPFS Daemon After=syslog.target network.target remote-fs.target nss-lookup.target [Service] Type=simple ExecStart=/usr/local/bin/ipfs daemon --enable-namesys-pubsub User=root [Install] WantedBy=multi-user.target 注意打开--enable-namesys-pubsub参数，不然IPNS更新生效很慢。\n将上述代码保存到/usr/lib/systemd/system/ipfs.service文件.\n启动进程.\nsystemctl start ipfs.service 开放端口\nIPFS默认通过4001端口跟DHT网络通信,需要放开4001端口访问.\n2. GitHub Actions配置 博客我使用的Hugo，原有的工作流方案见将博客部署到Cloudflare Pages。\n完整的工作流配置见main.yml。\n添加如下变量到Actions secrets\nSSHKEY VPS主机ssh登陆私钥 SSHHOST ssh用户@VPS机器IP,类似root@127.0.0.1 更新yaml配置文件,添加如下任务.\n- name: Connect to ssh in BG timeout-minutes: 2 run: | echo \u0026#34;${{ secrets.SSHKEY }}\u0026#34; \u0026gt; ../privkey chmod 600 ../privkey ssh -o StrictHostKeyChecking=no ${{ secrets.SSHHOST }} -i ../privkey -L 5001:localhost:5001 -fTN - name: ipfs upload uses: aquiladev/ipfs-action@master id: deploy timeout-minutes: 2 with: path: ./public service: ipfs verbose: true host: localhost port: 5001 protocol: http key: self # 要配置key,这样才会生成IPNS地址 测试执行action,日志里会有类似如下输出.\nUpload to IPFS finished successfully { cid: \u0026#39;QmST2Zqv8qffFTVuqfRX57uzqxsoQtTYinmHpyLh7padAD\u0026#39;, ipfs: \u0026#39;QmST2Zqv8qffFTVuqfRX57uzqxsoQtTYinmHpyLh7padAD\u0026#39;, ipns: \u0026#39;12D3KooWKvJ9Y4D5X4R3ajuc7tVtQWXZMG4iiMCFtay8frM66o4c\u0026#39; } 每次执行,ipfs地址不同,ipns地址不变. 记住这里到ipns地址,下面会用到.\n3. 域名配置 在Cloudflare上添加解析:\n添加DNS TXT记录,名称为_dnslink，值为dnslink=/ipns/12D3KooWKvJ9Y4D5X4R3ajuc7tVtQWXZMG4iiMCFtay8frM66o4c，将这里的12D3KooWKvJ9Y4D5X4R3ajuc7tVtQWXZMG4iiMCFtay8frM66o4c改为上一步日志里到ipns值。 添加DNS CNNANE记录,名称为你的域名，值为gateway.ipfs.io. 4. 开启相对路径 经Livid大佬提醒，公共网关访问时存在相对路径问题。\n我用的Hugo，配置文件里打开relativeURLs配置。\nrelativeURLs: true 从年前开始想怎么做成自动化,到今天终于跑通搞定了.😁😁😁\n两天跑了14G流量,每月的流量资源包基本够用了.\n参考资料：\nIPFS 日用优化指南\n参考配置\n","permalink":"https://liudon.com/posts/deploy-blog-to-ipfs/","summary":"\u003cp\u003e在这篇文章，我将会介绍如何利用\u003ccode\u003eGithub Actions\u003c/code\u003e将\u003ccode\u003ehugo\u003c/code\u003e博客自动部署到\u003ccode\u003eIPFS\u003c/code\u003e上，并通过自定义域名访问\u003ccode\u003eIPFS\u003c/code\u003e上的文件。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIPFS（InterPlanetary File System）中文称为星际文件系统，是一个旨在实现文件的分布式存储、共享和持久化的网络传输协议。\u003c/p\u003e","title":"将博客部署到星际文件系统(IPFS)"},{"content":" 下面的内容是由chatGPT润色生成的。\nAI太强大了 😂\n当我还是个孩子的时候，在看春节晚会时，总会有节目介绍那些不能回家过年的人。\n但我从未想过，等我长大后，我也会成为其中的一员。\n由于疫情的影响，我已经连续三年不能回家过年了。\n每次我告诉父母我无法回家，他们总是表现得非常平静，但我不知道他们挂了电话后的心情会如何。\n直到今年，我们全家都经历了一次感染，但这也使我们有了机会在这个特殊的春节回家过年。\n提前请了假，带娃体验下老家的生活。\n回家啦。\n赶大集。\n烧火。\n放烟花。\n抓鸟。\n放孔明灯。\n邻居家蹭饭。\n","permalink":"https://liudon.com/posts/the-first-chinese-new-year-after-the-covid-19/","summary":"\u003cblockquote\u003e\n\u003cp\u003e下面的内容是由chatGPT润色生成的。\u003c/p\u003e\n\u003cp\u003eAI太强大了 😂\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e当我还是个孩子的时候，在看春节晚会时，总会有节目介绍那些不能回家过年的人。\u003c/p\u003e\n\u003cp\u003e但我从未想过，等我长大后，我也会成为其中的一员。\u003c/p\u003e","title":"新冠疫情后的第一个春节"},{"content":"19年生日的时候，媳妇送了一款flico的机械键盘。\n这次搬家后，想着年前清理下键盘，实在是太脏了。\n周五下班，带上键盘回家。\n键盘全貌，上面好多油。\n开拆。\n手还是太慢，上工具吧。\n全部拆完。\n内部特写。\n清理出来的灰屑、头发，这键盘见证了我的发迹线变化\n终于清理干净了。\n复原，又可以咔咔写代码了。\n","permalink":"https://liudon.com/posts/cleaning-the-keyboard-for-the-first-time/","summary":"\u003cp\u003e19年生日的时候，媳妇送了一款flico的机械键盘。\u003c/p\u003e\n\u003cp\u003e这次搬家后，想着年前清理下键盘，实在是太脏了。\u003c/p\u003e\n\u003cp\u003e周五下班，带上键盘回家。\u003c/p\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/cleaning-the-keyboard-for-the-first-time/202301161450523.jpeg_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/cleaning-the-keyboard-for-the-first-time/202301161450523.jpeg_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"202301161450523.jpeg\" width=\"1080\" height=\"810\" alt=\"\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e","title":"第一次清理键盘"},{"content":"2022年已经过去1周多了，记录一下我的2022年。\n疫情 2022年，是新冠疫情的第三年，也是切身感受到的一年。\n3月22日晚，8点半和同事刚上13号线地铁。\n紧接着看到群里有人说，公司大厦因为疫情封控了，只进不出。\n第一次感受弹窗3，居家隔离。\n5月21日，开启居家办公。\n6月5日，开始到岗工作。\n11月17日，公司通知第二天居家办公。\n11月21日，小区通知临时管控。\n12月10日，媳妇中招。\n12月12日，自己中招。\n12月18日，娃中招。\n12月20日，开始到岗工作，持续了近一个月的居家隔离生活终于结束。\n老妈冒着北京疫情高峰感染的风险，过来帮我们带娃。\n从1周一检，到3天一检，不知道健康宝有没有年终报告，告诉你今年做了多少次核酸，相信会是很棒的一个数字。\n入学 上半年赶着疫情的间隙，整理好了娃的入学资料。\n经过一个月的焦虑等待后，最终被附近的学校录取，也确实感受到了离家近的好处。\n详细经过见记录2022年海淀幼升小\n休假 春节没有回家过年，上半年北京和老家交替出现疫情，最终在8月份休假回了趟家。\n驾照 因为疫情，感觉还是得考个驾照，拖延了N年的事项提上了日程。\n6月份报名，一直拖到10月份才过的科目一。\n11月底开始摸车了，刚上2节课因为疫情封校了，现在学的都快忘光了。\n搬家 年底公司通知搬家，又搬回了银科，兜兜转转，又回到了起点。\n博客 2022年，把博客又捡了回来，今年多更新吧。\n或许是上了年纪，2022年发现泪点变得很低，健康、家人才是最重要的。\n新的一年，继续开源节流，做好防护，保护好家人。\n最后，祝大家新年快乐！\n","permalink":"https://liudon.com/posts/review-2022/","summary":"\u003cp\u003e2022年已经过去1周多了，记录一下我的2022年。\u003c/p\u003e\n\u003ch4 id=\"疫情\"\u003e疫情\u003c/h4\u003e\n\u003cp\u003e2022年，是新冠疫情的第三年，也是切身感受到的一年。\u003c/p\u003e\n\u003cp\u003e3月22日晚，8点半和同事刚上13号线地铁。\u003c/p\u003e","title":"2022年终总结"},{"content":"通过WebPageTest页面测试，发现一个/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js的文件请求，影响到了页面渲染。\n看路径像是Cloudflare的文件，搜了下主题代码，没找到相关文件。\n经过一番搜索，原来这个是Cloudflare的电子邮件地址混淆技术功能。\n关闭这个功能即可。\n","permalink":"https://liudon.com/posts/remove-cloudflares-email-decode.min.js/","summary":"\u003cp\u003e通过WebPageTest页面测试，发现一个\u003ccode\u003e/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js\u003c/code\u003e的文件请求，影响到了页面渲染。\u003c/p\u003e","title":"去掉Cloudflare烦人的email-decode.min.js请求"},{"content":"本站已不再采用本方案，新方案见使用Hugo实现响应式和优化的图片\n遗留的问题 上一篇文章讲了我是如何解决博客累计布局偏移的问题，但是这个方案存在一个很大的问题。\n手动输入每张图片的宽高\n这就要求每次插入图片后，需要手动查看图片宽高，修改插入代码，导致整个流程变得繁琐，无法自动化。\n身为一名工程师，对于这样一个痛点，势必要优化掉。\n思路 发完上一篇文章后，我一直在想怎么能实现自动化插入图片宽高。\n要插入的图片代码是类似这样的：\n{{\u0026lt; figure src=\u0026#34;https://static.liudon.com/img/cover-code.png\u0026#34; alt=\u0026#34;cover.html code\u0026#34; width=\u0026#34;2020\u0026#34; height=\u0026#34;1468\u0026#34; \u0026gt;}} 我使用了picgo插件，上传图片到腾讯云对象存储，然后复制markdown图片代码插入文章。\n能不能通过改造picgo插件，将上传后复制的代码，加上图片的宽高参数？\n通过一番搜索，发现此方案不通，picgo确实支持自定义代码，但是变量仅支持文件名和url。\n此路不通，只好再想新的办法了。\n对象存储的图片处理有接口，可以返回图片的宽高信息，详细说明见获取图片基本信息。\n能不能在生成文件的时候，通过发起一个请求拿到图片宽高，然后写入html代码？\n经过一番搜索，发现hugo支持请求url，详细说明见Get Remote Data。\n{{ $dataJ := getJSON \u0026#34;url\u0026#34; }} {{ $dataC := getCSV \u0026#34;separator\u0026#34; \u0026#34;url\u0026#34; }} 哈哈，柳暗花明又一村的感觉。\n解决方案 此方案基于对象存储获取图片宽高，然后写入图片解析模板。\n新增css配置\n新增如下配置，否则会导致图片变形。\nimg { width:100%; height:auto; } figure { background-color: var(--code-bg); } 添加render-image.html文件\n代码如下：\n{{- $item := getJSON .Destination \u0026#34;?imageInfo\u0026amp;t=\u0026#34; now.Unix -}} {{/* 通过对象存储接口获取图片宽高，因为我使用了cdn，所以增加随机数保证拿到最新的图片宽高参数 */}} {{- $Destination := .Destination -}} {{- $Text := .Text -}} {{- $Title := .Title -}} {{- with $item }} \u0026lt;picture\u0026gt; \u0026lt;source type=\u0026#34;image/webp\u0026#34; srcset=\u0026#34;{{ $Destination | safeURL }}/webp\u0026#34; width=\u0026#34;{{ .width }}\u0026#34; height=\u0026#34;{{ .height }}\u0026#34;\u0026gt; \u0026lt;img loading=\u0026#34;lazy\u0026#34; src=\u0026#34;{{ $Destination | safeURL }}\u0026#34; alt=\u0026#34;{{ $Text }}\u0026#34; {{ with $Title}} title=\u0026#34;{{ . }}\u0026#34; {{ end }} width=\u0026#34;{{ .width }}\u0026#34; height=\u0026#34;{{ .height }}\u0026#34; /\u0026gt; \u0026lt;/picture\u0026gt; {{- end -}} 添加cover.html文件\n代码如下：\n{{- with .cxt}} {{/* Apply proper context from dict */}} {{- if (and .Params.cover.image (not $.isHidden)) }} {{- $alt := (.Params.cover.alt | default .Params.cover.caption | plainify) }} \u0026lt;figure class=\u0026#34;entry-cover\u0026#34;\u0026gt; {{- $responsiveImages := (.Params.cover.responsiveImages | default site.Params.cover.responsiveImages) | default true }} {{- $addLink := (and site.Params.cover.linkFullImages (not $.IsHome)) }} {{- $cover := (.Resources.ByType \u0026#34;image\u0026#34;).GetMatch (printf \u0026#34;*%s*\u0026#34; (.Params.cover.image)) }} {{- if $cover -}}{{/* i.e it is present in page bundle */}} {{- if $addLink }}\u0026lt;a href=\u0026#34;{{ (path.Join .RelPermalink .Params.cover.image) | absURL }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;{{ end -}} {{- $sizes := (slice \u0026#34;360\u0026#34; \u0026#34;480\u0026#34; \u0026#34;720\u0026#34; \u0026#34;1080\u0026#34; \u0026#34;1500\u0026#34;) }} {{- $processableFormats := (slice \u0026#34;jpg\u0026#34; \u0026#34;jpeg\u0026#34; \u0026#34;png\u0026#34; \u0026#34;tif\u0026#34; \u0026#34;bmp\u0026#34; \u0026#34;gif\u0026#34;) -}} {{- if hugo.IsExtended -}} {{- $processableFormats = $processableFormats | append \u0026#34;webp\u0026#34; -}} {{- end -}} {{- $prod := (hugo.IsProduction | or (eq site.Params.env \u0026#34;production\u0026#34;)) }} {{- if (and (in $processableFormats $cover.MediaType.SubType) ($responsiveImages) (eq $prod true)) }} \u0026lt;img loading=\u0026#34;lazy\u0026#34; srcset=\u0026#34;{{- range $size := $sizes -}} {{- if (ge $cover.Width $size) -}} {{ printf \u0026#34;%s %s\u0026#34; (($cover.Resize (printf \u0026#34;%sx\u0026#34; $size)).Permalink) (printf \u0026#34;%sw ,\u0026#34; $size) -}} {{ end }} {{- end -}}{{$cover.Permalink }} {{printf \u0026#34;%dw\u0026#34; ($cover.Width)}}\u0026#34; sizes=\u0026#34;(min-width: 768px) 720px, 100vw\u0026#34; src=\u0026#34;{{ $cover.Permalink }}\u0026#34; alt=\u0026#34;{{ $alt }}\u0026#34; width=\u0026#34;{{ $cover.Width }}\u0026#34; height=\u0026#34;{{ $cover.Height }}\u0026#34;\u0026gt; {{- else }}{{/* Unprocessable image or responsive images disabled */}} \u0026lt;img loading=\u0026#34;lazy\u0026#34; src=\u0026#34;{{ (path.Join .RelPermalink .Params.cover.image) | absURL }}\u0026#34; alt=\u0026#34;{{ $alt }}\u0026#34;\u0026gt; {{- end }} {{- else }}{{/* For absolute urls and external links, no img processing here */}} {{- $item := getJSON .Params.cover.image \u0026#34;?imageInfo\u0026amp;t=\u0026#34; now.Unix -}} {{/* 通过对象存储接口获取图片宽高，因为我使用了cdn，所以增加随机数保证拿到最新的图片宽高参数 */}} {{- $coverUrl := .Params.cover.image -}} {{- with $item }} {{- if $addLink }}\u0026lt;a href=\u0026#34;{{ $coverUrl | absURL }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;{{ end -}} \u0026lt;picture\u0026gt; \u0026lt;source type=\u0026#34;image/webp\u0026#34; srcset=\u0026#34;{{ $coverUrl | absURL }}/webp\u0026#34; width=\u0026#34;{{ .width }}\u0026#34; height=\u0026#34;{{ .height }}\u0026#34;\u0026gt; \u0026lt;img loading=\u0026#34;lazy\u0026#34; alt=\u0026#34;{{ $alt }}\u0026#34; src=\u0026#34;{{ $coverUrl | absURL }}\u0026#34; width=\u0026#34;{{ .width }}\u0026#34; height=\u0026#34;{{ .height }}\u0026#34;\u0026gt; \u0026lt;/picture\u0026gt; {{- end }} {{- end }} {{- if $addLink }}\u0026lt;/a\u0026gt;{{ end -}} {{/* Display Caption */}} {{- if not $.IsHome }} {{ with .Params.cover.caption }}\u0026lt;p\u0026gt;{{ . | markdownify }}\u0026lt;/p\u0026gt;{{- end }} {{- end }} \u0026lt;/figure\u0026gt; {{- end }}{{/* End image */}} {{- end -}}{{/* End context */ -}} 使用方式和原来不变，插入markdown语法的图片代码即可。\n![picgo config](picgo-config.png) 这下又可以愉快地码字了。\n","permalink":"https://liudon.com/posts/hugo-auto-generate-image-width-and-height/","summary":"\u003cp\u003e本站已不再采用本方案，新方案见\u003ca href=\"/posts/responsive-and-optimized-images-with-hugo/\"\u003e使用Hugo实现响应式和优化的图片\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"遗留的问题\"\u003e遗留的问题\u003c/h4\u003e\n\u003cp\u003e上一篇文章讲了我是如何解决博客累计布局偏移的问题，但是这个方案存在一个很大的问题。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e手动输入每张图片的宽高\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e这就要求每次插入图片后，需要手动查看图片宽高，修改插入代码，导致整个流程变得繁琐，无法自动化。\u003c/p\u003e","title":"累计布局偏移修复方案改进 —— 自动生成图片宽高"},{"content":"此文已过期，优化方案参考累计布局偏移修复方案改进 —— 自动生成图片宽高.\n问题表现 7月份将博客部署由Github迁移到Cloudflare后，开始关注博客的性能问题。\n偶然看到苏卡卡大佬的CLS优化文章，拿自己博客也测试了下，发现也存在同样的问题。\n根据苏卡卡大佬的文章，分析页面是由于文章封面的图片缺少宽高导致出现CLS问题。\n为了解决这个问题，需要指定封面的宽高参数。\n根据PagerMod主题的cover.html文件代码，使用绝对地址的情况没有配置宽高参数。\n解决方案 新增封面配置\n文章封面配置新增width和height属性。\ncover: image: \u0026#34;https://static.liudon.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220725183817.jpg\u0026#34; width: 1620 height: 1080 自定义封面文件\n添加自己的cover.html文件，核心代码如下，完整代码参考我的文件。\n{{- else }}{{/* For absolute urls and external links, no img processing here */}} {{- if $addLink }}\u0026lt;a href=\u0026#34;{{ (.Params.cover.image) | absURL }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34;\u0026gt;{{ end -}} \u0026lt;picture\u0026gt; \u0026lt;source type=\u0026#34;image/webp\u0026#34; srcset=\u0026#34;{{ (.Params.cover.image) | absURL }}/webp\u0026#34; {{- if (.Params.cover.width) }}width=\u0026#34;{{ (.Params.cover.width) }}\u0026#34;{{ end -}} {{- if (.Params.cover.height) }}height=\u0026#34;{{ (.Params.cover.height) }}\u0026#34;{{ end -}}\u0026gt; \u0026lt;img loading=\u0026#34;lazy\u0026#34; alt=\u0026#34;{{ $alt }}\u0026#34; src=\u0026#34;{{ (.Params.cover.image) | absURL }}\u0026#34; {{- if (.Params.cover.width) }}width=\u0026#34;{{ (.Params.cover.width) }}\u0026#34;{{ end -}} {{- if (.Params.cover.height) }}height=\u0026#34;{{ (.Params.cover.height) }}\u0026#34;{{ end -}}\u0026gt; \u0026lt;/picture\u0026gt; {{- end }} img标签新增width和height属性，读取封面配置的width和height属性值。\n图片我放到了腾讯云对象存储上，通过图片处理支持了webp格式图片。\n新增css配置\n新增如下配置，否则会导致图片变形。\nimg { width:100%; height:auto; } figure { background-color: var(--code-bg); } 再进一步 前面只解决了首页封面，文章页也会存在图片的情况，也会有类似的问题。\n基于markdown语法的图片代码，是不支持宽高参数的。\n还好hugo支持shortcode，其中就有figure语法，支持配置宽高参数。\n我们使用figure语法插入图片，指定图片宽高。\nfigure解析模板我也进行了改进，类似cover.html模板，也通过对象存储图片处理支持了webp响应式图片，核心代码如下，完整代码参考我的文件。\n{{- if .Get \u0026#34;link\u0026#34; -}} \u0026lt;a href=\u0026#34;{{ .Get \u0026#34;link\u0026#34; }}\u0026#34;{{ with .Get \u0026#34;target\u0026#34; }} target=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ with .Get \u0026#34;rel\u0026#34; }} rel=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt; {{- end }} \u0026lt;picture\u0026gt; \u0026lt;source type=\u0026#34;image/webp\u0026#34; srcset=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}/webp\u0026#34; {{- with .Get \u0026#34;width\u0026#34; }} width=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;height\u0026#34; }} height=\u0026#34;{{ . }}\u0026#34;{{ end -}}\u0026gt; \u0026lt;img loading=\u0026#34;lazy\u0026#34; src=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}{{- if eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34; }}#center{{- end }}\u0026#34; {{- if or (.Get \u0026#34;alt\u0026#34;) (.Get \u0026#34;caption\u0026#34;) }} alt=\u0026#34;{{ with .Get \u0026#34;alt\u0026#34; }}{{ . }}{{ else }}{{ .Get \u0026#34;caption\u0026#34; | markdownify| plainify }}{{ end }}\u0026#34; {{- end -}} {{- with .Get \u0026#34;width\u0026#34; }} width=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;height\u0026#34; }} height=\u0026#34;{{ . }}\u0026#34;{{ end -}} /\u0026gt; \u0026lt;!-- Closing img tag --\u0026gt; \u0026lt;/picture\u0026gt; {{- if .Get \u0026#34;link\u0026#34; }}\u0026lt;/a\u0026gt;{{ end -}} 使用方式：\n{{\u0026lt; figure src=\u0026ldquo;cover-code.png\u0026rdquo; alt=\u0026ldquo;cover.html code\u0026rdquo; width=\u0026ldquo;2020\u0026rdquo; height=\u0026ldquo;1468\u0026rdquo; \u0026gt;}}\n至此累计布局偏移(CLS)问题解决了，同时也支持了响应式图片。\n","permalink":"https://liudon.com/posts/fix-blog-cls/","summary":"\u003cp\u003e此文已过期，优化方案参考\u003ca href=\"https://liudon.com/posts/hugo-auto-generate-image-width-and-height/\"\u003e累计布局偏移修复方案改进 —— 自动生成图片宽高\u003c/a\u003e.\u003c/p\u003e\n\u003ch4 id=\"问题表现\"\u003e问题表现\u003c/h4\u003e\n\u003cp\u003e7月份将博客部署由\u003ccode\u003eGithub\u003c/code\u003e迁移到\u003ccode\u003eCloudflare\u003c/code\u003e后，开始关注博客的性能问题。\u003c/p\u003e\n\u003cp\u003e偶然看到苏卡卡大佬的\u003ca href=\"https://blog.skk.moe/post/fix-blog-cls/\"\u003eCLS优化文章\u003c/a\u003e，拿自己博客也测试了下，发现也存在同样的问题。\u003c/p\u003e","title":"优化博客的累计布局偏移(CLS)问题"},{"content":"目前博客是部署到了Github Pages上，具体实现见博客架构说明。\n缘由 Github Pages部署有一个问题，就是不支持HSTS。\nHTTP Strict Transport Security（通常简称为HSTS）是一个安全功能，它告诉浏览器只能通过 HTTPS 访问当前资源，而不是HTTP。\n虽然Github Pages提供了Enforce HTTPS的选项，开启后http请求会301跳转到https 请求。\n但是因为返回包缺少Strict-Transport-Security的Header头，导致HSTS校验失败。\n为了彻底支持HSTS，决定切换到Cloudflare Pages。\n部署 Cloudflare Pages部署非常简单，授权Github仓库权限，配置好分支即可，这里不多介绍。\n在Github Pages上，code分支保存原始文件，master分支保存hugo构建后的文件。\nCloudflare Pages这里生成分支选择master，同时禁用其他分支的自动构建。\n这样提交代码后，github actions构建文件提交到master分支，然后触发Cloudflare Pages部署。\n这里为什么没有采用Cloudflare Pages的自动构建呢？因为很慢，构建一次要3分钟左右。\n采用拉取master构建好的文件的话，只需要7秒左右。\n补齐Header头 部署好后，Cloudflare Pages的返回也是没有Strict-Transport-SecurityHeader头的。\n这里需要通过自定义Header头实现，增加_headers文件，内容如下：\n/* strict-transport-security: max-age=31536000; includeSubDomains; preload 至此HSTS搞定。\nHSTS资料\n","permalink":"https://liudon.com/posts/deploy-blog-to-cloudflare-pages/","summary":"\u003cp\u003e目前博客是部署到了\u003ccode\u003eGithub Pages\u003c/code\u003e上，具体实现见\u003ca href=\"https://liudon.com/posts/%E5%8D%9A%E5%AE%A2%E6%9E%B6%E6%9E%84%E8%AF%B4%E6%98%8E/\"\u003e博客架构说明\u003c/a\u003e。\u003c/p\u003e\n\u003ch4 id=\"缘由\"\u003e缘由\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eGithub Pages\u003c/code\u003e部署有一个问题，就是不支持\u003ccode\u003eHSTS\u003c/code\u003e。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHTTP Strict Transport Security（通常简称为HSTS）是一个安全功能，它告诉浏览器只能通过 HTTPS 访问当前资源，而不是HTTP。\u003c/p\u003e","title":"将博客部署到Cloudflare Pages"},{"content":"媳妇有事回老家了，这两天自己带娃。\n小区群里有人说奥林匹克公园的向日葵开了，适合拍照。\n正好周六多云，没有太阳，出门遛娃。\n带上我好久不用的相机，省得发霉了。\n以往都是去的南园，第一次来北园。\n西门进入，沿着路往右走，一会就到。\n人很多，估计大家都因为之前疫情在家憋疯了。\n到了没多久，太阳又出来了，超级晒。\n提醒一下，看见向日葵园后，继续往前走，前面有观景台，更适合拍照。\n","permalink":"https://liudon.com/posts/olympic-park-sunflower-tour/","summary":"\u003cp\u003e媳妇有事回老家了，这两天自己带娃。\u003c/p\u003e\n\u003cp\u003e小区群里有人说奥林匹克公园的向日葵开了，适合拍照。\u003c/p\u003e\n\u003cp\u003e正好周六多云，没有太阳，出门遛娃。\u003c/p\u003e\n\u003cp\u003e带上我好久不用的相机，省得发霉了。\u003c/p\u003e","title":"奥林匹克公园向日葵之旅"},{"content":"最近刷牙的时候，牙龈总是出血。\n距离上一次洗牙，已经有好几年了，感觉又该去洗一下牙了。\n上次跟媳妇两个人，在小区外面的私人诊所洗的，俩人花了1000多块钱。\n这次决定去医院看看，提前挂了号。\n医生看过后，说得洗牙，不过当天只能先做洗牙前的检查，洗牙得预约。\n开单子抽血检查，完事回家。\n到了预约的日子，约的是4点，3点左右就到医院了。\n15:57轮到我，进去一共20分钟完事。\n我以为还有别的事项，结果医生说好了。\n我说我感觉牙里卡着个东西，医生又拿起装备给我洗了一遍。\n上次洗牙花了快1个小时，这也太快了。\n洗牙费用380元，可以走医保报销。\n以往都说医院洗牙贵，没成想外面私人的要更贵。\n","permalink":"https://liudon.com/posts/%E8%AE%B0%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%B4%97%E7%89%99/","summary":"\u003cp\u003e最近刷牙的时候，牙龈总是出血。\u003c/p\u003e\n\u003cp\u003e距离上一次洗牙，已经有好几年了，感觉又该去洗一下牙了。\u003c/p\u003e\n\u003cp\u003e上次跟媳妇两个人，在小区外面的私人诊所洗的，俩人花了1000多块钱。\u003c/p\u003e","title":"记第二次洗牙"},{"content":" 18年的热点新闻，纳税千万孩子无法在北京上学。\n一直听说外地人在北京上学难，今年娃到了上小学的年纪，也算真实的体验了一把上学的难。\n提前在网上搜了一番资料，都是一些机构整理的信息。\n没有找到具体分享的记录，自己整理了下，希望能帮助到其他人。\n1. 信息采集 5月5日，采集系统开放。\n当天下午录入相关信息，提交网上审核。\n2. 网上审核 信息提交后，就开始了漫长的审核时间。\n5月06日 户口信息审核通过 5月14日 居住证审核通过 5月16日 居住证明审核通过 5月19日 工作证明审核通过 3. 线下审核 网上审核通过后，打印入学申请表，预约线下审核时间。\n这里还有一个插曲，本来以为线下审核是在社区居委会。\n周六的时候，在小学入学群里聊天，有人说是在学区审核。\n后来交流一番后，发现是自己理解错了。\n这里是要先去社区审核盖章，然后再到学区交资料走线下审核。\n5月22日 社区居委会审核盖章 5月25日 到街道递交审核材料 如果你是外地集体户口，需要准备集体户口首页（复印件需要加盖公章）。 工作证明还需要提供满足时间要求的社保缴费记录。 4. 审核通过 5月27日，审核通过后，打印信息采集表。\n5. 学校登记 6月1日对口学校发布入学登记通知书。\n按通知书准备资料，到登记时间去学校交资料。\n今年遇到疫情，改为线上邮件发送资料登记了。\n6. 填报志愿 6月23日，海淀教育发文1911后填报志愿通知。\n第一志愿锁定，其他志愿自己选择填报。\n6月25日锁定，不允许再修改。\n网上消息，第一志愿锁定，说明有1911后名额，有机会选中。\n租房的不需要填报志愿，等待派位。\n7. 查看结果 6月29日15点，系统开放结果查询。\n第一志愿录取，一直担心的调剂没有发生。\n7月10日，收到教委短信，系统查询录取通知书。\n历时1个多月的幼升小总算落地了。\n","permalink":"https://liudon.com/posts/%E8%AE%B0%E5%BD%952022%E5%B9%B4%E6%B5%B7%E6%B7%80%E5%B9%BC%E5%8D%87%E5%B0%8F/","summary":"\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/%E8%AE%B0%E5%BD%952022%E5%B9%B4%E6%B5%B7%E6%B7%80%E5%B9%BC%E5%8D%87%E5%B0%8F/20220525202612.png_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/%E8%AE%B0%E5%BD%952022%E5%B9%B4%E6%B5%B7%E6%B7%80%E5%B9%BC%E5%8D%87%E5%B0%8F/20220525202612.png_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"20220525202612.png\" width=\"1080\" height=\"1262\" alt=\"20220525202612\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e18年的热点新闻，纳税千万孩子无法在北京上学。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e一直听说外地人在北京上学难，今年娃到了上小学的年纪，也算真实的体验了一把上学的难。\u003c/p\u003e","title":"记录2022年海淀幼升小"},{"content":"业务模块从php迁移到golang下了，最近遇到一个golang下json解析的问题：\n请求接口，按返回包字段判断请求成功与否。 伪代码如下：\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; ) type Response struct { Code int `json:\u0026#34;code\u0026#34;` Msg string `json:\u0026#34;msg\u0026#34;` } func main() { // 场景1，返回包符合接口要求 str := `{\u0026#34;code\u0026#34;:100,\u0026#34;msg\u0026#34;:\u0026#34;failed\u0026#34;}` var res Response json.Unmarshal([]byte(str), \u0026amp;res) fmt.Printf(\u0026#34;res=%+v\\n\u0026#34;, res) // 解析正确，符合预期 // res={Code:100 Msg:failed} // 场景2，返回包不符合接口要求，缺少相关字段 str = `{\u0026#34;retCode\u0026#34;:100,\u0026#34;retMsg\u0026#34;:\u0026#34;failed\u0026#34;}` var res1 Response json.Unmarshal([]byte(str), \u0026amp;res1) fmt.Printf(\u0026#34;res=%+v\\n\u0026#34;, res1) // 解析错误，不符合预期 // res={Code:0 Msg:} } 这里由于接口地址配置错误，导致请求到其他接口，返回包不符合协议要求。\n缺少code字段，Unmarshal解析后，按默认值处理，所以code为0，导致验证出错。\n修正方案：\n将Code字段定义为引用类型，通过判断地址是否为nil来区分缺少字段的情况。\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; ) type Response struct { Code *int `json:\u0026#34;code\u0026#34;` Msg string `json:\u0026#34;msg\u0026#34;` } func main() { // 返回包符合接口要求 str := `{\u0026#34;code\u0026#34;:100,\u0026#34;msg\u0026#34;:\u0026#34;failed\u0026#34;}` var res Response json.Unmarshal([]byte(str), \u0026amp;res) fmt.Printf(\u0026#34;res=%+v\\n\u0026#34;, res) // 解析正确，符合预期 // res={Code:100 Msg:failed} if res.Code == nil || *res.Code \u0026gt; 0 { fmt.Println(\u0026#34;request failed\u0026#34;) } // 返回包不符合接口要求，缺少相关字段 str = `{\u0026#34;id\u0026#34;:1}` var res1 Response json.Unmarshal([]byte(str), \u0026amp;res1) fmt.Printf(\u0026#34;res=%+v\\n\u0026#34;, res1) // 解析错误，不符合预期 // res={Code:0 Msg:} if res1.Code == nil || *res1.Code \u0026gt; 0 { fmt.Println(\u0026#34;request failed\u0026#34;) } } 参考资料：\nhow-to-determine-if-a-json-key-has-been-set-to-null-or-not-provided\njson-key-not-set-null-golang\n","permalink":"https://liudon.com/posts/golang%E8%A7%A3%E6%9E%90json%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/","summary":"\u003cp\u003e业务模块从\u003ccode\u003ephp\u003c/code\u003e迁移到\u003ccode\u003egolang\u003c/code\u003e下了，最近遇到一个golang下json解析的问题：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e请求接口，按返回包字段判断请求成功与否。\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e伪代码如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;encoding/json\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eCode\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e    \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;code\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003eMsg\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`json:\u0026#34;msg\u0026#34;`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 场景1，返回包符合接口要求\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`{\u0026#34;code\u0026#34;:100,\u0026#34;msg\u0026#34;:\u0026#34;failed\u0026#34;}`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnmarshal\u003c/span\u003e([]byte(\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;res=%+v\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eres\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 解析正确，符合预期\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// res={Code:100 Msg:failed}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// 场景2，返回包不符合接口要求，缺少相关字段\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e`{\u0026#34;retCode\u0026#34;:100,\u0026#34;retMsg\u0026#34;:\u0026#34;failed\u0026#34;}`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eres1\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eUnmarshal\u003c/span\u003e([]byte(\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eres1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;res=%+v\\n\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eres1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 解析错误，不符合预期\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// res={Code:0 Msg:}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里由于接口地址配置错误，导致请求到其他接口，返回包不符合协议要求。\u003c/p\u003e","title":"Golang解析json的一个问题"},{"content":" 不知不觉，北京这一波疫情已经一个月了，目前还是每天50例左右新增。\n昨天看新闻，基本没有社会面新增了，感觉要解封了。\n没想到今天直接被打脸，封控升级了。\n居家办公已经快两周了，也不知道这种日子还要多久。\n在家使用Mac(13寸 m1)办公，屏幕太小，两周下来感觉眼睛要瞎了。\n媳妇帮我想了个办法，投屏到电视上。\n居家不出门，实在没动力收拾，现在胡子拉碴，一周可能收拾一次。\n不知道这波还要多久。\n","permalink":"https://liudon.com/posts/%E7%96%AB%E6%83%85%E4%B8%8B%E7%9A%84%E7%94%9F%E6%B4%BB/","summary":"\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/%E7%96%AB%E6%83%85%E4%B8%8B%E7%9A%84%E7%94%9F%E6%B4%BB/20220520-192500@2x.png_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/%E7%96%AB%E6%83%85%E4%B8%8B%E7%9A%84%E7%94%9F%E6%B4%BB/20220520-192500@2x.png_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"20220520-192500@2x.png\" width=\"1080\" height=\"692\" alt=\"20220520-192500@2x\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e\n\u003cp\u003e不知不觉，北京这一波疫情已经一个月了，目前还是每天50例左右新增。\u003c/p\u003e\n\u003cp\u003e昨天看新闻，基本没有社会面新增了，感觉要解封了。\u003c/p\u003e\n\u003cp\u003e没想到今天直接被打脸，封控升级了。\u003c/p\u003e","title":"疫情下的生活"},{"content":"新域名上线一段时间了，通过Google Search Console发现了一些问题，整理下最近进行的一些调整。\n更新主题版本，展示文章tag标签 通过对比主题作者的网站，发现使用的不是最新代码。\n通过调整Github Actions命令解决：\n- name: Checkout repository uses: actions/checkout@v2 - name: Checkout submodules run: git submodule update --init --recursive --remote 修正404页面不生效的问题 主题是自带了404.html文件的，但是部署后没有生成对应文件。\n修改404.html文件内容后解决，具体原因没有深究，感觉是文件内容不是完整html导致。\n可参考文件代码\n两个域名导致的页面权重问题 发现有些页面liudon.xyz收录后，liudon.com就不再收录。\n为了规避这种收录问题，将liudon.xyz直接301到了liudon.com上。\n目前已调整完毕，观察后续收录情况。\n","permalink":"https://liudon.com/posts/%E6%95%B4%E7%90%86%E4%B8%8B%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B0%83%E6%95%B4/","summary":"\u003cp\u003e新域名上线一段时间了，通过\u003ccode\u003eGoogle Search Console\u003c/code\u003e发现了一些问题，整理下最近进行的一些调整。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e更新主题版本，展示文章tag标签\n通过对比主题作者的网站，发现使用的不是最新代码。\u003c/p\u003e","title":"整理下博客的一些调整"},{"content":"五一假期前一周，北京疫情又起，说是已经隐蔽传播一周了。\n当天晚上大家就开始屯货了，晚上看着APP里可买的东西一点点没了。\n说实话，出现几粒确诊没有慌，这么抢购搞的有点心慌了，也下单买了点东西。\n毕竟老话说的好，手中有粮，心里不慌。\n第二天出去做核酸，特意去了趟超市，想着再买点肉，结果超市也是各种采购，东西都没了，空手而归。\n工作上五一前有两个大版本的功能要发布，提前1周需求才提，节前这一周忙的要死，还赶上了疫情，好在赶在发布截止日总算发出去了。\n就五一当天带娃去了家旁边的公园遛了下，这次轮滑滑的不错，一直玩到晚上7点才回家。\n夏天到了，北京的杨絮、柳絮各种满天飞，出门真是受罪，其余时间都在家呆着了，偶尔下楼在小区玩会。\n这个假期基本上每天核酸，感觉以后要常态化核酸了。\n老家在假期里突然也疫情又起，县城整个封控了，不过老爸还是回到家了，过程稍微费了点劲。\n突然发现今年的疫情貌似就没消停过，去年五一假期的时候在老家烧烤，今年还不知道什么时候能回家。\n这疫情什么时候是个头啊……\n","permalink":"https://liudon.com/posts/%E7%96%AB%E6%83%85%E4%B8%8B%E7%9A%84%E4%BA%94%E4%B8%80%E5%81%87%E6%9C%9F/","summary":"\u003cp\u003e五一假期前一周，北京疫情又起，说是已经隐蔽传播一周了。\u003c/p\u003e\n\u003cp\u003e当天晚上大家就开始屯货了，晚上看着APP里可买的东西一点点没了。\u003c/p\u003e\n\u003cp\u003e说实话，出现几粒确诊没有慌，这么抢购搞的有点心慌了，也下单买了点东西。\u003c/p\u003e","title":"疫情下的五一假期"},{"content":"电脑突然没法用了，提示\u0026quot;A disk read error occurred\u0026quot;的错误。\n多次重启也不行，感觉是硬盘挂了。\n机器去年过保了，之前有过在售后维护的经历，费用不低，这次决定自己动手。\n一共就5个螺丝，打开后盖。\n可以看到电池旁边的螺丝，拧下取出电池。\n拧开硬盘上的固定螺丝，取出硬盘。\n印象里硬盘还是那种又大又厚的样子，没想到现在都这么小一块了。\n我在京东买的三星970 EVO Plus这款，顺利换上。\n重装系统，搞定，省了一笔，好开心。\n","permalink":"https://liudon.com/posts/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E6%9B%B4%E6%8D%A2thinkpad-x1%E7%A1%AC%E7%9B%98/","summary":"\u003cp\u003e电脑突然没法用了，提示\u0026quot;A disk read error occurred\u0026quot;的错误。\u003c/p\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E6%9B%B4%E6%8D%A2thinkpad-x1%E7%A1%AC%E7%9B%98/491650584526_.pic.jpg_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E6%9B%B4%E6%8D%A2thinkpad-x1%E7%A1%AC%E7%9B%98/491650584526_.pic.jpg_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"491650584526_.pic.jpg\" width=\"1080\" height=\"810\" alt=\"491650584526_.pic\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e\n\u003cp\u003e多次重启也不行，感觉是硬盘挂了。\u003c/p\u003e\n\u003cp\u003e机器去年过保了，之前有过在售后维护的经历，费用不低，这次决定自己动手。\u003c/p\u003e","title":"自己动手，更换thinkpad x1硬盘"},{"content":"又是周末，娃约了小伙伴一起爬山。\n百望山，二刷走起。\n约好了9点半门口见面，早上睁眼8点了，赶紧起床洗漱吃饭。\n出门晚了，还打不到车，快10点才到。\n小伙伴和人爸爸已经先爬上去了，带着娃一路小跑，20分钟从大门爬到山上。\n继续赶路爬楼梯，总算登上了观景台，俩小朋友终于见面了，一人奖励一个冰激凌。\n这次来，山上明显绿了，花开的更多了，人比上次少多了。\n下山后，又一起吃了个饭，自助吃的有点撑。\n今天天气真好，视野相当不错，就是太晒了。\n","permalink":"https://liudon.com/posts/%E4%BA%8C%E5%88%B7%E7%99%BE%E6%9C%9B%E5%B1%B1/","summary":"\u003cp\u003e又是周末，娃约了小伙伴一起爬山。\u003c/p\u003e\n\u003cp\u003e百望山，二刷走起。\u003c/p\u003e\n\u003cp\u003e约好了9点半门口见面，早上睁眼8点了，赶紧起床洗漱吃饭。\u003c/p\u003e\n\u003cp\u003e出门晚了，还打不到车，快10点才到。\u003c/p\u003e\n\u003cp\u003e小伙伴和人爸爸已经先爬上去了，带着娃一路小跑，20分钟从大门爬到山上。\u003c/p\u003e","title":"二刷百望山"},{"content":"上周的北海之行，本来是想划船的，可惜人太多没有划成，答应娃这周末带她去划船。\n周六7点准时起床，得早点去省得人多排队。\n8点半吃完饭洗漱完出发，特意带娃坐了一趟双层公交车 —— 二楼第一排观光区。\n路上不堵，40多分钟到站。\n进园先去码头排队，人不太多，等了有十几分钟，终于轮到了。\n总算开上了船，不过天气不太好，灰蒙蒙的。\n水上荡了1个小时，下船向佛香阁进发。\n一路向上，终于登顶，园内风景一览无余。\n下来后，又去逛了十七孔桥，逛了下湖心小岛。\n回家又特意坐的双层公交，第一排观光区，哈哈。\n一天下来1w多步，娃估计得更多，到家直接累摊。\n","permalink":"https://liudon.com/posts/%E5%B8%A6%E5%A8%83%E6%B8%B8%E9%A2%90%E5%92%8C%E5%9B%AD/","summary":"\u003cp\u003e上周的北海之行，本来是想划船的，可惜人太多没有划成，答应娃这周末带她去划船。\u003c/p\u003e\n\u003cp\u003e周六7点准时起床，得早点去省得人多排队。\u003c/p\u003e\n\u003cp\u003e8点半吃完饭洗漱完出发，特意带娃坐了一趟双层公交车 —— 二楼第一排观光区。\u003c/p\u003e","title":"带娃游颐和园"},{"content":"在拿到liudon.com域名前，手中已有两个域名：\nliudon.org liudon.xyz liudon.org已经不再更新，仅作归档使用。 liudon.xyz当时是静态博客流行，尝鲜使用。\n拿到liudon.com域名后，怎么部署博客成了个问题。\n因为github pages只能绑定一个自定义域名，当然可以通过创建另外一个项目，实现两套域名，但是同一个博客两个项目总感觉不太优雅。\n经过一番资料查找，终于有了下面这套方案。\n通过github actions 和 netlify 部署了两套自动化部署方案：\ngithub actions部署到github pages，绑定自定义域名liudon.com netlify部署到ipfs，通过cloudfare ipfs gateway解析到ipfs资源，绑定自定义域名liudon.xyz。 这里要说明一下，ipfs目前访问延迟较大，这里仅作尝鲜使用。\nhugo的config.toml定义了网站域名，这里为了区分两套域名，在netlify部署时，对配置文件做了修改，保证两套域名访问各自页面，具体可参考github文件内容。\n","permalink":"https://liudon.com/posts/%E5%8D%9A%E5%AE%A2%E6%9E%B6%E6%9E%84%E8%AF%B4%E6%98%8E/","summary":"\u003cp\u003e在拿到\u003ccode\u003eliudon.com\u003c/code\u003e域名前，手中已有两个域名：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eliudon.org\u003c/li\u003e\n\u003cli\u003eliudon.xyz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n\n\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://liudon.com/posts/%E5%8D%9A%E5%AE%A2%E6%9E%B6%E6%9E%84%E8%AF%B4%E6%98%8E/%E5%8D%9A%E5%AE%A2%E6%9E%B6%E6%9E%84.png_1080x.avif 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003csource type=\"image/webp\" srcset=\"https://liudon.com/posts/%E5%8D%9A%E5%AE%A2%E6%9E%B6%E6%9E%84%E8%AF%B4%E6%98%8E/%E5%8D%9A%E5%AE%A2%E6%9E%B6%E6%9E%84.png_1080x.webp 1080w\" sizes=\"(min-width: 768px) 1080px, 100vw\" /\u003e\u003cimg src=\"%e5%8d%9a%e5%ae%a2%e6%9e%b6%e6%9e%84.png\" width=\"653\" height=\"206\" alt=\"两套域名说明\" title=\"\" loading=\"lazy\" /\u003e\n\t\t\u003c/picture\u003e\n\n\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eliudon.org\u003c/code\u003e已经不再更新，仅作归档使用。\n\u003ccode\u003eliudon.xyz\u003c/code\u003e当时是静态博客流行，尝鲜使用。\u003c/p\u003e","title":"博客架构说明"},{"content":"前面有写到，被隔离了一周，好在赶在假期开始前解除了隔离。\n趁着这次难得的假期，外出放松一下。\n爬百望山。\n娃是第一次爬山，百望山不高，适合带娃体验爬山，我也从13、14年之后没再爬过山了。\n进园后，选择大路往上爬，中间走了一段山间台阶路。\n一路走走停停，补充能量，估计有半个小时，我们就登顶了。\n山上风有点大，视野不错，可以直接看到互联网的核心公司。\n游北海公园\n本来是想着去公园划船，结果到了之后发现排队的人太多了，于是放弃，改为游白塔。\n我们是从北门进的园，然后一路向西去码头打算划船，绕着园子继续往南走。\n一路走到了南门，心想这出去了还咋去白塔，难道要再走回去？\n问了门口保安，说是可以出去往东走，从南门再进去。\n进去后，要爬好几层楼梯才能上到白塔平台，一览园内风景。\n希望疫情尽快散去，恢复到正常的生活。\n","permalink":"https://liudon.com/posts/%E9%9A%BE%E5%BE%97%E7%9A%84%E6%B8%85%E6%98%8E%E5%81%87%E6%9C%9F/","summary":"\u003cp\u003e前面有写到，被隔离了一周，好在赶在假期开始前解除了隔离。\u003c/p\u003e\n\u003cp\u003e趁着这次难得的假期，外出放松一下。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e爬百望山。\u003c/p\u003e\n\u003cp\u003e娃是第一次爬山，百望山不高，适合带娃体验爬山，我也从13、14年之后没再爬过山了。\u003c/p\u003e","title":"难得的清明假期"},{"content":"在关于部分，有写域名的来历。\n当时liudon.com已经被注册，所以只好注册了liudon.org。\n2011年注册的liudon.org，最早用wordpress搭建了博客。\n这是当时的第一篇文章，Hello world。\n从2011年，到2019年，中间断断续续的在更新着，博客程序也从wordpress转到了typecho，再后来开始流行静态页博客，又转到了hugo下。\n在这中间，一直想要拿到liudon.com域名。\n看网站内容，应该是个德国乐队的网站，这里能看到网站最后的信息。\n3月10日的时候，偶然看到群里有在说域名，于是又搜索了一番，发现域名上了阿里云域名拍卖，购买的时候提示卖家已下家。\n到国外域名商上查了一下，godaddy提供代购，name提示为高级域名，可以购买。\n看archive.org上的信息，2021年11月的时候服务不可用了，不知道发生了什么。\n机不可失，时不再来，立马下单。\n接下来就是漫长的等待了，系统显示需要5-10个工作日才能完成交易。\n同时我发现他们服务条款写着，高级域名不支持退款，whois信息一直不变，担心打水漂。\n期间有一天晚上11点联系客户，说是已经在加快处理。\n过了10天后，交易还没完成，有点放弃了。\n3月24日晚上，再次查whois，发现信息有变，登录name，发现订单已完成。\n现在这个域名终于属于我了。\nliudon.org 老站，备份，不再更新 liudon.com -\u0026gt; github pages liudon.xyz -\u0026gt; netfily -\u0026gt; ipfs ","permalink":"https://liudon.com/posts/%E5%8D%81%E4%B8%80%E5%B9%B4%E7%9A%84%E7%AD%89%E5%BE%85%E7%BB%88%E4%BA%8E%E6%8B%BF%E5%88%B0%E4%BA%86liudon.com%E5%9F%9F%E5%90%8D/","summary":"\u003cp\u003e在\u003ca href=\"https://liudon.com/about\"\u003e关于\u003c/a\u003e部分，有写域名的来历。\u003c/p\u003e\n\u003cp\u003e当时\u003ccode\u003eliudon.com\u003c/code\u003e已经被注册，所以只好注册了\u003ccode\u003eliudon.org\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e2011年注册的\u003ccode\u003eliudon.org\u003c/code\u003e，最早用\u003ccode\u003ewordpress\u003c/code\u003e搭建了博客。\u003c/p\u003e","title":"十一年的等待，终于拿到了liudon.com域名"},{"content":"从没有想过疫情会离自己这么近，记录一下。\n周一的时候说是有确诊同学来过公司，下午组织全员核酸，做完核酸立马回家。\n周二早上全员核酸阴性，继续到公司上班。\n晚上8点10分刚和同事上地铁，部门群里有人说我们楼有人确诊，过了10分钟，说是大楼管控了，不让出楼了。\n封在楼里的同学统一做核酸，结果出来后才能回家，好多人在公司过了夜。\n周三到公司集体核酸，做完继续居家办公，今天开始公安局、社区开始联系确认信息，公司要求所有人员居家办公，社区反馈需要居家隔离。\n头几天还说对门上封条了，没成想这次轮到自己了。\n到03/31日，隔离解除，健康宝恢复正常。\n第一次体验到健康宝显示弹窗，然后又显示居家隔离。\n第一次体验到被贴封条上门磁。\n第一次体验到鼻拭子，尤其解封前最后一次核酸，双鼻孔。\n","permalink":"https://liudon.com/posts/%E8%A2%AB%E9%9A%94%E7%A6%BB%E7%9A%84%E4%B8%80%E5%91%A8/","summary":"\u003cp\u003e从没有想过疫情会离自己这么近，记录一下。\u003c/p\u003e\n\u003cp\u003e周一的时候说是有确诊同学来过公司，下午组织全员核酸，做完核酸立马回家。\u003c/p\u003e\n\u003cp\u003e周二早上全员核酸阴性，继续到公司上班。\u003c/p\u003e","title":"被隔离的一周"},{"content":"表结构如下\ndesc info; +-------+-----------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +-------+-----------------+------+-----+---------+----------------+ | id | int(8) unsigned | NO | PRI | NULL | auto_increment | | name | varchar(20) | YES | | NULL | | +-------+-----------------+------+-----+---------+----------------+ 2 rows in set (0.00 sec) 执行sql.\ninsert into info values (\u0026#39;\u0026#39;, \u0026#39;xxx\u0026#39;); insert into info values (\u0026#39;\u0026#39;, \u0026#39;yyy\u0026#39;); 查询记录.\nselect * from info; +----+------+ | id | name | +----+------+ | 1 | xxx | | 2 | yyy | +----+------+ 2 rows in set (0.00 sec) 执行下面sql.\nselect * from info where id = 1; select * from info where id = \u0026#39;1aaaa\u0026#39;; 你先想想结果会是什么。\nselect * from info where id = 1; +----+------+ | id | name | +----+------+ | 1 | xxx | +----+------+ 1 row in set (0.00 sec) select * from info where id = \u0026#39;1aaaa\u0026#39;; +----+------+ | id | name | +----+------+ | 1 | xxx | +----+------+ 1 row in set, 1 warning (0.01 sec) 两个sql都查到了id = 1的记录，唯一的区别在于第二个sql有一个warning错误。\nshow warnings; +---------+------+-------------------------------------------+ | Level | Code | Message | +---------+------+-------------------------------------------+ | Warning | 1292 | Truncated incorrect DOUBLE value: \u0026#39;1aaaa\u0026#39; | +---------+------+-------------------------------------------+ 1 row in set (0.00 sec) mysql在查询时，会根据字段类型进行转换，这里1aaaa被转为了1。\n","permalink":"https://liudon.com/posts/strings-and-numbers-in-mysql/","summary":"\u003cp\u003e表结构如下\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edesc info;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e+-------+-----------------+------+-----+---------+----------------+\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e Field \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e Type            \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e Null \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e Key \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e Default \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e Extra          \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e+-------+-----------------+------+-----+---------+----------------+\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e id    \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eint\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e) unsigned \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e NO   \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e PRI \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e NULL    \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e auto_increment \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e name  \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e varchar(\u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e)     \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e YES  \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e     \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e NULL    \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e                \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e+-------+-----------------+------+-----+---------+----------------+\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e rows \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e set (\u003cspan style=\"color:#ae81ff\"\u003e0.00\u003c/span\u003e sec)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e执行sql.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einsert into info values (\u0026#39;\u0026#39;, \u0026#39;xxx\u0026#39;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einsert into info values (\u0026#39;\u0026#39;, \u0026#39;yyy\u0026#39;);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e查询记录.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eselect * from info;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+----+------+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e| id | name |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+----+------+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|  1 | xxx  |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|  2 | yyy  |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+----+------+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2 rows in set (0.00 sec)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e执行下面sql.\u003c/p\u003e","title":"mysql中字符串和整型自动转换的问题"},{"content":"问题描述 # 表结构 MySQL \u0026gt; desc user_packages; +----------------+---------------------+------+-----+---------------------+----------------+ | Field | Type | Null | Key | Default | Extra | +----------------+---------------------+------+-----+---------------------+----------------+ | up_id | bigint(20) unsigned | NO | PRI | NULL | auto_increment | | start_date | date | NO | | NULL | | | end_date | date | NO | | NULL | | | up_created | datetime | NO | MUL | 0000-00-00 00:00:00 | | | up_updated | datetime | NO | | 0000-00-00 00:00:00 | | +----------------+---------------------+------+-----+---------------------+----------------+ 5 rows in set (0.00 sec) MySQL \u0026gt; select * from user_packages limit 5; +-------+------------+------------+ | up_id | start_date | end_date | +-------+------------+------------+ | 185 | 2018-04-01 | 2018-06-30 | | 186 | 2018-04-01 | 2018-06-30 | | 187 | 2018-04-01 | 2018-06-30 | | 188 | 2018-04-01 | 2018-06-30 | | 189 | 2018-04-01 | 2018-06-30 | +-------+------------+------------+ 5 rows in set (0.00 sec) 操作过程 需要更新某条记录的end_date字段，执行sql如下：\nMySQL \u0026gt; update user_packages set end_date = \u0026#39;2020-06-06\u0026#39; and up_id = 189 limit 1; Query OK, 1 row affected, 1 warning (0.00 sec) Rows matched: 1 Changed: 1 Warnings: 1 执行完，发现sql写错了！！！！\n正确的sql应该是：\nupdate user_packages set end_date = \u0026#39;2020-06-06\u0026#39; where up_id = 189 limit 1; 误把where写成了and，还好指定了limit = 1，只操作了一条记录。\n回滚 回滚的前提，要先找到更新的那条记录。\nup_id为表的主键，更新前表里已经有这条记录了，主键不能重复，感觉语句应该没有执行成功。\nMySQL \u0026gt; select * from user_packages where up_id = 189; +-------+------------+------------+ | up_id | start_date | end_date | +-------+------------+------------+ | 189 | 2018-04-01 | 2018-06-30 | +-------+------------+------------+ 1 rows in set (0.00 sec) 执行查询语句，表里确实也只有这一条up_id=189的记录。\n感觉这个update语句应该没执行成功，但是没执行成功应该报错的呀。\n这个时候把希望放到了语句结果里的Warnings: 1，是不是没执行成功呢。\n因为紧接着又执行了其他语句，所以也无法通过show warnings查看具体的错误信息了。\n那么这条语句到底执行成功了吗？如果执行成功，那么修改的是哪条记录呢？\n这里通过一番查找，终于定位到了记录。\nAND分隔符，在mysql语句里优先级最高。\nupdate user_packages set end_date = \u0026#39;2020-06-06\u0026#39; and up_id = 189 limit 1; 等效为 update user_packages set end_date = (\u0026#39;2020-06-06\u0026#39; and up_id = 189) limit 1; 即 update user_packages set end_date = 0 limit 1; 因为end_date字段为date类型，所以写入表后的记录为0000-00-00。\nMySQL \u0026gt; select * from user_packages where end_date = \u0026#39;0000-00-00\u0026#39;; +-------+------------+------------+ | up_id | start_date | end_date | +-------+------------+------------+ | 185 | 2018-04-01 | 0000-00-00 | +-------+------------+------------+ 1 rows in set (0.00 sec) 好在这次只更新了一条记录，否则后果无法想象。\n切记不要在现网直接操作DB。\n相关资料：\n一个我认为是bug的UPDATE语句\n","permalink":"https://liudon.com/posts/%E4%B8%80%E6%AC%A1%E6%83%8A%E5%BF%83%E5%8A%A8%E9%AD%84%E7%9A%84mysql%E6%9B%B4%E6%96%B0%E6%93%8D%E4%BD%9C/","summary":"\u003ch4 id=\"问题描述\"\u003e问题描述\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e# 表结构\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eMySQL \u0026gt; desc user_packages;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+----------------+---------------------+------+-----+---------------------+----------------+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e| Field          | Type                | Null | Key | Default             | Extra          |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+----------------+---------------------+------+-----+---------------------+----------------+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e| up_id          | bigint(20) unsigned | NO   | PRI | NULL                | auto_increment |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e| start_date     | date                | NO   |     | NULL                |                |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e| end_date       | date                | NO   |     | NULL                |                |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e| up_created     | datetime            | NO   | MUL | 0000-00-00 00:00:00 |                |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e| up_updated     | datetime            | NO   |     | 0000-00-00 00:00:00 |                |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+----------------+---------------------+------+-----+---------------------+----------------+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e5 rows in set (0.00 sec)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eMySQL \u0026gt; select * from user_packages limit 5;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+-------+------------+------------+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e| up_id | start_date | end_date   |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+-------+------------+------------+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|   185 | 2018-04-01 | 2018-06-30 |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|   186 | 2018-04-01 | 2018-06-30 |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|   187 | 2018-04-01 | 2018-06-30 |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|   188 | 2018-04-01 | 2018-06-30 |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|   189 | 2018-04-01 | 2018-06-30 |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+-------+------------+------------+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e5 rows in set (0.00 sec)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"操作过程\"\u003e操作过程\u003c/h4\u003e\n\u003cp\u003e需要更新某条记录的\u003ccode\u003eend_date\u003c/code\u003e字段，执行sql如下：\u003c/p\u003e","title":"一次惊心动魄的Mysql更新操作"},{"content":" 关于取消住房公积金提取业务纸质申请表及部分业务网上办结的公告\n时间：2020年01月08日\n来源：http://gjj.beijing.gov.cn/web/zwgk/_300583/zxzysx/675803/index.html\n1月8日，北京公积金中心发文，从1月10日开始可以网上办理公积金提取了。\n这里单独讲一下外地领证的情况下，如何修改婚姻状况。\n进入提取页面，默认显示为未说明的婚姻状况。\n点击婚姻状况，选择已婚。\n可以看到婚姻状态相关的输入框都为灰色，不可修改。\n点击婚姻信息修改按钮，会弹出一个民政校验的弹窗，因为我是外地领证，这里查不到信息。\n注意图片右下角还是只有一个婚姻信息修改按钮。\n点击弹窗里的确认按钮。\n这下婚姻状况相关的输入框都可以填写了。\n另外图片右下角里多了一个上传结婚证按钮。\n填写完信息后，点击上传结婚证按钮。\n按说明上传两张结婚证照片，点击确认即可。\n其余的按公积金官网文档操作，最后提交即可。\n关于提取时间，我是前一天中午申请，第二天下午就到账了，效率还是很棒的。\n","permalink":"https://liudon.com/posts/how-to-modify-marital-status/","summary":"\u003cblockquote\u003e\n\u003cp\u003e关于取消住房公积金提取业务纸质申请表及部分业务网上办结的公告\u003c/p\u003e\n\u003cp\u003e时间：2020年01月08日\u003c/p\u003e\n\u003cp\u003e来源：http://gjj.beijing.gov.cn/web/zwgk/_300583/zxzysx/675803/index.html\u003c/p\u003e","title":"如何在北京公积金网站上修改婚姻状况"},{"content":"下载PHP7.2源码，编译安装。\n[root@VM_73_135_centos ~/swoole-src-4.4.12]# php -v PHP 7.2.25 (cli) (built: Nov 26 2019 19:33:23) ( NTS ) Copyright (c) 1997-2018 The PHP Group Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies [root@VM_73_135_centos ~/swoole-src-4.4.12]# 安装Swoole。\nphpize \u0026amp;\u0026amp; \\ ./configure \u0026amp;\u0026amp; \\ make \u0026amp;\u0026amp; make install 安装完，准备修改php.ini文件，结果没找到。\n[root@VM_73_135_centos ~/swoole-src-4.4.12]# ll /usr/local/services/php/etc/ total 88 -rw-r--r-- 1 root root 1364 Nov 26 19:34 pear.conf -rw-r--r-- 1 root root 4508 Nov 26 19:34 php-fpm.conf.default drwxr-xr-x 2 root root 4096 Nov 26 19:34 php-fpm.d [root@VM_73_135_centos ~/swoole-src-4.4.12]# php -i | grep \u0026#34;Loaded Confi\u0026#34; Loaded Configuration File =\u0026gt; (none) 这是什么鬼，居然没有php.ini文件。\n原来PHP源码里提供了两个php.ini文件，你需要按需拷贝到你的PHP的目录下。\n[root@VM_73_135_centos ~/swoole-src-4.4.12]# ll ../php-7.2.25 | grep ini -rw-rw-r-- 1 root root 71232 Nov 20 23:11 php.ini-development -rw-rw-r-- 1 root root 71413 Nov 20 23:11 php.ini-production 拷贝后。\n[root@VM_73_135_centos ~/swoole-src-4.4.12]# php -i | grep \u0026#34;Loaded Confi\u0026#34; Loaded Configuration File =\u0026gt; /usr/local/services/php/etc/php.ini [root@VM_73_135_centos ~/swoole-src-4.4.12]# ","permalink":"https://liudon.com/posts/php7.2%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E5%90%8E%E6%B2%A1%E6%9C%89php.ini%E6%96%87%E4%BB%B6/","summary":"\u003cp\u003e下载PHP7.2源码，编译安装。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[root@VM_73_135_centos ~/swoole-src-4.4.12]# php -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePHP 7.2.25 (cli) (built: Nov 26 2019 19:33:23) ( NTS )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCopyright (c) 1997-2018 The PHP Group\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eZend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[root@VM_73_135_centos ~/swoole-src-4.4.12]# \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e安装Swoole。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ephpize \u0026amp;\u0026amp; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e./configure \u0026amp;\u0026amp; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emake \u0026amp;\u0026amp; make install\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e安装完，准备修改\u003ccode\u003ephp.ini\u003c/code\u003e文件，结果没找到。\u003c/p\u003e","title":"PHP7.2编译安装后没有php.ini文件的问题"},{"content":" Chrome 72及以上版本不支持TLS 1.0和TLS 1.1，访问TLS 1.0或1.1证书的站点会告警，但不阻止用户访问站点。\n为了解决Chrome的这个问题，今天升级了下Nginx的TLS协议版本，这里记录一下如何检测支持的协议版本。\n检测是否支持TLSv1\nopenssl s_client -connect [ip or 域名]:443 -tls1 检测是否支持TLSv1.1\nopenssl s_client -connect [ip or 域名]:443 -tls1_1 检测是否支持TLSv1.2\nopenssl s_client -connect [ip or 域名]:443 -tls1_2 参考资料：How to check what SSL/TLS versions are available for a website?\n","permalink":"https://liudon.com/posts/how-to-check-what-ssl-tls-versions-are-available-for-a-website/","summary":"\u003cblockquote\u003e\n\u003cp\u003eChrome 72及以上版本不支持TLS 1.0和TLS 1.1，访问TLS 1.0或1.1证书的站点会告警，但不阻止用户访问站点。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e为了解决Chrome的这个问题，今天升级了下Nginx的TLS协议版本，这里记录一下如何检测支持的协议版本。\u003c/p\u003e","title":"检测网站支持的SSL/TLS协议版本"},{"content":"俗话说的好，十人九痔。这九个人里就有我一个。 😂\n去年因为痔疮去过一趟医院，医生当时建议手术。\n后来用了点药，没啥症状了，就不放在心上了。\n结果前两天公司团建吃了点辣，痔疮又犯了，大便拉不出来，憋的难受。\n第二天赶紧上医院检查，先上开塞露通便，通完舒服多了。\n医生检查完，让住院手术，这次狠了狠心，手术做掉，一了百了。\n10/15住院 10/16手术 10/22出院 上一次手术是在10年前了，全麻，什么都不知道。\n这次是局麻，上手术台后，医生往腰上打了一针，很疼。\n过了10分钟左右，肛门已经使不上劲了，开始手术。\n过程一直感觉有往里打气，东西插进去。\n医生说有用镇静，后来越来越困，感觉要晕过去，不过还是撑着没睡。\n出来后，整个下午下半身都是麻的，没啥精神，事后就记得媳妇坐在我对面。\n术后6个小时内要小便，不然就得插尿管。\n第二天开始喝流食，然后就是每天医生给换药。\n第三天开始大便，伤口那个痛啊。 😭😭😭\n后来学会在热水里泡着拉，感觉舒服了点。\n每天都要担心大便，担心不拉，或者担心拉的太多。\n出院后第二天，早上大便一盆血，以为是大出血，把媳妇叫回来直奔医院。\n到医院病房，主治医生不在，找了个其他医生给检查，说是有点出血。\n检查的时候塞了个肛门镜，这玩意实在是痛苦。\n然后说病房没工具，上门诊处理吧。然后我就拖着身子，走到门诊。\n主治医生说没啥大事，其实可以不处理，不过你也是来医院了，还是处理一下吧。\n处理的时候，又塞了个肛门镜，然后往屁眼上打了三针封闭，想死的心都有了。\n回家后，继续卧床休息，每天换药。\n朋友们，请一定要好好对你的🌻。\n","permalink":"https://liudon.com/posts/an-unforgettable-surgical-experience/","summary":"\u003cp\u003e俗话说的好，十人九痔。这九个人里就有我一个。 😂\u003c/p\u003e\n\u003cp\u003e去年因为痔疮去过一趟医院，医生当时建议手术。\u003c/p\u003e\n\u003cp\u003e后来用了点药，没啥症状了，就不放在心上了。\u003c/p\u003e\n\u003cp\u003e结果前两天公司团建吃了点辣，痔疮又犯了，大便拉不出来，憋的难受。\u003c/p\u003e","title":"记一次难忘的手术经历"},{"content":"今年的十一火车票非常难抢，12306的候补订单，一直等到时间截止也没订上票。\n只好请了2天假，提前回家了，给自己也放个假休息一下。\n回家的几个经历：\n家里的老洗衣机光荣退休了，年龄比我都要大，爸妈舍不得换一直用着。\n村里今年也要通天然气了，各家各户都要拆煤炉，装壁挂炉，希望天然气供应不出问题。\n全家一起去了趟家门口的园博园，希望以后可以走的更远一些。\n娃确实是长大了，有了自己的想法，有自己的脾气了。\n背景：晚上开着灯，要睡觉了。\n我：睡觉吧。\n娃：爸爸，你说开着灯能睡觉吗？\n我：不能吧\u0026hellip;（不知道她为啥问这个问题）\n娃：那你开着灯让我睡觉，我怎么睡呀！\n我：原来你在这里等着我呢啊\u0026hellip;\n接下来，就努力工作吧。\n","permalink":"https://liudon.com/posts/chinese-national-day/","summary":"\u003cp\u003e今年的十一火车票非常难抢，12306的候补订单，一直等到时间截止也没订上票。\u003c/p\u003e\n\u003cp\u003e只好请了2天假，提前回家了，给自己也放个假休息一下。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e回家的几个经历：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e家里的老洗衣机光荣退休了，年龄比我都要大，爸妈舍不得换一直用着。\u003c/p\u003e","title":"十一假期经历"},{"content":" 这里以Swoft启动http server为例。\nphp bin/swoft http:start\n执行上述命令，启动http server。\n在前面第一篇文章的时候，提到了如何启动http服务。\n今天我们就来看一下http服务是如何启动的，具体实现就在ConsoleProcess这个模块。\n/** * Handle console * @return bool * @throws ReflectionException * @throws ContainerException */ public function handle(): bool { if (!$this-\u0026gt;application-\u0026gt;beforeConsole()) { return false; } /** @var Router $router */ $router = bean(\u0026#39;cliRouter\u0026#39;); // Register console routes CommandRegister::register($router); CLog::info( \u0026#39;Console command route registered (group %d, command %d)\u0026#39;, $router-\u0026gt;groupCount(), $router-\u0026gt;count() ); // Run console application bean(\u0026#39;cliApp\u0026#39;)-\u0026gt;run(); return $this-\u0026gt;application-\u0026gt;afterConsole(); } 这里调用了bean方法获取Bean实例，定义见swoft-component-2.0.5\\src\\bean\\src\\Helper\\Functions.php。\nif (!function_exists(\u0026#39;bean\u0026#39;)) { /** * Get bean by name * * @param string $name Bean name Or alias Or class name * * @return object|string|mixed */ function bean(string $name) { if (BeanFactory::isSingleton(\u0026#39;config\u0026#39;)) { return BeanFactory::getBean($name); } return sprintf(\u0026#39;${%s}\u0026#39;, $name); } } 这里调用了BeanFactory的getBean方法。\n/** * Get object by name * * @param string $name Bean name Or alias Or class name * * @return object|mixed */ public static function getBean(string $name) { return Container::getInstance()-\u0026gt;get($name); } 最终调用的是Swoft\\Bean\\Container下的get方法。\n/** * Finds an entry of the container by its identifier and returns it. * * @param string $id Bean name Or alias Or class name * * When class name will return all of instance for class name * * @return object * @throws InvalidArgumentException */ public function get($id) { // It is singleton if (isset($this-\u0026gt;singletonPool[$id])) { return $this-\u0026gt;singletonPool[$id]; } // Prototype by clone if (isset($this-\u0026gt;prototypePool[$id])) { return clone $this-\u0026gt;prototypePool[$id]; } // Alias name $aliasId = $this-\u0026gt;aliases[$id] ?? \u0026#39;\u0026#39;; if ($aliasId) { return $this-\u0026gt;get($aliasId); } // Class name $classNames = $this-\u0026gt;classNames[$id] ?? []; if ($classNames) { $id = end($classNames); return $this-\u0026gt;get($id); } // Interface if (interface_exists($id)) { $id = InterfaceRegister::getInterfaceInjectBean($id); return $this-\u0026gt;get($id); } // Not defined if (!isset($this-\u0026gt;objectDefinitions[$id])) { throw new InvalidArgumentException(sprintf(\u0026#39;The bean of %s is not defined\u0026#39;, $id)); } /* @var ObjectDefinition $objectDefinition */ $objectDefinition = $this-\u0026gt;objectDefinitions[$id]; // Prototype return $this-\u0026gt;safeNewBean($objectDefinition-\u0026gt;getName()); } 获取对应的ObjectDefinition实例，然后调用safeNewBean方法。\n/** * Secure creation of beans * * @param string $beanName * @param string $id * * @return object|mixed */ private function safeNewBean(string $beanName, string $id = \u0026#39;\u0026#39;) { try { return $this-\u0026gt;newBean($beanName, $id); } catch (Throwable $e) { throw new InvalidArgumentException($e-\u0026gt;getMessage(), 500, $e); } } 这里又调用了newBean方法，在上一篇文章里我们已经讲过这个方法，这里会返回实例化后的Bean类。\n那cliRouter对应的类是说明呢？这个定义在swoft-component-2.0.5\\src\\console\\src\\AutoLoader.php里。\n/** * {@inheritDoc} */ public function beans(): array { return [ \u0026#39;cliApp\u0026#39; =\u0026gt; [ \u0026#39;class\u0026#39; =\u0026gt; Application::class, \u0026#39;version\u0026#39; =\u0026gt; \u0026#39;2.0.0\u0026#39; ], \u0026#39;cliRouter\u0026#39; =\u0026gt; [ \u0026#39;class\u0026#39; =\u0026gt; Router::class, ], \u0026#39;cliDispatcher\u0026#39; =\u0026gt; [ \u0026#39;class\u0026#39; =\u0026gt; ConsoleDispatcher::class, ], ]; } 所以$router = bean('cliRouter')，返回的是一个Swoft\\Console\\Router\\Router类。\n回到ConsoleProcessor类，接着看代码。\nCommandRegister::register($router); 调用了CommandRegister类的register方法。\n/** * @param Router $router * @throws ReflectionException */ public static function register(Router $router): void { $maxLen = 12; $groups = []; $docOpts = [ \u0026#39;allow\u0026#39; =\u0026gt; [\u0026#39;example\u0026#39;] ]; $defInfo = [ \u0026#39;example\u0026#39; =\u0026gt; \u0026#39;\u0026#39;, \u0026#39;description\u0026#39; =\u0026gt; \u0026#39;No description message\u0026#39;, ]; foreach (self::$commands as $class =\u0026gt; $mapping) { $names = []; $group = $mapping[\u0026#39;group\u0026#39;]; // Set ID aliases $router-\u0026gt;setIdAliases($mapping[\u0026#39;idAliases\u0026#39;]); // Set group name aliases $router-\u0026gt;setGroupAliases($group, $mapping[\u0026#39;aliases\u0026#39;]); $refInfo = Swoft::getReflection($class); $mhdInfo = $refInfo[\u0026#39;methods\u0026#39;] ?? []; $grpOpts = $mapping[\u0026#39;options\u0026#39;] ?? []; foreach ($mapping[\u0026#39;commands\u0026#39;] as $method =\u0026gt; $route) { // $method = $route[\u0026#39;method\u0026#39;]; $cmdDesc = $route[\u0026#39;desc\u0026#39;]; $command = $route[\u0026#39;command\u0026#39;]; $idLen = strlen($group . $command); if ($idLen \u0026gt; $maxLen) { $maxLen = $idLen; } $cmdExam = \u0026#39;\u0026#39;; if (!empty($mhdInfo[$method][\u0026#39;comments\u0026#39;])) { $tagInfo = DocBlock::getTags($mhdInfo[$method][\u0026#39;comments\u0026#39;], $docOpts, $defInfo); $cmdDesc = $cmdDesc ?: Str::firstLine($tagInfo[\u0026#39;description\u0026#39;]); $cmdExam = $tagInfo[\u0026#39;example\u0026#39;]; } $route[\u0026#39;group\u0026#39;] = $group; $route[\u0026#39;desc\u0026#39;] = ucfirst($cmdDesc); $route[\u0026#39;example\u0026#39;] = $cmdExam; $route[\u0026#39;options\u0026#39;] = self::mergeOptions($grpOpts, $route[\u0026#39;options\u0026#39;]); // Append group option $route[\u0026#39;enabled\u0026#39;] = $mapping[\u0026#39;enabled\u0026#39;]; $route[\u0026#39;coroutine\u0026#39;] = $mapping[\u0026#39;coroutine\u0026#39;]; $router-\u0026gt;map($group, $command, [$class, $method], $route); $names[] = $command; } $groupExam = \u0026#39;\u0026#39;; $groupDesc = $mapping[\u0026#39;desc\u0026#39;]; if (!empty($refInfo[\u0026#39;comments\u0026#39;])) { $tagInfo = DocBlock::getTags($refInfo[\u0026#39;comments\u0026#39;], $docOpts, $defInfo); $groupDesc = $groupDesc ?: Str::firstLine($tagInfo[\u0026#39;description\u0026#39;]); $groupExam = $tagInfo[\u0026#39;example\u0026#39;]; } $groups[$group] = [ \u0026#39;names\u0026#39; =\u0026gt; $names, \u0026#39;desc\u0026#39; =\u0026gt; ucfirst($groupDesc), \u0026#39;class\u0026#39; =\u0026gt; $class, \u0026#39;alias\u0026#39; =\u0026gt; $mapping[\u0026#39;alias\u0026#39;], \u0026#39;aliases\u0026#39; =\u0026gt; $mapping[\u0026#39;aliases\u0026#39;], \u0026#39;example\u0026#39; =\u0026gt; $groupExam, ]; } $router-\u0026gt;setGroups($groups); // +1 because router-\u0026gt;delimiter $router-\u0026gt;setKeyWidth($maxLen + 1); // clear data self::$commands = []; } 这里遍历了类属性$commands注册路由。\n那么$commands这个属性是哪里来的呢？\n既然开头我们说的是http服务是怎么启动的，这里我们就以http-server来举例，找到swoft-component-2.0.5\\src\\http-server\\src\\Command\\HttpServerCommand.php文件。\n\u0026lt;?php declare(strict_types=1); namespace Swoft\\Http\\Server\\Command; use ReflectionException; use Swoft; use Swoft\\Bean\\Exception\\ContainerException; use Swoft\\Console\\Annotation\\Mapping\\Command; use Swoft\\Console\\Annotation\\Mapping\\CommandMapping; use Swoft\\Console\\Annotation\\Mapping\\CommandOption; use Swoft\\Console\\Helper\\Show; use Swoft\\Http\\Server\\HttpServer; use Swoft\\Server\\Command\\BaseServerCommand; use Swoft\\Server\\Exception\\ServerException; use function bean; use function input; use function output; /** * Provide some commands to manage the swoft HTTP server * * @since 2.0 * * @Command(\u0026#34;http\u0026#34;, alias=\u0026#34;httpsrv\u0026#34;, coroutine=false) * @example * {fullCmd}:start Start the http server * {fullCmd}:stop Stop the http server */ class HttpServerCommand extends BaseServerCommand { /** * Start the http server * * @CommandMapping(usage=\u0026#34;{fullCommand} [-d|--daemon]\u0026#34;) * @CommandOption(\u0026#34;daemon\u0026#34;, short=\u0026#34;d\u0026#34;, desc=\u0026#34;Run server on the background\u0026#34;, type=\u0026#34;bool\u0026#34;, default=\u0026#34;false\u0026#34;) * * @throws ReflectionException * @throws ContainerException * @throws ServerException * @example * {fullCommand} * {fullCommand} -d * */ public function start(): void { $server = $this-\u0026gt;createServer(); // Check if it has started if ($server-\u0026gt;isRunning()) { $masterPid = $server-\u0026gt;getPid(); output()-\u0026gt;writeln(\u0026#34;\u0026lt;error\u0026gt;The HTTP server have been running!(PID: {$masterPid})\u0026lt;/error\u0026gt;\u0026#34;); return; } // Startup settings $this-\u0026gt;configStartOption($server); $settings = $server-\u0026gt;getSetting(); // Setting $workerNum = $settings[\u0026#39;worker_num\u0026#39;]; // Server startup parameters $mainHost = $server-\u0026gt;getHost(); $mainPort = $server-\u0026gt;getPort(); $modeName = $server-\u0026gt;getModeName(); $typeName = $server-\u0026gt;getTypeName(); // Http $panel = [ \u0026#39;HTTP\u0026#39; =\u0026gt; [ \u0026#39;listen\u0026#39; =\u0026gt; $mainHost . \u0026#39;:\u0026#39; . $mainPort, \u0026#39;type\u0026#39; =\u0026gt; $typeName, \u0026#39;mode\u0026#39; =\u0026gt; $modeName, \u0026#39;worker\u0026#39; =\u0026gt; $workerNum, ], ]; // Port Listeners $panel = $this-\u0026gt;appendPortsToPanel($server, $panel); Show::panel($panel); output()-\u0026gt;writeln(\u0026#39;\u0026lt;success\u0026gt;HTTP server start success !\u0026lt;/success\u0026gt;\u0026#39;); // Start the server $server-\u0026gt;start(); } /** * Reload worker processes * * @CommandMapping(usage=\u0026#34;{fullCommand} [-t]\u0026#34;) * @CommandOption(\u0026#34;t\u0026#34;, desc=\u0026#34;Only to reload task processes, default to reload worker and task\u0026#34;) * * @throws ReflectionException * @throws ContainerException */ public function reload(): void { $server = $this-\u0026gt;createServer(); $script = input()-\u0026gt;getScript(); // Check if it has started if (!$server-\u0026gt;isRunning()) { output()-\u0026gt;writeln(\u0026#39;\u0026lt;error\u0026gt;The HTTP server is not running! cannot reload\u0026lt;/error\u0026gt;\u0026#39;); return; } output()-\u0026gt;writef(\u0026#39;\u0026lt;info\u0026gt;Server %s is reloading\u0026lt;/info\u0026gt;\u0026#39;, $script); if ($reloadTask = input()-\u0026gt;hasOpt(\u0026#39;t\u0026#39;)) { Show::notice(\u0026#39;Will only reload task worker\u0026#39;); } if (!$server-\u0026gt;reload($reloadTask)) { Show::error(\u0026#39;The swoole server worker process reload fail!\u0026#39;); return; } output()-\u0026gt;writef(\u0026#39;\u0026lt;success\u0026gt;HTTP server %s reload success\u0026lt;/success\u0026gt;\u0026#39;, $script); } /** * Stop the currently running server * * @CommandMapping() * * @throws ReflectionException * @throws ContainerException */ public function stop(): void { $server = $this-\u0026gt;createServer(); // Check if it has started if (!$server-\u0026gt;isRunning()) { output()-\u0026gt;writeln(\u0026#39;\u0026lt;error\u0026gt;The HTTP server is not running! cannot stop.\u0026lt;/error\u0026gt;\u0026#39;); return; } // Do stopping. $server-\u0026gt;stop(); } /** * Restart the http server * * @CommandMapping(usage=\u0026#34;{fullCommand} [-d|--daemon]\u0026#34;,) * @CommandOption(\u0026#34;daemon\u0026#34;, short=\u0026#34;d\u0026#34;, desc=\u0026#34;Run server on the background\u0026#34;) * * @throws ReflectionException * @throws ContainerException * @example * {fullCommand} * {fullCommand} -d */ public function restart(): void { $server = $this-\u0026gt;createServer(); // Check if it has started if ($server-\u0026gt;isRunning()) { $success = $server-\u0026gt;stop(); if (!$success) { output()-\u0026gt;error(\u0026#39;Stop the old server failed!\u0026#39;); return; } } output()-\u0026gt;writef(\u0026#39;\u0026lt;success\u0026gt;Server HTTP restart success !\u0026lt;/success\u0026gt;\u0026#39;); $server-\u0026gt;startWithDaemonize(); } /** * @return HttpServer * @throws ReflectionException * @throws ContainerException */ private function createServer(): HttpServer { $script = input()-\u0026gt;getScript(); $command = $this-\u0026gt;getFullCommand(); /** @var HttpServer $server */ $server = bean(\u0026#39;httpServer\u0026#39;); $server-\u0026gt;setScriptFile(Swoft::app()-\u0026gt;getPath($script)); $server-\u0026gt;setFullCommand($command); return $server; } } 通过Swoft文档，我们可以看到这里分别使用了类注解和方法注解。\n@Command(\u0026#34;http\u0026#34;, alias=\u0026#34;httpsrv\u0026#34;, coroutine=false) @CommandMapping(usage=\u0026#34;{fullCommand} [-d|--daemon]\u0026#34;) @CommandOption(\u0026#34;daemon\u0026#34;, short=\u0026#34;d\u0026#34;, desc=\u0026#34;Run server on the background\u0026#34;, type=\u0026#34;bool\u0026#34;, default=\u0026#34;false\u0026#34;) ... 通过第二篇文章分析，我们知道这里会自动实例化对应的注解类。\n这里以Swoft\\Console\\Annotation\\Mapping\\CommandMapping这个注解为例，对应的注解解析类为Swoft\\Console\\Annotation\\Parser\\CommandMappingParser。\n\u0026lt;?php declare(strict_types=1); namespace Swoft\\Console\\Annotation\\Parser; use Swoft\\Annotation\\Annotation\\Mapping\\AnnotationParser; use Swoft\\Annotation\\Annotation\\Parser\\Parser; use Swoft\\Annotation\\Exception\\AnnotationException; use Swoft\\Console\\Annotation\\Mapping\\CommandMapping; use Swoft\\Console\\CommandRegister; /** * Class CommandMappingParser * * @since 2.0 * @AnnotationParser(CommandMapping::class) */ class CommandMappingParser extends Parser { /** * Parse object * * @param int $type Class or Method or Property * @param CommandMapping $annotation Annotation object * * @return array * Return empty array is nothing to do! * When class type return [$beanName, $className, $scope, $alias, $size] is to inject bean * When property type return [$propertyValue, $isRef] is to reference value */ public function parse(int $type, $annotation): array { if ($type !== self::TYPE_METHOD) { throw new AnnotationException(\u0026#39;`@CommandMapping` must be defined on class method!\u0026#39;); } $method = $this-\u0026gt;methodName; // add route info for controller action CommandRegister::addRoute($this-\u0026gt;className, $method, [ \u0026#39;command\u0026#39; =\u0026gt; $annotation-\u0026gt;getName() ?: $method, \u0026#39;method\u0026#39; =\u0026gt; $method, \u0026#39;alias\u0026#39; =\u0026gt; $annotation-\u0026gt;getAlias(), \u0026#39;aliases\u0026#39; =\u0026gt; $annotation-\u0026gt;getAliases(), \u0026#39;desc\u0026#39; =\u0026gt; $annotation-\u0026gt;getDesc(), \u0026#39;usage\u0026#39; =\u0026gt; $annotation-\u0026gt;getUsage(), // \u0026#39;example\u0026#39; =\u0026gt; $annotation-\u0026gt;getExample(), ]); return []; } } 看到这里，你应该可以猜到CommandRegister类的$commands是怎么来的了吧。\n我们看下CommandRegister类的addRoute方法，验证下想法。\n/** * @param string $class * @param string $method * @param array $route * * @throws AnnotationException */ public static function addRoute(string $class, string $method, array $route): void { self::checkClass($class); // init some keys $route[\u0026#39;options\u0026#39;] = []; $route[\u0026#39;arguments\u0026#39;] = []; // save self::$commands[$class][\u0026#39;commands\u0026#39;][$method] = $route; } bingo，跟我们猜想的一模一样，这下我们也知道CommandMapping这个注解是用来注册终端的路由信息。\n回到ConsoleProcessor类，接着看代码。\nCLog::info( \u0026#39;Console command route registered (group %d, command %d)\u0026#39;, $router-\u0026gt;groupCount(), $router-\u0026gt;count() ); 打印日志。\n// Run console application bean(\u0026#39;cliApp\u0026#39;)-\u0026gt;run(); 感觉到了重头戏。\n根据前面的代码，我们知道cliApp这个Bean实例对应的类是Swoft\\Console\\Application。\n/** * @return void * @throws ContainerException */ public function run(): void { try { Swoft::trigger(ConsoleEvent::RUN_BEFORE, $this); // Prepare $this-\u0026gt;prepare(); // Get input command $inputCommand = $this-\u0026gt;input-\u0026gt;getCommand(); if (!$inputCommand) { $this-\u0026gt;filterSpecialOption(); } else { $this-\u0026gt;doRun($inputCommand); } Swoft::trigger(ConsoleEvent::RUN_AFTER, $this, $inputCommand); } catch (Throwable $e) { /** @var ConsoleErrorDispatcher $errDispatcher */ $errDispatcher = BeanFactory::getSingleton(ConsoleErrorDispatcher::class); // Handle request error $errDispatcher-\u0026gt;run($e); } } 通过Swoft::trigger，注册了ConsoleEvent::RUN_BEFORE和ConsoleEvent::RUN_AFTER两个事件。\nprotected function prepare(): void { $this-\u0026gt;input = \\input(); $this-\u0026gt;output = \\output(); // load builtin comments vars $this-\u0026gt;setCommentsVars($this-\u0026gt;commentsVars()); } prepare比较简单，这里声明了输入和输出两个类。注意哈，这个后面会用到。\n$inputCommand = $this-\u0026gt;input-\u0026gt;getCommand(); if (!$inputCommand) { $this-\u0026gt;filterSpecialOption(); } else { $this-\u0026gt;doRun($inputCommand); } 获取终端命令行下的输入，如果有输入执行doRun方法。\n/** * @param string $inputCmd * * @return void * @throws ReflectionException * @throws ContainerException * @throws Throwable */ protected function doRun(string $inputCmd): void { $output = $this-\u0026gt;output; /* @var Router $router */ $router = Swoft::getBean(\u0026#39;cliRouter\u0026#39;); $result = $router-\u0026gt;match($inputCmd); // Command not found if ($result[0] === Router::NOT_FOUND) { $names = $router-\u0026gt;getAllNames(); $output-\u0026gt;liteError(\u0026#34;The entered command \u0026#39;{$inputCmd}\u0026#39; is not exists!\u0026#34;); // find similar command names by similar_text() if ($similar = Arr::findSimilar($inputCmd, $names)) { $output-\u0026gt;writef(\u0026#34;\\nMaybe what you mean is:\\n \u0026lt;info\u0026gt;%s\u0026lt;/info\u0026gt;\u0026#34;, implode(\u0026#39;, \u0026#39;, $similar)); } else { $this-\u0026gt;showApplicationHelp(false); } return; } $info = $result[1]; // Only input a group name, display help for the group if ($result[0] === Router::ONLY_GROUP) { $this-\u0026gt;showGroupHelp($info[\u0026#39;group\u0026#39;]); return; } // Display help for a command if ($this-\u0026gt;input-\u0026gt;getSameOpt([\u0026#39;h\u0026#39;, \u0026#39;help\u0026#39;])) { $this-\u0026gt;showCommandHelp($info); return; } // Parse default options and arguments $this-\u0026gt;bindCommandFlags($info); $this-\u0026gt;input-\u0026gt;setCommandId($info[\u0026#39;cmdId\u0026#39;]); Swoft::triggerByArray(ConsoleEvent::DISPATCH_BEFORE, $this, $info); // Call command handler /** @var ConsoleDispatcher $dispatcher */ $dispatcher = Swoft::getSingleton(\u0026#39;cliDispatcher\u0026#39;); $dispatcher-\u0026gt;dispatch($info); Swoft::triggerByArray(ConsoleEvent::DISPATCH_AFTER, $this, $info); } $router = Swoft::getBean(\u0026#39;cliRouter\u0026#39;); $result = $router-\u0026gt;match($inputCmd); 获取cliRouter实例，根据输入匹配路由操作类。\n/** * Match route by input command * * @param array $params [$route] * * @return array * * [ * status, info(array) * ] */ public function match(...$params): array { $delimiter = $this-\u0026gt;delimiter; $inputCmd = trim($params[0], \u0026#34;$delimiter \u0026#34;); $noSepChar = strpos($inputCmd, $delimiter) === false; // If use command ID alias if ($noSepChar \u0026amp;\u0026amp; isset($this-\u0026gt;idAliases[$inputCmd])) { $inputCmd = $this-\u0026gt;idAliases[$inputCmd]; // Must re-check $noSepChar = strpos($inputCmd, $delimiter) === false; } if ($noSepChar \u0026amp;\u0026amp; in_array($inputCmd, $this-\u0026gt;defaultCommands, true)) { $group = $this-\u0026gt;defaultGroup; $command = $this-\u0026gt;resolveCommandAlias($inputCmd); // Only a group name } elseif ($noSepChar) { $group = $this-\u0026gt;resolveGroupAlias($inputCmd); if (isset($this-\u0026gt;groups[$group])) { return [self::ONLY_GROUP, [\u0026#39;group\u0026#39; =\u0026gt; $group]]; } return [self::NOT_FOUND]; } else { $nameList = explode($delimiter, $inputCmd, 2); if (count($nameList) === 2) { [$group, $command] = $nameList; // resolve command alias $command = $this-\u0026gt;resolveCommandAlias($command); } else { $command = \u0026#39;\u0026#39;; // $command = $this-\u0026gt;defaultCommand; $group = $nameList[0]; } } $group = $this-\u0026gt;resolveGroupAlias($group); // build command ID $commandID = $this-\u0026gt;buildCommandID($group, $command); if (isset($this-\u0026gt;routes[$commandID])) { $info = $this-\u0026gt;routes[$commandID]; // append some info $info[\u0026#39;cmdId\u0026#39;] = $commandID; return [self::FOUND, $info]; } if ($group \u0026amp;\u0026amp; isset($this-\u0026gt;groups[$group])) { return [self::ONLY_GROUP, [\u0026#39;group\u0026#39; =\u0026gt; $group]]; } return [self::NOT_FOUND]; } 这里会返回匹配后的路由信息。\n回到doRun方法。\n// Command not found if ($result[0] === Router::NOT_FOUND) { $names = $router-\u0026gt;getAllNames(); $output-\u0026gt;liteError(\u0026#34;The entered command \u0026#39;{$inputCmd}\u0026#39; is not exists!\u0026#34;); // find similar command names by similar_text() if ($similar = Arr::findSimilar($inputCmd, $names)) { $output-\u0026gt;writef(\u0026#34;\\nMaybe what you mean is:\\n \u0026lt;info\u0026gt;%s\u0026lt;/info\u0026gt;\u0026#34;, implode(\u0026#39;, \u0026#39;, $similar)); } else { $this-\u0026gt;showApplicationHelp(false); } return; } $info = $result[1]; // Only input a group name, display help for the group if ($result[0] === Router::ONLY_GROUP) { $this-\u0026gt;showGroupHelp($info[\u0026#39;group\u0026#39;]); return; } // Display help for a command if ($this-\u0026gt;input-\u0026gt;getSameOpt([\u0026#39;h\u0026#39;, \u0026#39;help\u0026#39;])) { $this-\u0026gt;showCommandHelp($info); return; } 根据返回的路由信息进行不同的处理。\n// Parse default options and arguments $this-\u0026gt;bindCommandFlags($info); $this-\u0026gt;input-\u0026gt;setCommandId($info[\u0026#39;cmdId\u0026#39;]); Swoft::triggerByArray(ConsoleEvent::DISPATCH_BEFORE, $this, $info); 绑定默认参数，注册ConsoleEvent::DISPATCH_BEFORE事件。\n// Call command handler /** @var ConsoleDispatcher $dispatcher */ $dispatcher = Swoft::getSingleton(\u0026#39;cliDispatcher\u0026#39;); $dispatcher-\u0026gt;dispatch($info); 获取cliDispatcher的Bean实例，对应Swoft\\Console\\ConsoleDispatcher类，调用dispatch方法。\n/** * @param array $params * * @return void * @throws ReflectionException * @throws Throwable */ public function dispatch(...$params): void { $route = $params[0]; // Handler info [$className, $method] = $route[\u0026#39;handler\u0026#39;]; // Bind method params $params = $this-\u0026gt;getBindParams($className, $method); $object = Swoft::getSingleton($className); // Blocking running if (!$route[\u0026#39;coroutine\u0026#39;]) { $this-\u0026gt;before(get_parent_class($object), $method); PhpHelper::call([$object, $method], ...$params); $this-\u0026gt;after($method); return; } // Hook php io function Runtime::enableCoroutine(); // If in unit test env, has been in coroutine. if (\\defined(\u0026#39;PHPUNIT_COMPOSER_INSTALL\u0026#39;)) { $this-\u0026gt;executeByCo($object, $method, $params); return; } // Coroutine running srun(function () use ($object, $method, $params) { $this-\u0026gt;executeByCo($object, $method, $params); }); } 获取路由对应的类和方法，通过Swoft::getSingleton($className);实例化对象。\n如果未开启协程，则用PhpHelper::call([$object, $method], ...$params);调用对应的方法。\n开启协程的话，使用$this-\u0026gt;executeByCo($object, $method, $params);调用对应的方法。\n我们前面启动命令是php bin/swoft http:start，这里对应的类就是Swoft\\Http\\Server\\Command\\HttpServerCommand，方法就是start。\n/** * Start the http server * * @CommandMapping(usage=\u0026#34;{fullCommand} [-d|--daemon]\u0026#34;) * @CommandOption(\u0026#34;daemon\u0026#34;, short=\u0026#34;d\u0026#34;, desc=\u0026#34;Run server on the background\u0026#34;, type=\u0026#34;bool\u0026#34;, default=\u0026#34;false\u0026#34;) * * @throws ReflectionException * @throws ContainerException * @throws ServerException * @example * {fullCommand} * {fullCommand} -d * */ public function start(): void { $server = $this-\u0026gt;createServer(); // Check if it has started if ($server-\u0026gt;isRunning()) { $masterPid = $server-\u0026gt;getPid(); output()-\u0026gt;writeln(\u0026#34;\u0026lt;error\u0026gt;The HTTP server have been running!(PID: {$masterPid})\u0026lt;/error\u0026gt;\u0026#34;); return; } // Startup settings $this-\u0026gt;configStartOption($server); $settings = $server-\u0026gt;getSetting(); // Setting $workerNum = $settings[\u0026#39;worker_num\u0026#39;]; // Server startup parameters $mainHost = $server-\u0026gt;getHost(); $mainPort = $server-\u0026gt;getPort(); $modeName = $server-\u0026gt;getModeName(); $typeName = $server-\u0026gt;getTypeName(); // Http $panel = [ \u0026#39;HTTP\u0026#39; =\u0026gt; [ \u0026#39;listen\u0026#39; =\u0026gt; $mainHost . \u0026#39;:\u0026#39; . $mainPort, \u0026#39;type\u0026#39; =\u0026gt; $typeName, \u0026#39;mode\u0026#39; =\u0026gt; $modeName, \u0026#39;worker\u0026#39; =\u0026gt; $workerNum, ], ]; // Port Listeners $panel = $this-\u0026gt;appendPortsToPanel($server, $panel); Show::panel($panel); output()-\u0026gt;writeln(\u0026#39;\u0026lt;success\u0026gt;HTTP server start success !\u0026lt;/success\u0026gt;\u0026#39;); // Start the server $server-\u0026gt;start(); } 这里先调用了createServer方法。\n/** * @return HttpServer * @throws ReflectionException * @throws ContainerException */ private function createServer(): HttpServer { $script = input()-\u0026gt;getScript(); $command = $this-\u0026gt;getFullCommand(); /** @var HttpServer $server */ $server = bean(\u0026#39;httpServer\u0026#39;); $server-\u0026gt;setScriptFile(Swoft::app()-\u0026gt;getPath($script)); $server-\u0026gt;setFullCommand($command); return $server; } 获取httpServer的Bean实例。\n框架定义在swoft-component-2.0.5\\src\\http-server\\src\\AutoLoader.php，这里声明了onRequest回调事件。\n\u0026#39;httpServer\u0026#39; =\u0026gt; [ \u0026#39;on\u0026#39; =\u0026gt; [ SwooleEvent::REQUEST =\u0026gt; bean(RequestListener::class) ] ], 业务定义在swoft-2.0.5\\app\\bean.php。\n\u0026#39;httpServer\u0026#39; =\u0026gt; [ \u0026#39;class\u0026#39; =\u0026gt; HttpServer::class, \u0026#39;port\u0026#39; =\u0026gt; 18306, \u0026#39;listener\u0026#39; =\u0026gt; [ \u0026#39;rpc\u0026#39; =\u0026gt; bean(\u0026#39;rpcServer\u0026#39;) ], \u0026#39;process\u0026#39; =\u0026gt; [ // \u0026#39;monitor\u0026#39; =\u0026gt; bean(MonitorProcess::class) // \u0026#39;crontab\u0026#39; =\u0026gt; bean(CrontabProcess::class) ], \u0026#39;on\u0026#39; =\u0026gt; [ // SwooleEvent::TASK =\u0026gt; bean(SyncTaskListener::class), // Enable sync task SwooleEvent::TASK =\u0026gt; bean(TaskListener::class), // Enable task must task and finish event SwooleEvent::FINISH =\u0026gt; bean(FinishListener::class) ], /* @see HttpServer::$setting */ \u0026#39;setting\u0026#39; =\u0026gt; [ \u0026#39;task_worker_num\u0026#39; =\u0026gt; 12, \u0026#39;task_enable_coroutine\u0026#39; =\u0026gt; true ] ], createServer返回的是一个Swoft\\Http\\Server\\HttpServer实例。\n回到HttpServerCommand类的start方法。\n// Start the server $server-\u0026gt;start(); 调用Swoft\\Http\\Server\\HttpServer类的start方法。\n/** * Start server * * @throws ServerException * @throws ContainerException */ public function start(): void { $this-\u0026gt;swooleServer = new \\Swoole\\Http\\Server($this-\u0026gt;host, $this-\u0026gt;port, $this-\u0026gt;mode, $this-\u0026gt;type); $this-\u0026gt;startSwoole(); } 声明Swoole\\Http\\Server对象，调用startSwoole方法。\nSwoft\\Http\\Server\\HttpServer类继承自Swoft\\Server\\Server类，startSwoole方法定义在这个类。\n/** * Bind swoole event and start swoole server * * @throws ServerException * @throws Swoft\\Bean\\Exception\\ContainerException */ protected function startSwoole(): void { if (!$this-\u0026gt;swooleServer) { throw new ServerException(\u0026#39;You must to new server before start swoole!\u0026#39;); } // Always enable coroutine hook on server CLog::info(\u0026#39;Swoole\\Runtime::enableCoroutine\u0026#39;); Runtime::enableCoroutine(); Swoft::trigger(ServerEvent::BEFORE_SETTING, $this); // Set settings $this-\u0026gt;swooleServer-\u0026gt;set($this-\u0026gt;setting); // Update setting property // $this-\u0026gt;setSetting($this-\u0026gt;swooleServer-\u0026gt;setting); // Before Add event Swoft::trigger(ServerEvent::BEFORE_ADDED_EVENT, $this); // Register events $defaultEvents = $this-\u0026gt;defaultEvents(); $swooleEvents = array_merge($defaultEvents, $this-\u0026gt;on); // Add events $this-\u0026gt;addEvent($this-\u0026gt;swooleServer, $swooleEvents, $defaultEvents); //After add event Swoft::trigger(ServerEvent::AFTER_ADDED_EVENT, $this); // Before listener Swoft::trigger(ServerEvent::BEFORE_ADDED_LISTENER, $this); // Add port listener $this-\u0026gt;addListener(); // Before bind process Swoft::trigger(ServerEvent::BEFORE_ADDED_PROCESS, $this); // Add Process Swoft::trigger(ServerEvent::ADDED_PROCESS, $this); // After bind process Swoft::trigger(ServerEvent::AFTER_ADDED_PROCESS, $this); // Trigger event Swoft::trigger(ServerEvent::BEFORE_START, $this, array_keys($swooleEvents)); // Storage server instance self::$server = $this; // Start swoole server $this-\u0026gt;swooleServer-\u0026gt;start(); } $this-\u0026gt;swooleServer-\u0026gt;set($this-\u0026gt;setting); 设置Swoole运行配置。\n// Register events $defaultEvents = $this-\u0026gt;defaultEvents(); $swooleEvents = array_merge($defaultEvents, $this-\u0026gt;on); // Add events $this-\u0026gt;addEvent($this-\u0026gt;swooleServer, $swooleEvents, $defaultEvents); 添加Swoole回调事件。\n// Add port listener $this-\u0026gt;addListener(); 监听端口。\n// Start swoole server $this-\u0026gt;swooleServer-\u0026gt;start(); 启动Swoole\\Http\\Server服务。\n现在服务已经启动了，那http请求是怎么被处理的呢？\n这个我们下一篇再继续讲。\n","permalink":"https://liudon.com/posts/swoft-console-processor-analysis/","summary":"\u003cblockquote\u003e\n\u003cp\u003e这里以Swoft启动http server为例。\u003c/p\u003e\n\u003cp\u003ephp bin/swoft http:start\u003c/p\u003e\n\u003cp\u003e执行上述命令，启动http server。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e在前面第一篇文章的时候，提到了如何启动http服务。\u003c/p\u003e\n\u003cp\u003e今天我们就来看一下http服务是如何启动的，具体实现就在\u003ccode\u003eConsoleProcess\u003c/code\u003e这个模块。\u003c/p\u003e","title":"Swoft 框架运行分析（五） —— ConsoleProcessor模块分析"},{"content":"今天我们来看一下EventProcessor的实现。\n/** * Handle event register * @return bool */ public function handle(): bool { if (!$this-\u0026gt;application-\u0026gt;beforeEvent()) { CLog::warning(\u0026#39;Stop event processor by beforeEvent return false\u0026#39;); return false; } /** @var EventManager $eventManager */ $eventManager = bean(\u0026#39;eventManager\u0026#39;); [$count1, $count2] = ListenerRegister::register($eventManager); CLog::info(\u0026#39;Event manager initialized(%d listener, %d subscriber)\u0026#39;, $count1, $count2); // Trigger a app init event Swoft::trigger(SwoftEvent::APP_INIT_COMPLETE); return $this-\u0026gt;application-\u0026gt;afterEvent(); } 获取eventManager的Bean实例，对应为Swoft\\Event\\Manager\\EventManager类。\n[$count1, $count2] = ListenerRegister::register($eventManager); 调用ListenerRegister类的register方法。\n/** * @param EventManager $em * * @return array */ public static function register(EventManager $em): array { foreach (self::$listeners as $className =\u0026gt; $eventInfo) { $listener = Swoft::getSingleton($className); if (!$listener instanceof EventHandlerInterface) { throw new RuntimeException(\u0026#34;The event listener class \u0026#39;{$className}\u0026#39; must be instanceof EventHandlerInterface\u0026#34;); } $em-\u0026gt;addListener($listener, $eventInfo); } foreach (self::$subscribers as $className) { $subscriber = Swoft::getSingleton($className); if (!$subscriber instanceof EventSubscriberInterface) { throw new RuntimeException(\u0026#34;The event subscriber class \u0026#39;{$className}\u0026#39; must be instanceof EventSubscriberInterface\u0026#34;); } $em-\u0026gt;addSubscriber($subscriber); } $count1 = count(self::$listeners); $count2 = count(self::$subscribers); // Clear data self::$listeners = self::$subscribers = []; return [$count1, $count2]; } 遍历ListenerRegister类下的$listeners和$subscribers属性，绑定事件到eventManager的Bean实例上。\n这里的$listeners和$subscribers是从哪里来的呢？\n这里以http-server为例。\n在swoft-component-2.0.5\\src\\http-server\\src\\Listener目录下，存在下面三个文件。\nAfterRequestListener.php AppInitCompleteListener.php BeforeRequestListener.php 这里我们以AppInitCompleteListener.php为例。\n\u0026lt;?php namespace Swoft\\Http\\Server\\Listener; use function bean; use ReflectionException; use Swoft\\Bean\\Exception\\ContainerException; use Swoft\\Event\\Annotation\\Mapping\\Listener; use Swoft\\Event\\EventHandlerInterface; use Swoft\\Event\\EventInterface; use Swoft\\Http\\Server\\Exception\\HttpServerException; use Swoft\\Http\\Server\\Middleware\\MiddlewareRegister; use Swoft\\Http\\Server\\Router\\Router; use Swoft\\Http\\Server\\Router\\RouteRegister; use Swoft\\SwoftEvent; /** * Class AppInitCompleteListener * @since 2.0 * * @Listener(SwoftEvent::APP_INIT_COMPLETE) */ class AppInitCompleteListener implements EventHandlerInterface { /** * @param EventInterface $event * * @throws ContainerException * @throws ReflectionException * @throws HttpServerException */ public function handle(EventInterface $event): void { /** @var Router $router Register HTTP routes */ $router = bean(\u0026#39;httpRouter\u0026#39;); RouteRegister::registerRoutes($router); // Register middleware MiddlewareRegister::register(); } } 可以看到这里通过@Listener(SwoftEvent::APP_INIT_COMPLETE)，使用了Swoft\\Event\\Annotation\\Mapping\\Listener类注解，对应的注解解析类为Swoft\\Event\\Annotation\\Parser\\ListenerParser。\n\u0026lt;?php declare(strict_types=1); namespace Swoft\\Event\\Annotation\\Parser; use Doctrine\\Common\\Annotations\\AnnotationException; use Swoft\\Annotation\\Annotation\\Mapping\\AnnotationParser; use Swoft\\Annotation\\Annotation\\Parser\\Parser; use Swoft\\Bean\\Annotation\\Mapping\\Bean; use Swoft\\Event\\Annotation\\Mapping\\Listener; use Swoft\\Event\\ListenerRegister; /** * Class ListenerParser * * @since 2.0 * * @AnnotationParser(Listener::class) */ class ListenerParser extends Parser { /** * @param int $type * @param Listener $annotation * * @return array * @throws AnnotationException */ public function parse(int $type, $annotation): array { if ($type !== self::TYPE_CLASS) { throw new AnnotationException(\u0026#39;`@Listener` must be defined on class!\u0026#39;); } // collect listeners ListenerRegister::addListener($this-\u0026gt;className, [ // event name =\u0026gt; listener priority $annotation-\u0026gt;getEvent() =\u0026gt; $annotation-\u0026gt;getPriority() ]); return [$this-\u0026gt;className, $this-\u0026gt;className, Bean::SINGLETON, \u0026#39;\u0026#39;]; } } /** * @param string $className * @param array $definition [event name =\u0026gt; listener priority] */ public static function addListener(string $className, array $definition = []): void { // Collect listeners self::$listeners[$className] = $definition; } 可以看到这里通过ListenerRegister::addListener方法，往ListenerRegister上注册了$listeners属性。\n属性$listeners和$subscribers的值，都是通过注解解析得来。\n这里我们回到EventProcessor类的handle方法。\n// Trigger a app init event Swoft::trigger(SwoftEvent::APP_INIT_COMPLETE); trigger的方法定义如下。\n/** * Trigger an swoft application event * * @param string|EventInterface $event eg: \u0026#39;app.start\u0026#39; \u0026#39;app.stop\u0026#39; * @param null|mixed $target * @param array $params * * @return EventInterface */ public static function trigger($event, $target = null, ...$params): EventInterface { /** @see EventManager::trigger() */ return BeanFactory::getSingleton(\u0026#39;eventManager\u0026#39;)-\u0026gt;trigger($event, $target, $params); } 这里调用了eventManager这个Bean实例的trigger方法。\n/** * Trigger an event. Can accept an EventInterface or will create one if not passed * * @param string|EventInterface $event \u0026#39;app.start\u0026#39; \u0026#39;app.stop\u0026#39; * @param mixed|string $target It is object or string. * @param array|mixed $args * * @return EventInterface * @throws InvalidArgumentException */ public function trigger($event, $target = null, array $args = []): EventInterface { if ($isString = is_string($event)) { $name = trim($event); } elseif ($event instanceof EventInterface) { $name = trim($event-\u0026gt;getName()); } else { throw new InvalidArgumentException(\u0026#39;Invalid event params for trigger event handler\u0026#39;); } $shouldCall = []; // Have matched listener if (isset($this-\u0026gt;listenedEvents[$name])) { $shouldCall[$name] = \u0026#39;\u0026#39;; } // Like \u0026#39;app.db.query\u0026#39; =\u0026gt; prefix: \u0026#39;app.db\u0026#39; if ($pos = strrpos($name, \u0026#39;.\u0026#39;)) { $prefix = substr($name, 0, $pos); // Have a wildcards listener. eg \u0026#39;app.db.*\u0026#39; $wildcardEvent = $prefix . \u0026#39;.*\u0026#39;; if (isset($this-\u0026gt;listenedEvents[$wildcardEvent])) { $shouldCall[$wildcardEvent] = substr($name, $pos + 1); } } // Not found listeners if (!$shouldCall) { return $isString ? $this-\u0026gt;basicEvent : $event; } /** @var EventInterface $event */ if ($isString) { $event = $this-\u0026gt;events[$name] ?? $this-\u0026gt;basicEvent; } // Initial value $event-\u0026gt;setName($name); $event-\u0026gt;setParams($args); $event-\u0026gt;setTarget($target); $event-\u0026gt;stopPropagation(false); // Notify event listeners foreach ($shouldCall as $name =\u0026gt; $method) { $this-\u0026gt;triggerListeners($this-\u0026gt;listeners[$name], $event, $method); if ($event-\u0026gt;isPropagationStopped()) { return $event; } } // Have global wildcards \u0026#39;*\u0026#39; listener. if (isset($this-\u0026gt;listenedEvents[\u0026#39;*\u0026#39;])) { $this-\u0026gt;triggerListeners($this-\u0026gt;listeners[\u0026#39;*\u0026#39;], $event); } return $event; } 如果存在对应的事件，调用triggerListeners方法。\n/** * @param array|ListenerQueue $listeners * @param EventInterface $event * @param string $method */ protected function triggerListeners($listeners, EventInterface $event, string $method = \u0026#39;\u0026#39;): void { // $handled = false; $name = $event-\u0026gt;getName(); $callable = false === strpos($name, \u0026#39;.\u0026#39;); // 循环调用监听器，处理事件 foreach ($listeners as $listener) { if ($event-\u0026gt;isPropagationStopped()) { break; } if (is_object($listener)) { if ($listener instanceof EventHandlerInterface) { $listener-\u0026gt;handle($event); } elseif ($method \u0026amp;\u0026amp; method_exists($listener, $method)) { $listener-\u0026gt;$method($event); } elseif ($callable \u0026amp;\u0026amp; method_exists($listener, $name)) { $listener-\u0026gt;$name($event); } elseif (method_exists($listener, \u0026#39;__invoke\u0026#39;)) { $listener($event); } } elseif (is_callable($listener)) { $listener($event); } } } 遍历事件回调，执行对应方法。\n回到EventProcessor类的handle方法。\n// Trigger a app init event Swoft::trigger(SwoftEvent::APP_INIT_COMPLETE); 这里的事件为SwoftEvent::APP_INIT_COMPLETE，所以这里会执行这个事件下的所有回调。\n这里以Swoft\\Http\\Server\\Listener\\AppInitCompleteListener为例。\n\u0026lt;?php namespace Swoft\\Http\\Server\\Listener; use function bean; use ReflectionException; use Swoft\\Bean\\Exception\\ContainerException; use Swoft\\Event\\Annotation\\Mapping\\Listener; use Swoft\\Event\\EventHandlerInterface; use Swoft\\Event\\EventInterface; use Swoft\\Http\\Server\\Exception\\HttpServerException; use Swoft\\Http\\Server\\Middleware\\MiddlewareRegister; use Swoft\\Http\\Server\\Router\\Router; use Swoft\\Http\\Server\\Router\\RouteRegister; use Swoft\\SwoftEvent; /** * Class AppInitCompleteListener * @since 2.0 * * @Listener(SwoftEvent::APP_INIT_COMPLETE) */ class AppInitCompleteListener implements EventHandlerInterface { /** * @param EventInterface $event * * @throws ContainerException * @throws ReflectionException * @throws HttpServerException */ public function handle(EventInterface $event): void { /** @var Router $router Register HTTP routes */ $router = bean(\u0026#39;httpRouter\u0026#39;); RouteRegister::registerRoutes($router); // Register middleware MiddlewareRegister::register(); } } 这里使用了Swoft\\Event\\Annotation\\Mapping\\Listener注解，对应的事件为SwoftEvent::APP_INIT_COMPLETE。\n按照上面的分析，这里会调用到AppInitCompleteListener的handle方法，获取httpRouter的Bean实例，注册http服务的路由信息和中间件。\n到这里，我们大概清楚了EventProcessor这个模块的作用，注册了所有事件的回调。\n","permalink":"https://liudon.com/posts/swoft-event-processor-analysis/","summary":"\u003cp\u003e今天我们来看一下\u003ccode\u003eEventProcessor\u003c/code\u003e的实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e/**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e Handle event register\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic function handle(): \u003cspan style=\"color:#a6e22e\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!$\u003c/span\u003ethis\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eapplication\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003ebeforeEvent()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        CLog::warning(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Stop event processor by beforeEvent return false\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e false;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e/**\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e EventManager \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003eeventManager \u003cspan style=\"color:#f92672\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003eeventManager \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e bean(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;eventManager\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ecount1, \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ecount2] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ListenerRegister::register(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003eeventManager);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CLog::info(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Event manager initialized(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e listener, \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e subscriber)\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ecount1, \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ecount2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e//\u003c/span\u003e Trigger a app init event\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Swoft::trigger(SwoftEvent::APP_INIT_COMPLETE);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ethis\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eapplication\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eafterEvent();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e获取\u003ccode\u003eeventManager\u003c/code\u003e的\u003ccode\u003eBean\u003c/code\u003e实例，对应为\u003ccode\u003eSwoft\\Event\\Manager\\EventManager\u003c/code\u003e类。\u003c/p\u003e","title":"Swoft 框架运行分析（四） —— EventProcessor模块分析"},{"content":"背景 1月份的时候，用hugo搭了这套博客系统。\n本机写md文件，更新到github，然后通过travis-ci自动发布。\njane主题是通过git submodule引入的，.gitmodules文件内容。\n[submodule \u0026#34;themes/jane\u0026#34;] path = themes/jane url = https://github.com/xianmin/hugo-theme-jane.git 问题 最近几天更新完文章后，发现首页显示出了问题。\n一开始以为是主题有问题，具体描述见首页文章不显示了。\n在issue里： shaform提到使用的并不是最新的版本。 RocFang提到是git submodule使用的问题。\n但是travis-ci每次都是通过git submodule update --init --recursive更新子仓库代码的，为什么会不是最新的代码呢。\n问题重现 接下来，我们用一个新的仓库，来模拟重现一下。\n克隆仓库。\n[root@VM_81_18_centos xx]# git clone git@github.com:Liudon/test.git Cloning into \u0026#39;test\u0026#39;... [root@VM_81_18_centos test]# 添加文件。\n[root@VM_81_18_centos xx]# cd test/ [root@VM_81_18_centos test]# echo \u0026#34;# test\u0026#34; \u0026gt;\u0026gt; README.md [root@VM_81_18_centos test]# git add README.md [root@VM_81_18_centos test]# 引用子仓库。\n[root@VM_81_18_centos test]# git submodule add git@github.com:xianmin/hugo-theme-jane.git theme/jane Cloning into \u0026#39;theme/jane\u0026#39;... remote: Enumerating objects: 216, done. remote: Counting objects: 100% (216/216), done. remote: Compressing objects: 100% (128/128), done. remote: Total 6165 (delta 102), reused 159 (delta 65), pack-reused 5949 Receiving objects: 100% (6165/6165), 3.05 MiB | 1.70 MiB/s, done. Resolving deltas: 100% (3443/3443), done. 查看文件列表。\n[root@VM_81_18_centos test]# ll total 8 -rw-r--r-- 1 root root 5 Sep 6 16:05 README.md drwxr-xr-x 7 root root 4096 Sep 6 16:08 typecho [root@VM_81_18_centos test]# 查看状态。\n[root@VM_81_18_centos test]# git status # On branch master # # Initial commit # # Changes to be committed: # (use \u0026#34;git rm --cached \u0026lt;file\u0026gt;...\u0026#34; to unstage) # #\tnew file: .gitmodules #\tnew file: README.md #\tnew file: typecho # [root@VM_81_18_centos test]# 查看修改。\n[root@VM_81_18_centos test]# git diff --cached diff --git a/.gitmodules b/.gitmodules new file mode 100644 index 0000000..b1ddf70 --- /dev/null +++ b/.gitmodules @@ -0,0 +1,3 @@ +[submodule \u0026#34;typecho\u0026#34;] + path = typecho + url = https://github.com/Liudon/typecho diff --git a/README.md b/README.md new file mode 100644 index 0000000..9daeafb --- /dev/null +++ b/README.md @@ -0,0 +1 @@ +test diff --git a/typecho b/typecho new file mode 160000 index 0000000..b0c4cc7 --- /dev/null +++ b/typecho @@ -0,0 +1 @@ +Subproject commit b0c4cc77a7f8f04661fb9f75d4ba6d4d7915b0f1 [root@VM_81_18_centos test]# 注意最后一行Subproject commit b0c4cc77a7f8f04661fb9f75d4ba6d4d7915b0f1。\n这个commitId是子仓库最新提交的记录id，对应的修改记录。\n提交修改。\n[root@VM_81_18_centos test]# git push -u origin master Counting objects: 4, done. Compressing objects: 100% (3/3), done. Writing objects: 100% (4/4), 362 bytes | 0 bytes/s, done. Total 4 (delta 0), reused 0 (delta 0) To git@github.com:Liudon/test.git * [new branch] master -\u0026gt; master Branch master set up to track remote branch master from origin. [root@VM_81_18_centos test]# 提交后，在github上子仓库后面会多显示一个@xxxxx，这里就是引用的commitId，对应到前面git diff最后一行。\n点击查看提交记录。\n本次提交的commitId为5b11d515db8ad8d299ef1691f115590e0015c3b7，子仓库typecho单独记录了引入时的commitId，为b0c4cc77a7f8f04661fb9f75d4ba6d4d7915b0f1，对应的提交记录。\n接下来克隆子仓库，进行更新提交。\n[root@VM_81_18_centos xx]# git clone git@github.com:Liudon/typecho.git Cloning into \u0026#39;typecho\u0026#39;... remote: Enumerating objects: 1, done. remote: Counting objects: 100% (1/1), done. remote: Total 7179 (delta 0), reused 0 (delta 0), pack-reused 7178 Receiving objects: 100% (7179/7179), 7.26 MiB | 2.02 MiB/s, done. Resolving deltas: 100% (4844/4844), done. [root@VM_81_18_centos xx]# [root@VM_81_18_centos xx]# cd typecho/ [root@VM_81_18_centos typecho]# git log -n 1 commit b0c4cc77a7f8f04661fb9f75d4ba6d4d7915b0f1 Merge: c904005 8fd7492 Author: 祁宁 \u0026lt;magike.net@gmail.com\u0026gt; Date: Tue Nov 18 13:59:52 2014 +0800 Merge branch \u0026#39;master\u0026#39; of https://github.com/typecho/typecho [root@VM_81_18_centos typecho]# 通过git log，确认最新的提交commitId为b0c4cc77a7f8f04661fb9f75d4ba6d4d7915b0f1，与前面的引入的一致。\n[root@VM_81_18_centos typecho]# echo \u0026#34;xxx\u0026#34; \u0026gt; test [root@VM_81_18_centos typecho]# [root@VM_81_18_centos typecho]# git add test [root@VM_81_18_centos typecho]# git commit -m \u0026#39;test\u0026#39; [master 5dcc8f4] test 1 file changed, 1 insertion(+) create mode 100644 test [root@VM_81_18_centos typecho]# git push Counting objects: 4, done. Compressing objects: 100% (2/2), done. Writing objects: 100% (3/3), 252 bytes | 0 bytes/s, done. Total 3 (delta 1), reused 0 (delta 0) remote: Resolving deltas: 100% (1/1), completed with 1 local object. To git@github.com:Liudon/typecho.git b0c4cc7..5dcc8f4 master -\u0026gt; master [root@VM_81_18_centos typecho]# 修改文件提交。\n[root@VM_81_18_centos typecho]# git log -n 1 commit 5dcc8f4e91cc724ba82aba5b9e7955727b58c5c2 Author: liudon \u0026lt;i.mu@qq.com\u0026gt; Date: Fri Sep 6 16:26:47 2019 +0800 test [root@VM_81_18_centos typecho]# 最新提交的commitId为5dcc8f4e91cc724ba82aba5b9e7955727b58c5c2。\n重新克隆test库。\n[root@VM_81_18_centos yy]# git clone git@github.com:Liudon/test.git Cloning into \u0026#39;test\u0026#39;... remote: Enumerating objects: 4, done. remote: Counting objects: 100% (4/4), done. remote: Compressing objects: 100% (3/3), done. remote: Total 4 (delta 0), reused 4 (delta 0), pack-reused 0 Receiving objects: 100% (4/4), done. [root@VM_81_18_centos yy]# cd test/ [root@VM_81_18_centos test]# ll total 8 -rw-r--r-- 1 root root 5 Sep 6 16:31 README.md drwxr-xr-x 2 root root 4096 Sep 6 16:31 typecho [root@VM_81_18_centos test]# ll typecho/ total 0 [root@VM_81_18_centos test]# 这里可以看到typecho目录下是没有文件的。\n[root@VM_81_18_centos test]# git submodule update --init --recursive Submodule \u0026#39;typecho\u0026#39; (https://github.com/Liudon/typecho) registered for path \u0026#39;typecho\u0026#39; Cloning into \u0026#39;typecho\u0026#39;... remote: Enumerating objects: 4, done. remote: Counting objects: 100% (4/4), done. remote: Compressing objects: 100% (3/3), done. remote: Total 7182 (delta 0), reused 2 (delta 0), pack-reused 7178 Receiving objects: 100% (7182/7182), 7.26 MiB | 1.26 MiB/s, done. Resolving deltas: 100% (4844/4844), done. Submodule path \u0026#39;typecho\u0026#39;: checked out \u0026#39;b0c4cc77a7f8f04661fb9f75d4ba6d4d7915b0f1\u0026#39; [root@VM_81_18_centos test]# 更新子仓库代码，这里可以看到最终checkout的版本为b0c4cc77a7f8f04661fb9f75d4ba6d4d7915b0f1，与前面提交时的版本一致。\n问题分析 git submodule add的时候，会记录当时引入时子仓库的版本id。\ngit submodule update --init --recursive，会检出引入时的仓库版本，这就是为啥代码没有更新了。\n问题解决 [root@VM_81_18_centos yy]# git clone git@github.com:Liudon/test.git Cloning into \u0026#39;test\u0026#39;... remote: Enumerating objects: 4, done. remote: Counting objects: 100% (4/4), done. remote: Compressing objects: 100% (3/3), done. remote: Total 4 (delta 0), reused 4 (delta 0), pack-reused 0 Receiving objects: 100% (4/4), done. [root@VM_81_18_centos yy]# [root@VM_81_18_centos yy]# [root@VM_81_18_centos yy]# cd test/ [root@VM_81_18_centos test]# ll total 8 -rw-r--r-- 1 root root 5 Sep 6 16:37 README.md drwxr-xr-x 2 root root 4096 Sep 6 16:37 typecho [root@VM_81_18_centos test]# ll typecho/ total 0 [root@VM_81_18_centos test]# [root@VM_81_18_centos test]# git submodule update --init --remote --recursive Submodule \u0026#39;typecho\u0026#39; (https://github.com/Liudon/typecho) registered for path \u0026#39;typecho\u0026#39; Cloning into \u0026#39;typecho\u0026#39;... remote: Enumerating objects: 4, done. remote: Counting objects: 100% (4/4), done. remote: Compressing objects: 100% (3/3), done. remote: Total 7182 (delta 0), reused 2 (delta 0), pack-reused 7178 Receiving objects: 100% (7182/7182), 7.26 MiB | 1.24 MiB/s, done. Resolving deltas: 100% (4844/4844), done. Submodule path \u0026#39;typecho\u0026#39;: checked out \u0026#39;5dcc8f4e91cc724ba82aba5b9e7955727b58c5c2\u0026#39; [root@VM_81_18_centos test]# 使用git submodule update --init --remote --recursive命令。\n","permalink":"https://liudon.com/posts/a-issues-of-git-submodule-update/","summary":"\u003ch4 id=\"背景\"\u003e背景\u003c/h4\u003e\n\u003cp\u003e1月份的时候，用\u003ccode\u003ehugo\u003c/code\u003e搭了这套博客系统。\u003c/p\u003e\n\u003cp\u003e本机写md文件，更新到\u003ccode\u003egithub\u003c/code\u003e，然后通过\u003ccode\u003etravis-ci\u003c/code\u003e自动发布。\u003c/p\u003e\n\u003cp\u003ejane主题是通过\u003ccode\u003egit submodule\u003c/code\u003e引入的，\u003ccode\u003e.gitmodules\u003c/code\u003e文件内容。\u003c/p\u003e","title":"一个git submodule update引发的问题"},{"content":"发现某个接口请求很慢，但是后端确认接口是很快的。\n在机器上通过shell执行curl命令，确实很快，但是PHP代码里请求又确实很慢。\n业务里用到了Requests这个库，一开始以为是这个库导致的问题。\n在Requests_Transport_cURL类里断点定位了下，确实很慢，curl_getinfo返回的信息如下。\narray ( \u0026#39;url\u0026#39; =\u0026gt; \u0026#39;http://xxxxx\u0026#39;, \u0026#39;content_type\u0026#39; =\u0026gt; \u0026#39;text/html\u0026#39;, \u0026#39;http_code\u0026#39; =\u0026gt; 200, \u0026#39;header_size\u0026#39; =\u0026gt; 64, \u0026#39;request_size\u0026#39; =\u0026gt; 305, \u0026#39;filetime\u0026#39; =\u0026gt; -1, \u0026#39;ssl_verify_result\u0026#39; =\u0026gt; 0, \u0026#39;redirect_count\u0026#39; =\u0026gt; 0, \u0026#39;total_time\u0026#39; =\u0026gt; 2.074094, \u0026#39;namelookup_time\u0026#39; =\u0026gt; 2.5E-5, \u0026#39;connect_time\u0026#39; =\u0026gt; 0.032107, \u0026#39;pretransfer_time\u0026#39; =\u0026gt; 0.032109, \u0026#39;size_upload\u0026#39; =\u0026gt; 186, \u0026#39;size_download\u0026#39; =\u0026gt; 99, \u0026#39;speed_download\u0026#39; =\u0026gt; 47, \u0026#39;speed_upload\u0026#39; =\u0026gt; 89, \u0026#39;download_content_length\u0026#39; =\u0026gt; 99, \u0026#39;upload_content_length\u0026#39; =\u0026gt; 186, \u0026#39;starttransfer_time\u0026#39; =\u0026gt; 2.032866, \u0026#39;redirect_time\u0026#39; =\u0026gt; 0, \u0026#39;certinfo\u0026#39; =\u0026gt; array ( ), ) 这里可以看到starttransfer_time时间很长。\n搜索了一番，发现网上一个case，cURL slow starttransfer_time。\n里面提供了Expect: 100-continue这个header，又搜索了一番这个header资料。\ncurl在发POST请求的时候，如果body大于1k：\n先追加一个Expect: 100-continue请求头信息，发送这个不包含 POST 数据的请求； 如果服务器返回的响应头信息中包含Expect: 100-continue，则表示 Server 愿意接受数据，这时才 POST 真正数据给 Server； 如果等待1s，没有收到服务器肯定或否定的应答，那么继续发起POST请求，这种会导致请求耗时变长。 在机器上抓了个包，执行下面命令。\n注意，下面port后面的80改成实际的端口 tcpdump -A -s 0 \u0026#39;tcp port 80 and (((ip[2:2] - ((ip[0]\u0026amp;0xf)\u0026lt;\u0026lt;2)) - ((tcp[12]\u0026amp;0xf0)\u0026gt;\u0026gt;2)) != 0)\u0026#39; 拿到的包信息。\n09:17:19.421587 IP xxx.54360 \u0026gt; xxxxx:12345: Flags [P.], seq 767181008:767181314, ack 353986709, win 115, options [nop,nop,TS val 2628114858 ecr 1424896084], length 306 E..f.m@.@...d}@. A...XF.-.@...h....s....... ....T.0TPOST /cgi HTTP/1.1 User-Agent: php-requests/1.6 Accept: */* Accept-Encoding: deflate, gzip Referer: http://xxxxx:12345/cgi Content-Length: 188 Expect: 100-continue Content-Type: multipart/form-data; boundary=----------------------------ee2f4d848646 09:17:21.421786 IP xxx.54360 \u0026gt; xxxxx:12345: Flags [P.], seq 306:494, ack 1, win 115, options [nop,nop,TS val 2628115359 ecr 1424896091], length 188 E....n@.@..Md}@. A...XF.-.B...h....s./..... ....T.0[------------------------------ee2f4d848646 Content-Disposition: form-data; name=\u0026#34;req\u0026#34; {\u0026#34;command\u0026#34;:\u0026#34;zzz\u0026#34;,\u0026#34;appId\u0026#34;:\u0026#34;yyyy\u0026#34;} ------------------------------ee2f4d848646-- 09:17:21.458628 IP xxxxx:12345 \u0026gt; xxx.54360: Flags [P.], seq 1:118, ack 494, win 130, options [nop,nop,TS val 1424896593 ecr 2628115359], length 117 E...X.@.5.Q2 A..d}@.F..X..h.-.B......3..... T.2Q....HTTP/1.1 200 OK Content-Type: text/html Content-Length: 53 { \u0026#34;data\u0026#34;: [], \u0026#34;errno\u0026#34;: 0, \u0026#34;error\u0026#34;: \u0026#34;ok\u0026#34; } 可以看到确实是先发了一个100-continue的请求，然后再发的实际POST请求。\n在机器上执行下面的shell命令。\ncurl \u0026#39;http://xxxxx:12345/cgi\u0026#39; -H\u0026#34;Expect: 100-continue\u0026#34; -v 返回如下，可以看到返回的header头里确实没有Expect这项。\n* About to connect() to xxxxx port 12345 (#0) * Trying xxxxx... * Connected to xxxxx (xxxxx) port 12345 (#0) \u0026gt; GET /cloud_cgi HTTP/1.1 \u0026gt; User-Agent: curl/7.29.0 \u0026gt; Host: xxxxx:12345 \u0026gt; Accept: */* \u0026gt; Expect: 100-continue \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Content-Type: text/html \u0026lt; Content-Length: 42 \u0026lt; * Connection #0 to host xxxxx left intact {\u0026#34;errno\u0026#34;:100,\u0026#34;error\u0026#34;:\u0026#34;参数格式错误\u0026#34;} 解决方法：\n请求的时候，header里新增一项。\nExpect: ","permalink":"https://liudon.com/posts/curl-cost-time-long/","summary":"\u003cp\u003e发现某个接口请求很慢，但是后端确认接口是很快的。\u003c/p\u003e\n\u003cp\u003e在机器上通过shell执行curl命令，确实很快，但是PHP代码里请求又确实很慢。\u003c/p\u003e\n\u003cp\u003e业务里用到了\u003ccode\u003eRequests\u003c/code\u003e这个库，一开始以为是这个库导致的问题。\u003c/p\u003e","title":"一个Curl的耗时长的问题"},{"content":"今天讲一下BeanProcessor模块，先看一下handle方法实现。\n/** * Handle bean * * @return bool * @throws ReflectionException * @throws AnnotationException */ public function handle(): bool { if (!$this-\u0026gt;application-\u0026gt;beforeBean()) { return false; } $handler = new BeanHandler(); $definitions = $this-\u0026gt;getDefinitions(); $parsers = AnnotationRegister::getParsers(); $annotations = AnnotationRegister::getAnnotations(); BeanFactory::addDefinitions($definitions); BeanFactory::addAnnotations($annotations); BeanFactory::addParsers($parsers); BeanFactory::setHandler($handler); BeanFactory::init(); /* @var Config $config*/ $config = BeanFactory::getBean(\u0026#39;config\u0026#39;); CLog::info(\u0026#39;config path=%s\u0026#39;, $config-\u0026gt;getPath()); CLog::info(\u0026#39;config env=%s\u0026#39;, $config-\u0026gt;getEnv()); $stats = BeanFactory::getStats(); CLog::info(\u0026#39;Bean is initialized(%s)\u0026#39;, SwoftHelper::formatStats($stats)); return $this-\u0026gt;application-\u0026gt;afterBean(); } 先通过getDefinitions方法获取所有的Bean定义。\n/** * Get bean definitions * * @return array */ private function getDefinitions(): array { // Core beans $definitions = []; $autoLoaders = AnnotationRegister::getAutoLoaders(); // get disabled loaders by application $disabledLoaders = $this-\u0026gt;application-\u0026gt;getDisabledAutoLoaders(); foreach ($autoLoaders as $autoLoader) { if (!$autoLoader instanceof DefinitionInterface) { continue; } $loaderClass = get_class($autoLoader); // If the component is disabled by user. if (isset($disabledLoaders[$loaderClass])) { CLog::info(\u0026#39;Auto loader(%s) is \u0026lt;cyan\u0026gt;disabled\u0026lt;/cyan\u0026gt;, skip handle it\u0026#39;, $loaderClass); continue; } // If the component is not enabled. if ($autoLoader instanceof ComponentInterface \u0026amp;\u0026amp; !$autoLoader-\u0026gt;isEnable()) { continue; } $definitions = ArrayHelper::merge($definitions, $autoLoader-\u0026gt;beans()); } // Bean definitions $beanFile = $this-\u0026gt;application-\u0026gt;getBeanFile(); $beanFile = alias($beanFile); if (!file_exists($beanFile)) { throw new InvalidArgumentException( sprintf(\u0026#39;The bean config file of %s is not exist!\u0026#39;, $beanFile) ); } $beanDefinitions = require $beanFile; $definitions = ArrayHelper::merge($definitions, $beanDefinitions); return $definitions; } 通过AnnotationRegister::getAutoLoaders()拿到所有的autoloader对象，排除掉非DefinitionInterface对象，通过bean()方法获取定义的Bean信息。\n这里以http-server\\src\\AutoLoader.php为例。\n\u0026lt;?php declare(strict_types=1); namespace Swoft\\Http\\Server; use function bean; use function dirname; use ReflectionException; use Swoft\\Bean\\Exception\\ContainerException; use Swoft\\Helper\\ComposerJSON; use Swoft\\Http\\Message\\ContentType; use Swoft\\Http\\Message\\Response; use Swoft\\Http\\Server\\Formatter\\HtmlResponseFormatter; use Swoft\\Http\\Server\\Formatter\\JsonResponseFormatter; use Swoft\\Http\\Server\\Formatter\\XmlResponseFormatter; use Swoft\\Http\\Server\\Parser\\JsonRequestParser; use Swoft\\Http\\Server\\Parser\\XmlRequestParser; use Swoft\\Http\\Server\\Swoole\\RequestListener; use Swoft\\Server\\SwooleEvent; use Swoft\\SwoftComponent; /** * Class AutoLoader * * @since 2.0 */ class AutoLoader extends SwoftComponent { /** * Metadata information for the component. * * @return array * @see ComponentInterface::getMetadata() */ public function metadata(): array { $jsonFile = dirname(__DIR__) . \u0026#39;/composer.json\u0026#39;; return ComposerJSON::open($jsonFile)-\u0026gt;getMetadata(); } /** * Get namespace and dirs * * @return array */ public function getPrefixDirs(): array { return [ __NAMESPACE__ =\u0026gt; __DIR__, ]; } /** * @return array * @throws ReflectionException * @throws ContainerException */ public function beans(): array { return [ \u0026#39;httpRequest\u0026#39; =\u0026gt; [ \u0026#39;parsers\u0026#39; =\u0026gt; [ ContentType::XML =\u0026gt; bean(XmlRequestParser::class), ContentType::JSON =\u0026gt; bean(JsonRequestParser::class), ] ], \u0026#39;httpResponse\u0026#39; =\u0026gt; [ \u0026#39;format\u0026#39; =\u0026gt; Response::FORMAT_JSON, \u0026#39;formatters\u0026#39; =\u0026gt; [ Response::FORMAT_HTML =\u0026gt; bean(HtmlResponseFormatter::class), Response::FORMAT_JSON =\u0026gt; bean(JsonResponseFormatter::class), Response::FORMAT_XML =\u0026gt; bean(XmlResponseFormatter::class), ] ], \u0026#39;acceptFormatter\u0026#39; =\u0026gt; [ \u0026#39;formats\u0026#39; =\u0026gt; [ ContentType::JSON =\u0026gt; Response::FORMAT_JSON, ContentType::HTML =\u0026gt; Response::FORMAT_HTML, ContentType::XML =\u0026gt; Response::FORMAT_XML, ] ], \u0026#39;httpServer\u0026#39; =\u0026gt; [ \u0026#39;on\u0026#39; =\u0026gt; [ SwooleEvent::REQUEST =\u0026gt; bean(RequestListener::class) ] ], \u0026#39;httpRouter\u0026#39; =\u0026gt; [ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;swoft-http-router\u0026#39;, // config \u0026#39;ignoreLastSlash\u0026#39; =\u0026gt; true, \u0026#39;tmpCacheNumber\u0026#39; =\u0026gt; 500, ], ]; } } 可以看到，这里通过beans()定义了httpRequest、httpResponse、acceptFormatter、httpServer和httpRouter四个Bean对象。\n回到上面getDefinitions方法。\n$definitions = ArrayHelper::merge($definitions, $autoLoader-\u0026gt;beans());\n然后将Bean信息添加到definitions对象上。\n之后通过$beanFile = $this-\u0026gt;application-\u0026gt;getBeanFile();获取bean配置文件。\n$beanDefinitions = require $beanFile; $definitions = ArrayHelper::merge($definitions, $beanDefinitions); 加载配置文件，然后将Bean信息添加到definitions对象上。\n可以看到Bean有两种定义方式：通过AutoLoader和配置文件，与swoft官方文档里的说明一致。\n回到handle方法。\n$parsers = AnnotationRegister::getParsers(); $annotations = AnnotationRegister::getAnnotations(); 还记得上一篇文章最后提到的AnnotationRegister类的annotations和parsers两个属性吗？这里通过getParsers和getAnnotations获取这两个属性。\nBeanFactory::addDefinitions($definitions); BeanFactory::addAnnotations($annotations); BeanFactory::addParsers($parsers); BeanFactory::setHandler($handler); BeanFactory::init(); 向BeanFatory注册信息。\n/** * Init * * @return void * @throws AnnotationException * @throws ReflectionException */ public static function init(): void { Container::getInstance()-\u0026gt;init(); } ... /** * Add definitions * * @param array $definitions * * @return void */ public static function addDefinitions(array $definitions): void { Container::getInstance()-\u0026gt;addDefinitions($definitions); } /** * Add annotations * * @param array $annotations * * @return void */ public static function addAnnotations(array $annotations): void { Container::getInstance()-\u0026gt;addAnnotations($annotations); } /** * Add annotation parsers * * @param array $annotationParsers * * @return void */ public static function addParsers(array $annotationParsers): void { Container::getInstance()-\u0026gt;addParsers($annotationParsers); } /** * Set bean handler * * @param HandlerInterface $handler */ public static function setHandler(HandlerInterface $handler): void { Container::getInstance()-\u0026gt;setHandler($handler); } 这里可以看到所有的方法，最终都调用的是Swoft\\Bean\\Container类。\n/** * Add definitions * * @param array $definitions * * @return void */ public function addDefinitions(array $definitions): void { $this-\u0026gt;definitions = ArrayHelper::merge($this-\u0026gt;definitions, $definitions); } /** * Add annotations * * @param array $annotations * * @return void */ public function addAnnotations(array $annotations): void { $this-\u0026gt;annotations = ArrayHelper::merge($this-\u0026gt;annotations, $annotations); } /** * Add annotation parsers * * @param array $annotationParsers * * @return void */ public function addParsers(array $annotationParsers): void { $this-\u0026gt;parsers = ArrayHelper::merge($this-\u0026gt;parsers, $annotationParsers); } /** * @param HandlerInterface $handler */ public function setHandler(HandlerInterface $handler): void { $this-\u0026gt;handler = $handler; } 这四个方法就是注册属性，接下来是重头戏init方法。\n/** * Init * * @throws AnnotationException * @throws ReflectionException */ public function init(): void { // Parse annotations $this-\u0026gt;parseAnnotations(); // Parse definitions $this-\u0026gt;parseDefinitions(); // Init beans $this-\u0026gt;initializeBeans(); } 先看parseAnnotations方法，从代码注释上也可以看出大概，解析注解，接下来我们看下具体是如何实现的。\n/** * Parse annotations * * @throws AnnotationException */ private function parseAnnotations(): void { $annotationParser = new AnnotationObjParser( $this-\u0026gt;definitions, $this-\u0026gt;objectDefinitions, $this-\u0026gt;classNames, $this-\u0026gt;aliases ); $annotationData = $annotationParser-\u0026gt;parseAnnotations($this-\u0026gt;annotations, $this-\u0026gt;parsers); [$this-\u0026gt;definitions, $this-\u0026gt;objectDefinitions, $this-\u0026gt;classNames, $this-\u0026gt;aliases] = $annotationData; } 声明了一个AnnotationObjParser对象，调用了parseAnnotations方法。\n/** * Parse annotations * * @param array $annotations * @param array $parsers * * @return array * @throws AnnotationException */ public function parseAnnotations(array $annotations, array $parsers): array { $this-\u0026gt;parsers = $parsers; $this-\u0026gt;annotations = $annotations; foreach ($this-\u0026gt;annotations as $loadNameSpace =\u0026gt; $classes) { foreach ($classes as $className =\u0026gt; $classOneAnnotations) { $this-\u0026gt;parseOneClassAnnotations($className, $classOneAnnotations); } } return [$this-\u0026gt;definitions, $this-\u0026gt;objectDefinitions, $this-\u0026gt;classNames, $this-\u0026gt;aliases]; } 这里遍历所有的annotation类，循环调用parseOneClassAnnotations进行解析。\n/** * Parse class all annotations * * @param string $className * @param array $classOneAnnotations * * @throws AnnotationException */ private function parseOneClassAnnotations(string $className, array $classOneAnnotations): void { // Check class annotation tag if (!isset($classOneAnnotations[\u0026#39;annotation\u0026#39;])) { throw new AnnotationException( sprintf(\u0026#39;Property or method(%s) with `@xxx` must be define class annotation\u0026#39;, $className) ); } // Parse class annotations $classAnnotations = $classOneAnnotations[\u0026#39;annotation\u0026#39;]; $reflectionClass = $classOneAnnotations[\u0026#39;reflection\u0026#39;]; $classAry = [ $className, $reflectionClass, $classAnnotations ]; $objectDefinition = $this-\u0026gt;parseClassAnnotations($classAry); // Parse property annotations $propertyInjects = []; $propertyAllAnnotations = $classOneAnnotations[\u0026#39;properties\u0026#39;] ?? []; foreach ($propertyAllAnnotations as $propertyName =\u0026gt; $propertyOneAnnotations) { $proAnnotations = $propertyOneAnnotations[\u0026#39;annotation\u0026#39;] ?? []; $propertyInject = $this-\u0026gt;parsePropertyAnnotations($classAry, $propertyName, $proAnnotations); if ($propertyInject) { $propertyInjects[$propertyName] = $propertyInject; } } // Parse method annotations $methodInjects = []; $methodAllAnnotations = $classOneAnnotations[\u0026#39;methods\u0026#39;] ?? []; foreach ($methodAllAnnotations as $methodName =\u0026gt; $methodOneAnnotations) { $methodAnnotations = $methodOneAnnotations[\u0026#39;annotation\u0026#39;] ?? []; $methodInject = $this-\u0026gt;parseMethodAnnotations($classAry, $methodName, $methodAnnotations); if ($methodInject) { $methodInjects[$methodName] = $methodInject; } } if (!$objectDefinition) { return; } if (!empty($propertyInjects)) { $objectDefinition-\u0026gt;setPropertyInjections($propertyInjects); } if (!empty($methodInjects)) { $objectDefinition-\u0026gt;setMethodInjections($methodInjects); } // Object definition and class name $name = $objectDefinition-\u0026gt;getName(); $aliase = $objectDefinition-\u0026gt;getAlias(); $classNames = $this-\u0026gt;classNames[$className] ?? []; $classNames[] = $name; $this-\u0026gt;classNames[$className] = array_unique($classNames); $this-\u0026gt;objectDefinitions[$name] = $objectDefinition; if (!empty($aliase)) { $this-\u0026gt;aliases[$aliase] = $name; } } 这里可以看到分别有类注解、属性注解和方法注解三类。\n对应官方文档的注解说明。\n/** * @param array $classAry * * @return ObjectDefinition|null */ private function parseClassAnnotations(array $classAry): ?ObjectDefinition { [, , $classAnnotations] = $classAry; $objectDefinition = null; foreach ($classAnnotations as $annotation) { $annotationClass = get_class($annotation); if (!isset($this-\u0026gt;parsers[$annotationClass])) { continue; } $parserClassName = $this-\u0026gt;parsers[$annotationClass]; $annotationParser = $this-\u0026gt;getAnnotationParser($classAry, $parserClassName); $data = $annotationParser-\u0026gt;parse(Parser::TYPE_CLASS, $annotation); if (empty($data)) { continue; } if (count($data) !== 4) { throw new InvalidArgumentException(sprintf(\u0026#39;%s annotation parse must be 4 size\u0026#39;, $annotationClass)); } [$name, $className, $scope, $alias] = $data; $name = empty($name) ? $className : $name; if (empty($className)) { throw new InvalidArgumentException(sprintf(\u0026#39;%s with class name can not be empty\u0026#39;, $annotationClass)); } // Multiple coverage $objectDefinition = new ObjectDefinition($name, $className, $scope, $alias); } return $objectDefinition; } 类注解，这里会调用对应解析类的parse方法。\n这里以websocket-server\\src\\Annotation\\Mapping\\WsModule.php和websocket-server\\src\\Annotation\\Parser\\WsModuleParser.php为例。\n\u0026lt;?php declare(strict_types=1); namespace Swoft\\WebSocket\\Server\\Annotation\\Mapping; use Doctrine\\Common\\Annotations\\Annotation\\Attribute; use Doctrine\\Common\\Annotations\\Annotation\\Attributes; use Doctrine\\Common\\Annotations\\Annotation\\Required; use Doctrine\\Common\\Annotations\\Annotation\\Target; use Swoft\\WebSocket\\Server\\MessageParser\\RawTextParser; /** * Class WebSocket - mark an websocket module handler class * * @since 2.0 * * @Annotation * @Target(\u0026#34;CLASS\u0026#34;) * @Attributes( * @Attribute(\u0026#34;name\u0026#34;, type=\u0026#34;string\u0026#34;), * @Attribute(\u0026#34;path\u0026#34;, type=\u0026#34;string\u0026#34;), * @Attribute(\u0026#34;controllers\u0026#34;, type=\u0026#34;array\u0026#34;), * @Attribute(\u0026#34;messageParser\u0026#34;, type=\u0026#34;string\u0026#34;), * ) */ final class WsModule { /** * Websocket route path.(it must unique in a application) * * @var string * @Required() */ private $path = \u0026#39;/\u0026#39;; /** * Module name. * * @var string */ private $name = \u0026#39;\u0026#39;; /** * Routing path params binding. eg. {\u0026#34;id\u0026#34;=\u0026#34;\\d+\u0026#34;} * * @var array */ private $params = []; /** * Message controllers of the module * * @var string[] */ private $controllers = []; /** * Message parser class for the module * * @var string */ private $messageParser = RawTextParser::class; /** * Default message command. Format \u0026#39;controller.action\u0026#39; * * @var string */ private $defaultCommand = \u0026#39;home.index\u0026#39;; /** * Default message opcode for response. please see WEBSOCKET_OPCODE_* * * @var int */ private $defaultOpcode = 0; /** * Class constructor. * * @param array $values */ public function __construct(array $values) { if (isset($values[\u0026#39;value\u0026#39;])) { $this-\u0026gt;path = (string)$values[\u0026#39;value\u0026#39;]; } elseif (isset($values[\u0026#39;path\u0026#39;])) { $this-\u0026gt;path = (string)$values[\u0026#39;path\u0026#39;]; } if (isset($values[\u0026#39;name\u0026#39;])) { $this-\u0026gt;name = (string)$values[\u0026#39;name\u0026#39;]; } if (isset($values[\u0026#39;params\u0026#39;])) { $this-\u0026gt;params = (array)$values[\u0026#39;params\u0026#39;]; } if (isset($values[\u0026#39;controllers\u0026#39;])) { $this-\u0026gt;controllers = (array)$values[\u0026#39;controllers\u0026#39;]; } if (isset($values[\u0026#39;messageParser\u0026#39;])) { $this-\u0026gt;messageParser = $values[\u0026#39;messageParser\u0026#39;]; } if (isset($values[\u0026#39;defaultOpcode\u0026#39;])) { $this-\u0026gt;defaultOpcode = (int)$values[\u0026#39;defaultOpcode\u0026#39;]; } if (isset($values[\u0026#39;defaultCommand\u0026#39;])) { $this-\u0026gt;defaultCommand = $values[\u0026#39;defaultCommand\u0026#39;]; } } /** * @return string */ public function getPath(): string { return $this-\u0026gt;path; } /** * @return string */ public function getMessageParser(): string { return $this-\u0026gt;messageParser; } /** * @return string */ public function getDefaultCommand(): string { return $this-\u0026gt;defaultCommand; } /** * @return string */ public function getName(): string { return $this-\u0026gt;name; } /** * @return string[] */ public function getControllers(): array { return $this-\u0026gt;controllers; } /** * @return array */ public function getParams(): array { return $this-\u0026gt;params; } /** * @return int */ public function getDefaultOpcode(): int { return $this-\u0026gt;defaultOpcode; } } WsModule声明了一个类注解。\n\u0026lt;?php declare(strict_types=1); namespace Swoft\\WebSocket\\Server\\Annotation\\Parser; use Swoft\\Annotation\\Annotation\\Mapping\\AnnotationParser; use Swoft\\Annotation\\Annotation\\Parser\\Parser; use Swoft\\Annotation\\Exception\\AnnotationException; use Swoft\\Bean\\Annotation\\Mapping\\Bean; use Swoft\\Stdlib\\Helper\\Str; use Swoft\\WebSocket\\Server\\Annotation\\Mapping\\WsModule; use Swoft\\WebSocket\\Server\\MessageParser\\RawTextParser; use Swoft\\WebSocket\\Server\\Router\\RouteRegister; /** * Class WebSocketParser * * @since 2.0 * * @AnnotationParser(WsModule::class) */ class WsModuleParser extends Parser { /** * Parse object * * @param int $type Class or Method or Property * @param WsModule $ann Annotation object * * @return array * Return empty array is nothing to do! * When class type return [$beanName, $className, $scope, $alias, $size] is to inject bean * When property type return [$propertyValue, $isRef] is to reference value * @throws AnnotationException */ public function parse(int $type, $ann): array { if ($type !== self::TYPE_CLASS) { throw new AnnotationException(\u0026#39;`@WsModule` must be defined on class!\u0026#39;); } $class = $this-\u0026gt;className; RouteRegister::bindModule($class, [ \u0026#39;path\u0026#39; =\u0026gt; $ann-\u0026gt;getPath() ?: Str::getClassName($class, \u0026#39;Module\u0026#39;), \u0026#39;name\u0026#39; =\u0026gt; $ann-\u0026gt;getName(), \u0026#39;params\u0026#39; =\u0026gt; $ann-\u0026gt;getParams(), \u0026#39;class\u0026#39; =\u0026gt; $class, \u0026#39;eventMethods\u0026#39; =\u0026gt; [], \u0026#39;controllers\u0026#39; =\u0026gt; $ann-\u0026gt;getControllers(), \u0026#39;messageParser\u0026#39; =\u0026gt; $ann-\u0026gt;getMessageParser() ?: RawTextParser::class, \u0026#39;defaultOpcode\u0026#39; =\u0026gt; $ann-\u0026gt;getDefaultOpcode(), \u0026#39;defaultCommand\u0026#39; =\u0026gt; $ann-\u0026gt;getDefaultCommand(), ]); return [$class, $class, Bean::SINGLETON, \u0026#39;\u0026#39;]; } } 按上一篇文章说明，这里WsModuleParser会被标记为注解类WsModule的注解解析类。\n解析注解的时候，会调用WsModuleParser的parse方法，这里通过RouteRegister::bindModule做了一些路由操作，这里后续再讲，这里不做深入介绍。\n属性和方法注解，也是类似的，parseAnnotations方法就讲完了。\n回到Container类的init方法，接下来调用了parseDefinitions方法。\n/** * Parse definitions */ private function parseDefinitions(): void { $annotationParser = new DefinitionObjParser( $this-\u0026gt;definitions, $this-\u0026gt;objectDefinitions, $this-\u0026gt;classNames, $this-\u0026gt;aliases ); // Collect info $definitionData = $annotationParser-\u0026gt;parseDefinitions(); [$this-\u0026gt;definitions, $this-\u0026gt;objectDefinitions, $this-\u0026gt;classNames, $this-\u0026gt;aliases] = $definitionData; } 声明了一个DefinitionObjParser对象，调用了parseDefinitions方法。\n/** * Parse definitions * * @return array */ public function parseDefinitions(): array { foreach ($this-\u0026gt;definitions as $beanName =\u0026gt; $definition) { if (isset($this-\u0026gt;objectDefinitions[$beanName])) { $objectDefinition = $this-\u0026gt;objectDefinitions[$beanName]; $this-\u0026gt;resetObjectDefinition($beanName, $objectDefinition, $definition); continue; } $this-\u0026gt;createObjectDefinition($beanName, $definition); } return [$this-\u0026gt;definitions, $this-\u0026gt;objectDefinitions, $this-\u0026gt;classNames, $this-\u0026gt;aliases]; } 遍历所有的Bean对象，调用createObjectDefinition方法。\n/** * Create object definition for definition * * @param string $beanName * @param array $definition */ private function createObjectDefinition(string $beanName, array $definition): void { $className = $definition[\u0026#39;class\u0026#39;] ?? \u0026#39;\u0026#39;; if (empty($className)) { throw new InvalidArgumentException(sprintf(\u0026#39;%s key for definition must be defined class\u0026#39;, $beanName)); } $objDefinition = new ObjectDefinition($beanName, $className); $objDefinition = $this-\u0026gt;updateObjectDefinitionByDefinition($objDefinition, $definition); $classNames = $this-\u0026gt;classNames[$className] ?? []; $classNames[] = $beanName; $this-\u0026gt;classNames[$className] = array_unique($classNames); $this-\u0026gt;objectDefinitions[$beanName] = $objDefinition; } 声明了ObjectDefinition对象，调用了updateObjectDefinitionByDefinition方法。\n/** * Update definition * * @param ObjectDefinition $objDfn * @param array $definition * * @return ObjectDefinition */ private function updateObjectDefinitionByDefinition(ObjectDefinition $objDfn, array $definition): ObjectDefinition { [$constructInject, $propertyInjects, $option] = $this-\u0026gt;parseDefinition($definition); // Set construct inject if (!empty($constructInject)) { $objDfn-\u0026gt;setConstructorInjection($constructInject); } // Set property inject foreach ($propertyInjects as $propertyName =\u0026gt; $propertyInject) { $objDfn-\u0026gt;setPropertyInjection($propertyName, $propertyInject); } $scopes = [ Bean::SINGLETON, Bean::PROTOTYPE, Bean::REQUEST, ]; $scope = $option[\u0026#39;scope\u0026#39;] ?? \u0026#39;\u0026#39;; $alias = $option[\u0026#39;alias\u0026#39;] ?? \u0026#39;\u0026#39;; if (!empty($scope) \u0026amp;\u0026amp; !in_array($scope, $scopes, true)) { throw new InvalidArgumentException(\u0026#39;Scope for definition is not undefined\u0026#39;); } // Update scope if (!empty($scope)) { $objDfn-\u0026gt;setScope($scope); } // Update alias if (!empty($alias)) { $objDfn-\u0026gt;setAlias($alias); $objAlias = $objDfn-\u0026gt;getAlias(); unset($this-\u0026gt;aliases[$objAlias]); $this-\u0026gt;aliases[$alias] = $objDfn-\u0026gt;getName(); } return $objDfn; } 这里调用了parseDefinition方法进行解析。\n/** * Parse definition * * @param array $definition * * @return array */ private function parseDefinition(array $definition): array { // Remove class key unset($definition[\u0026#39;class\u0026#39;]); // Parse construct $constructArgs = $definition[0] ?? []; if (!is_array($constructArgs)) { throw new InvalidArgumentException(\u0026#39;Construct args for definition must be array\u0026#39;); } // Parse construct args $argInjects = []; foreach ($constructArgs as $arg) { [$argValue, $argIsRef] = $this-\u0026gt;getValueByRef($arg); $argInjects[] = new ArgsInjection($argValue, $argIsRef); } // Set construct inject $constructInject = null; if (!empty($argInjects)) { $constructInject = new MethodInjection(\u0026#39;__construct\u0026#39;, $argInjects); } // Remove construct definition unset($definition[0]); // Parse definition option $option = $definition[\u0026#39;__option\u0026#39;] ?? []; if (!is_array($option)) { throw new InvalidArgumentException(\u0026#39;__option for definition must be array\u0026#39;); } // Remove `__option` unset($definition[\u0026#39;__option\u0026#39;]); // Parse definition properties $propertyInjects = []; foreach ($definition as $propertyName =\u0026gt; $propertyValue) { if (!is_string($propertyName)) { throw new InvalidArgumentException(\u0026#39;Property key from definition must be string\u0026#39;); } [$proValue, $proIsRef] = $this-\u0026gt;getValueByRef($propertyValue); // Parse property for array if (is_array($proValue)) { $proValue = $this-\u0026gt;parseArrayProperty($proValue); } $propertyInject = new PropertyInjection($propertyName, $proValue, $proIsRef); $propertyInjects[$propertyName] = $propertyInject; } return [$constructInject, $propertyInjects, $option]; } 解析__construct方法和传参，解析属性信息。\n回到updateObjectDefinitionByDefinition方法，将__construct和类属性信息注册到ObjectDefinition对象上，到这里parseDefinitions方法执行完毕。\n回到Container类的init方法，接下来调用了initializeBeans方法。\n/** * Initialize beans * * @throws InvalidArgumentException * @throws ReflectionException */ private function initializeBeans(): void { /* @var ObjectDefinition $objectDefinition */ foreach ($this-\u0026gt;objectDefinitions as $beanName =\u0026gt; $objectDefinition) { $scope = $objectDefinition-\u0026gt;getScope(); // Exclude request if ($scope === Bean::REQUEST) { $this-\u0026gt;requestDefinitions[$beanName] = $objectDefinition; unset($this-\u0026gt;objectDefinitions[$beanName]); continue; } // Exclude session if ($scope === Bean::SESSION) { $this-\u0026gt;sessionDefinitions[$beanName] = $objectDefinition; unset($this-\u0026gt;objectDefinitions[$beanName]); continue; } // New bean $this-\u0026gt;newBean($beanName); } } 对于scope不为Bean::REQUEST和Bean::SESSION的，调用newBean方法。\n/** * Initialize beans * * @param string $beanName * @param string $id * * @return object * @throws ReflectionException */ private function newBean(string $beanName, string $id = \u0026#39;\u0026#39;) { // First, check bean whether has been create. if (isset($this-\u0026gt;singletonPool[$beanName]) || isset($this-\u0026gt;prototypePool[$beanName])) { return $this-\u0026gt;get($beanName); } // Get object definition $objectDefinition = $this-\u0026gt;getNewObjectDefinition($beanName); $scope = $objectDefinition-\u0026gt;getScope(); $alias = $objectDefinition-\u0026gt;getAlias(); $className = $objectDefinition-\u0026gt;getClassName(); // Cache reflection class info Reflections::cache($className); // Before initialize bean $this-\u0026gt;beforeInit($beanName, $className, $objectDefinition); $constructArgs = []; $constructInject = $objectDefinition-\u0026gt;getConstructorInjection(); if ($constructInject !== null) { $constructArgs = $this-\u0026gt;getConstructParams($constructInject, $id); } $propertyInjects = $objectDefinition-\u0026gt;getPropertyInjections(); // Proxy class if ($this-\u0026gt;handler) { $className = $this-\u0026gt;handler-\u0026gt;classProxy($className); } $reflectionClass = new ReflectionClass($className); $reflectObject = $this-\u0026gt;newInstance($reflectionClass, $constructArgs); // Inject properties values $this-\u0026gt;newProperty($reflectObject, $reflectionClass, $propertyInjects, $id); // Alias if (!empty($alias)) { $this-\u0026gt;aliases[$alias] = $beanName; } // Call init method if exist if ($reflectionClass-\u0026gt;hasMethod(self::INIT_METHOD)) { $reflectObject-\u0026gt;{self::INIT_METHOD}(); } return $this-\u0026gt;setNewBean($beanName, $scope, $reflectObject, $id); } 通过反射实例化Bean对应的类，注册对应的属性。\n如果类存在self::INIT_METHOD方法，执行此方法。\n/** * @param string $beanName * @param string $scope * @param object $object * @param string $id * * @return object */ private function setNewBean(string $beanName, string $scope, $object, string $id = \u0026#39;\u0026#39;) { switch ($scope) { case Bean::SINGLETON: // Singleton $this-\u0026gt;singletonPool[$beanName] = $object; break; case Bean::PROTOTYPE: $this-\u0026gt;prototypePool[$beanName] = $object; // Clone it $object = clone $object; break; case Bean::REQUEST: $this-\u0026gt;requestPool[$id][$beanName] = $object; break; case Bean::SESSION: $this-\u0026gt;sessionPool[$id][$beanName] = $object; break; } return $object; } setNewBean方法，根据对应的scope信息，将实例化后的反射类注册到对应的类属性上。\n到这里BeanProcessor类就执行完了。\n","permalink":"https://liudon.com/posts/swoft-bean-processor-analysis/","summary":"\u003cp\u003e今天讲一下\u003ccode\u003eBeanProcessor\u003c/code\u003e模块，先看一下\u003ccode\u003ehandle\u003c/code\u003e方法实现。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-gdscript3\" data-lang=\"gdscript3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e/**\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e Handle bean\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003ethrows ReflectionException\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003ethrows AnnotationException\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epublic function handle(): \u003cspan style=\"color:#a6e22e\"\u003ebool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!$\u003c/span\u003ethis\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eapplication\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003ebeforeBean()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e false;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ehandler     \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e new BeanHandler();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003edefinitions \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ethis\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003egetDefinitions();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003eparsers     \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e AnnotationRegister::getParsers();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003eannotations \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e AnnotationRegister::getAnnotations();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BeanFactory::addDefinitions(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003edefinitions);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BeanFactory::addAnnotations(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003eannotations);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BeanFactory::addParsers(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003eparsers);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BeanFactory::setHandler(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ehandler);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BeanFactory::init();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e/*\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e Config \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003econfig\u003cspan style=\"color:#f92672\"\u003e*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003econfig \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e BeanFactory::getBean(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;config\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CLog::info(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;config path=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003econfig\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003egetPath());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CLog::info(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;config env=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003econfig\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003egetEnv());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003estats \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e BeanFactory::getStats();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    CLog::info(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Bean is initialized(\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e)\u0026#39;\u003c/span\u003e, SwoftHelper::formatStats(\u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003estats));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e$\u003c/span\u003ethis\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eapplication\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eafterBean();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e先通过\u003ccode\u003egetDefinitions\u003c/code\u003e方法获取所有的Bean定义。\u003c/p\u003e","title":"Swoft 框架运行分析（三） —— BeanProcessor模块分析"},{"content":"上一篇介绍了，SwoftApplication里定义了6个Processor对象。\nprotected function processors(): array { return [ new EnvProcessor($this), new ConfigProcessor($this), new AnnotationProcessor($this), new BeanProcessor($this), new EventProcessor($this), new ConsoleProcessor($this), ]; } 所有的Processor实现都在framework\\src\\Processor目录下。\nEnvProcessor，运行环境检查。\nConfigProcessor，配置相关。\nAnnotationProcessor，注解相关。\nBeanProcessor，Bean相关。\nEventProcessor，事件相关。\nConsoleProcessor，命令行输入相关。\n今天先讲一下AnnotationProcessor这个模块的实现。\n\u0026lt;?php declare(strict_types=1); namespace Swoft\\Processor; use Exception; use Swoft\\Annotation\\AnnotationRegister; use Swoft\\Log\\Helper\\CLog; /** * Annotation processor * @since 2.0 */ class AnnotationProcessor extends Processor { /** * Handle annotation * * @return bool * @throws Exception */ public function handle(): bool { if (!$this-\u0026gt;application-\u0026gt;beforeAnnotation()) { CLog::warning(\u0026#39;Stop annotation processor by beforeAnnotation return false\u0026#39;); return false; } $app = $this-\u0026gt;application; // Find AutoLoader classes. Parse and collect annotations. AnnotationRegister::load([ \u0026#39;inPhar\u0026#39; =\u0026gt; \\IN_PHAR, \u0026#39;basePath\u0026#39; =\u0026gt; $app-\u0026gt;getBasePath(), \u0026#39;notifyHandler\u0026#39; =\u0026gt; [$this, \u0026#39;notifyHandler\u0026#39;], \u0026#39;disabledAutoLoaders\u0026#39; =\u0026gt; $app-\u0026gt;getDisabledAutoLoaders(), \u0026#39;disabledPsr4Prefixes\u0026#39; =\u0026gt; $app-\u0026gt;getDisabledPsr4Prefixes(), ]); $stats = AnnotationRegister::getClassStats(); CLog::info( \u0026#39;Annotations is scanned(autoloader %d, annotation %d, parser %d)\u0026#39;, $stats[\u0026#39;autoloader\u0026#39;], $stats[\u0026#39;annotation\u0026#39;], $stats[\u0026#39;parser\u0026#39;] ); return $this-\u0026gt;application-\u0026gt;afterAnnotation(); } /** * @param string $type * @param string $target * @see \\Swoft\\Annotation\\Resource\\AnnotationResource::load() */ public function notifyHandler(string $type, $target): void { switch ($type) { case \u0026#39;excludeNs\u0026#39;: CLog::debug(\u0026#39;Exclude namespace %s\u0026#39;, $target); break; case \u0026#39;noLoaderFile\u0026#39;: CLog::debug(\u0026#39;No autoloader on %s\u0026#39;, $target); break; case \u0026#39;noLoaderClass\u0026#39;: CLog::debug(\u0026#39;Autoloader class not exist %s\u0026#39;, $target); break; case \u0026#39;findLoaderClass\u0026#39;: CLog::debug(\u0026#39;Find autoloader %s\u0026#39;, $target); break; case \u0026#39;addLoaderClass\u0026#39;: CLog::debug(\u0026#39;Parse autoloader %s\u0026#39;, $target); break; case \u0026#39;noExistClass\u0026#39;: CLog::debug(\u0026#39;Skip interface or trait %s\u0026#39;, $target); break; } } } 核心逻辑调用AnnotationRegister类的load方法，定义如下。\n/** * Load annotation class * * @param array $config * * @throws AnnotationException * @throws ReflectionException */ public static function load(array $config = []): void { $resource = new AnnotationResource($config); $resource-\u0026gt;load(); } 这里又调用了AnnotationResource类的load方法，定义如下。\n/** * Load annotation resource by find ClassLoader * * @throws AnnotationException * @throws ReflectionException */ public function load(): void { $prefixDirsPsr4 = $this-\u0026gt;classLoader-\u0026gt;getPrefixesPsr4(); foreach ($prefixDirsPsr4 as $ns =\u0026gt; $paths) { // Only scan namespaces if ($this-\u0026gt;onlyNamespaces \u0026amp;\u0026amp; !in_array($ns, $this-\u0026gt;onlyNamespaces, true)) { $this-\u0026gt;notify(\u0026#39;excludeNs\u0026#39;, $ns); continue; } // It is excluded psr4 prefix if ($this-\u0026gt;isExcludedPsr4Prefix($ns)) { AnnotationRegister::registerExcludeNs($ns); $this-\u0026gt;notify(\u0026#39;excludeNs\u0026#39;, $ns); continue; } // Find package/component loader class foreach ($paths as $path) { $loaderFile = $this-\u0026gt;getAnnotationClassLoaderFile($path); if (!file_exists($loaderFile)) { $this-\u0026gt;notify(\u0026#39;noLoaderFile\u0026#39;, $this-\u0026gt;clearBasePath($path), $loaderFile); continue; } $loaderClass = $this-\u0026gt;getAnnotationLoaderClassName($ns); if (!class_exists($loaderClass)) { $this-\u0026gt;notify(\u0026#39;noLoaderClass\u0026#39;, $loaderClass); continue; } $loaderObject = new $loaderClass(); if (!$loaderObject instanceof LoaderInterface) { $this-\u0026gt;notify(\u0026#39;invalidLoader\u0026#39;, $loaderFile); continue; } $this-\u0026gt;notify(\u0026#39;findLoaderClass\u0026#39;, $this-\u0026gt;clearBasePath($loaderFile)); // If is disable, will skip scan annotation classes if (!isset($this-\u0026gt;disabledAutoLoaders[$loaderClass])) { AnnotationRegister::registerAutoLoaderFile($loaderFile); $this-\u0026gt;notify(\u0026#39;addLoaderClass\u0026#39;, $loaderClass); $this-\u0026gt;loadAnnotation($loaderObject); } // Storage auto loader to register AnnotationRegister::addAutoLoader($ns, $loaderObject); } } } 通过getPrefixesPsr4方法获取所有自动加载的命名空间和目录，遍历目录下的AutoLoader.php文件。\n通过registerAutoLoaderFile注册自动加载文件到AnnotationRegister对象上。\n然后调用了loadAnnotation方法，传入的是一个autoload对象。\n/** * Load annotations from an component loader config. * * @param LoaderInterface $loader * * @throws AnnotationException * @throws ReflectionException */ private function loadAnnotation(LoaderInterface $loader): void { $nsPaths = $loader-\u0026gt;getPrefixDirs(); foreach ($nsPaths as $ns =\u0026gt; $path) { $iterator = DirectoryHelper::recursiveIterator($path); /* @var SplFileInfo $splFileInfo */ foreach ($iterator as $splFileInfo) { $filePath = $splFileInfo-\u0026gt;getPathname(); // $splFileInfo-\u0026gt;isDir(); if (is_dir($filePath)) { continue; } $fileName = $splFileInfo-\u0026gt;getFilename(); $extension = $splFileInfo-\u0026gt;getExtension(); if ($this-\u0026gt;loaderClassSuffix !== $extension || strpos($fileName, \u0026#39;.\u0026#39;) === 0) { continue; } // It is exclude filename if (isset($this-\u0026gt;excludedFilenames[$fileName])) { AnnotationRegister::registerExcludeFilename($fileName); continue; } $suffix = sprintf(\u0026#39;.%s\u0026#39;, $this-\u0026gt;loaderClassSuffix); $pathName = str_replace([$path, \u0026#39;/\u0026#39;, $suffix], [\u0026#39;\u0026#39;, \u0026#39;\\\\\u0026#39;, \u0026#39;\u0026#39;], $filePath); $className = sprintf(\u0026#39;%s%s\u0026#39;, $ns, $pathName); // Fix repeat included file bug $autoload = in_array($filePath, $this-\u0026gt;includedFiles, true); // Will filtering: interfaces and traits if (!class_exists($className, !$autoload)) { $this-\u0026gt;notify(\u0026#39;noExistClass\u0026#39;, $className); continue; } // Parse annotation $this-\u0026gt;parseAnnotation($ns, $className); } } } 通过getPrefixDirs获取当前命名空间的目录，然后通过recursiveIterator遍历目录下的文件。\n排除目录和非.php结尾的文件，最后会调用parseAnnotation方法。\n/** * Parser annotation * * @param string $namespace * @param string $className * * @throws AnnotationException * @throws ReflectionException */ private function parseAnnotation(string $namespace, string $className): void { // Annotation reader $reflectionClass = new ReflectionClass($className); // Fix ignore abstract if ($reflectionClass-\u0026gt;isAbstract()) { return; } $oneClassAnnotation = $this-\u0026gt;parseOneClassAnnotation($reflectionClass); if (!empty($oneClassAnnotation)) { AnnotationRegister::registerAnnotation($namespace, $className, $oneClassAnnotation); } } 这里调用了parseOneClassAnnotation方法。\n/** * Parse an class annotation * * @param ReflectionClass $reflectionClass * * @return array * @throws AnnotationException * @throws ReflectionException */ private function parseOneClassAnnotation(ReflectionClass $reflectionClass): array { // Annotation reader $reader = new AnnotationReader(); $className = $reflectionClass-\u0026gt;getName(); $oneClassAnnotation = []; $classAnnotations = $reader-\u0026gt;getClassAnnotations($reflectionClass); // Register annotation parser foreach ($classAnnotations as $classAnnotation) { if ($classAnnotation instanceof AnnotationParser) { $this-\u0026gt;registerParser($className, $classAnnotation); return []; } } // Class annotation if (!empty($classAnnotations)) { $oneClassAnnotation[\u0026#39;annotation\u0026#39;] = $classAnnotations; $oneClassAnnotation[\u0026#39;reflection\u0026#39;] = $reflectionClass; } // Property annotation $reflectionProperties = $reflectionClass-\u0026gt;getProperties(); foreach ($reflectionProperties as $reflectionProperty) { $propertyName = $reflectionProperty-\u0026gt;getName(); $propertyAnnotations = $reader-\u0026gt;getPropertyAnnotations($reflectionProperty); if (!empty($propertyAnnotations)) { $oneClassAnnotation[\u0026#39;properties\u0026#39;][$propertyName][\u0026#39;annotation\u0026#39;] = $propertyAnnotations; $oneClassAnnotation[\u0026#39;properties\u0026#39;][$propertyName][\u0026#39;reflection\u0026#39;] = $reflectionProperty; } } // Method annotation $reflectionMethods = $reflectionClass-\u0026gt;getMethods(); foreach ($reflectionMethods as $reflectionMethod) { $methodName = $reflectionMethod-\u0026gt;getName(); $methodAnnotations = $reader-\u0026gt;getMethodAnnotations($reflectionMethod); if (!empty($methodAnnotations)) { $oneClassAnnotation[\u0026#39;methods\u0026#39;][$methodName][\u0026#39;annotation\u0026#39;] = $methodAnnotations; $oneClassAnnotation[\u0026#39;methods\u0026#39;][$methodName][\u0026#39;reflection\u0026#39;] = $reflectionMethod; } } $parentReflectionClass = $reflectionClass-\u0026gt;getParentClass(); if ($parentReflectionClass !== false) { $parentClassAnnotation = $this-\u0026gt;parseOneClassAnnotation($parentReflectionClass); if (!empty($parentClassAnnotation)) { $oneClassAnnotation[\u0026#39;parent\u0026#39;] = $parentClassAnnotation; } } return $oneClassAnnotation; } 这里就是解析注解了，可以看到分别有类注解、属性注解和方法注解三类。\n这里注意这一段代码。\n// Register annotation parser foreach ($classAnnotations as $classAnnotation) { if ($classAnnotation instanceof AnnotationParser) { $this-\u0026gt;registerParser($className, $classAnnotation); return []; } } 遍历注解类，如果注解属于AnnotationParser实例，这里调用registerParser进行注册。\n/** * @param string $annotationClass * @param string $parserClassName */ public static function registerParser(string $annotationClass, string $parserClassName): void { self::$classStats[\u0026#39;parser\u0026#39;]++; self::$parsers[$annotationClass] = $parserClassName; } 回到上一个方法，解析完后，又调用了AnnotationRegister类的registerAnnotation方法进行注册。\n/** * @param string $loadNamespace * @param string $className * @param array $classAnnotation */ public static function registerAnnotation(string $loadNamespace, string $className, array $classAnnotation): void { self::$classStats[\u0026#39;annotation\u0026#39;]++; self::$annotations[$loadNamespace][$className] = $classAnnotation; } 至此，整个AnnotationProcessor加载完毕，这里AnnotationRegister类里会有annotations和parsers两个属性，这个信息在后面的BeanProcessor里还会用到。\n","permalink":"https://liudon.com/posts/swoft-anaotion-processor-analysis/","summary":"\u003cp\u003e上一篇介绍了，\u003ccode\u003eSwoftApplication\u003c/code\u003e里定义了6个Processor对象。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprotected function processors(): array\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            new EnvProcessor($this),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            new ConfigProcessor($this),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            new AnnotationProcessor($this),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            new BeanProcessor($this),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            new EventProcessor($this),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            new ConsoleProcessor($this),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e所有的Processor实现都在\u003ccode\u003eframework\\src\\Processor\u003c/code\u003e目录下。\u003c/p\u003e","title":"Swoft 框架运行分析（二） —— AnnotationProcessor模块分析"},{"content":" Swoft 是一款基于 Swoole 扩展实现的 PHP 微服务协程框架。\n以前一直都是用的原生swoole框架，最近有时间研究了下衍生的Swoft框架。\n刚开始看的时候，感觉自己像个原始人，完全看不懂。\n官方文档没有介绍Swoft的实现，网上的一些文章跟当前版本代码已经不一致了。\n自己花了一周时间，终于梳理清楚了，看完更觉得自己是个原始人了。\n使用的框架组件版本为：\nswoft-2.0.5 swoft-component-2.0.5 这里以Swoft启动http server为例。\nphp bin/swoft http:start 执行上述命令，启动http server。\n这里执行的是bin/swoft文件。\n#!/usr/bin/env php \u0026lt;?php declare(strict_types=1); // Bootstrap require_once __DIR__ . \u0026#39;/bootstrap.php\u0026#39;; Swoole\\Coroutine::set([ \u0026#39;max_coroutine\u0026#39; =\u0026gt; 300000, ]); // Run application (new \\App\\Application())-\u0026gt;run(); 这里引入bootstrap.php文件，引入composer自动加载文件。\n\u0026lt;?php // Composer autoload require_once dirname(__DIR__) . \u0026#39;/vendor/autoload.php\u0026#39;; 然后执行Swoft\\App\\Application类下的run方法。\n\u0026lt;?php declare(strict_types=1); namespace App; use Swoft\\SwoftApplication; use function date_default_timezone_set; /** * Class Application * * @since 2.0 */ class Application extends SwoftApplication { protected function beforeInit(): void { parent::beforeInit(); date_default_timezone_set(\u0026#39;Asia/Shanghai\u0026#39;); } } 这里继承了Swoft\\SwoftApplication类，这里只粘贴了部分代码。\n/** * Swoft application * * @since 2.0 */ class SwoftApplication implements SwoftInterface, ApplicationInterface { /** * Class constructor. * * @param array $config */ public function __construct(array $config = []) { // Check runtime env SwoftHelper::checkRuntime(); // Storage as global static property. Swoft::$app = $this; // Before init $this-\u0026gt;beforeInit(); // Init console logger $this-\u0026gt;initCLogger(); // Can setting properties by array if ($config) { ObjectHelper::init($this, $config); } // Init application $this-\u0026gt;init(); CLog::info(\u0026#39;Project path is \u0026lt;info\u0026gt;%s\u0026lt;/info\u0026gt;\u0026#39;, $this-\u0026gt;basePath); // After init $this-\u0026gt;afterInit(); } protected function init(): void { // Init system path aliases $this-\u0026gt;findBasePath(); $this-\u0026gt;setSystemAlias(); $processors = $this-\u0026gt;processors(); $this-\u0026gt;processor = new ApplicationProcessor($this); $this-\u0026gt;processor-\u0026gt;addFirstProcessor(...$processors); } /** * Run application */ public function run(): void { if (!$this-\u0026gt;beforeRun()) { return; } $this-\u0026gt;processor-\u0026gt;handle(); } /** * @return ProcessorInterface[] */ protected function processors(): array { return [ new EnvProcessor($this), new ConfigProcessor($this), new AnnotationProcessor($this), new BeanProcessor($this), new EventProcessor($this), new ConsoleProcessor($this), ]; } __construct方法里检查运行环境，初始化日志组件，然后调用了init方法。\ninit方法里声明了processor对象。\nprocessors方法定义了Swoft框架的6个Processor对象。\nrun方法里直接调用processor对象的handler方法。\n\u0026lt;?php namespace Swoft\\Processor; use Swoft\\Stdlib\\Helper\\ArrayHelper; use function get_class; /** * Application processor * @since 2.0 */ class ApplicationProcessor extends Processor { /** * @var ProcessorInterface[] */ private $processors = []; /** * Handle application processors */ public function handle(): bool { $disabled = $this-\u0026gt;application-\u0026gt;getDisabledProcessors(); foreach ($this-\u0026gt;processors as $processor) { $class = get_class($processor); // If is disabled, skip handle. if (isset($disabled[$class])) { continue; } $processor-\u0026gt;handle(); } return true; } /** * Add first processor * * @param Processor[] $processor * @return bool */ public function addFirstProcessor(Processor ...$processor): bool { array_unshift($this-\u0026gt;processors, ... $processor); return true; } /** * Add last processor * * @param Processor[] $processor * * @return bool */ public function addLastProcessor(Processor ...$processor): bool { array_push($this-\u0026gt;processors, ... $processor); return true; } /** * Add processors * * @param int $index * @param Processor[] $processors * * @return bool */ public function addProcessor(int $index, Processor ...$processors): bool { ArrayHelper::insert($this-\u0026gt;processors, $index, ...$processors); return true; } } addFirstProcessor方法把process对象赋值给$this-\u0026gt;processors。\nhandle方法遍历processors对象，循环执行handle方法。\nSwoft的核心逻辑都是靠上面定义的6个Processor模块实现的，接下来一个一个分析。\n","permalink":"https://liudon.com/posts/swoft-execution-analysis/","summary":"\u003cblockquote\u003e\n\u003cp\u003eSwoft 是一款基于 Swoole 扩展实现的 PHP 微服务协程框架。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e以前一直都是用的原生swoole框架，最近有时间研究了下衍生的Swoft框架。\u003c/p\u003e\n\u003cp\u003e刚开始看的时候，感觉自己像个原始人，完全看不懂。\u003c/p\u003e","title":"Swoft 框架运行分析（一）"},{"content":"代码如下\n\u0026lt;?php echo 9.99997600 + 2.4E-5; echo \u0026#34;\\n===\\n\u0026#34;; echo bcadd(9.99997600, 2.4E-5, 8); 结果为\n10 === 9.99997600 问了朋友，查了各种资料，终于在PHP手册里发现了这段话。\nCaution Passing values of type float to a BCMath function which expects a string as operand may not have the desired effect due to the way PHP converts float values to string, namely that the string may be in exponential notation (which is not supported by BCMath), and that the decimal separator is locale dependent (while BCMath always expects a decimal point).\nPHP的BCMath方法不支持科学计数\n解决方法：\necho bcadd(9.99997600, number_format(2.4E-5, 8, \u0026#39;.\u0026#39;, \u0026#39;\u0026#39;), 8); PHP里浮点数相关的运算一定要使用BCMath函数！\n","permalink":"https://liudon.com/posts/bcmath-and-exponential-notation/","summary":"\u003cp\u003e代码如下\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;?php\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho 9.99997600 + 2.4E-5;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho \u0026#34;\\n===\\n\u0026#34;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho bcadd(9.99997600, 2.4E-5, 8);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e结果为\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e===\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e9.99997600\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e问了朋友，查了各种资料，终于在PHP手册里发现了这段话。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCaution\nPassing values of type float to a BCMath function which expects a string as operand may not have the desired effect due to the way PHP converts float values to string, namely that the string may be in exponential notation (which is not supported by BCMath), and that the decimal separator is locale dependent (while BCMath always expects a decimal point).\u003c/p\u003e","title":"BCMath 与 科学计数"},{"content":"什么是Flink。\nApache Flink® - Stateful Computations over Data Streams\nFlink安装参考(官方文档)[https://ci.apache.org/projects/flink/flink-docs-release-1.7/tutorials/local_setup.html]。\n这里使用单机模式。\n问题表现 启动Flink\n[root@VM_80_180_centos /usr/local/flink-1.7.2]# ./bin/start-cluster.sh Starting cluster. Starting standalonesession daemon on host VM_80_180_centos. Starting taskexecutor daemon on host VM_80_180_centos. 查看进程\n[root@VM_80_180_centos /usr/local/flink-1.7.2]# jps 10442 StandaloneSessionClusterEntrypoint 11067 Jps 10909 TaskManagerRunner [root@VM_80_180_centos /usr/local/flink-1.7.2]# 查看日志，发现\u0026quot;Could not resolve ResourceManager address\u0026quot;的错误。\n[root@VM_80_180_centos /usr/local/flink-1.7.2]# tail -f log/flink-root-taskexecutor-*.log 2019-03-27 19:43:23,804 INFO org.apache.flink.runtime.taskexecutor.TaskExecutor - Could not resolve ResourceManager address akka.tcp://flink@localhost:6123/user/resourcemanager, retrying in 10000 ms: Ask timed out on [ActorSelection[Anchor(akka.tcp://flink@localhost:6123/), Path(/user/resourcemanager)]] after [10000 ms]. Sender[null] sent message of type \u0026#34;akka.actor.Identify\u0026#34;.. 2019-03-27 19:43:43,843 INFO org.apache.flink.runtime.taskexecutor.TaskExecutor - Could not resolve ResourceManager address akka.tcp://flink@localhost:6123/user/resourcemanager, retrying in 10000 ms: Ask timed out on [ActorSelection[Anchor(akka.tcp://flink@localhost:6123/), Path(/user/resourcemanager)]] after [10000 ms]. Sender[null] sent message of type \u0026#34;akka.actor.Identify\u0026#34;.. 访问Flink的web页面，发现task数全为0.\n问题原因： Flink的taskmanager.host默认为空，会使用hostname。\n[root@VM_80_180_centos /usr/local/flink-1.7.2]# ping VM_80_180_centos PING VM_80_180_centos (100.125.80.180) 56(84) bytes of data. 64 bytes from VM_80_180_centos (100.125.80.180): icmp_seq=1 ttl=64 time=0.022 ms 64 bytes from VM_80_180_centos (100.125.80.180): icmp_seq=2 ttl=64 time=0.038 ms 64 bytes from VM_80_180_centos (100.125.80.180): icmp_seq=3 ttl=64 time=0.038 ms Flink的jobmanager.host默认为localhost。\n这里jobmanager和taskmanager绑定的ip不一样，导致出错。\n解决办法： vim conf/flink-conf.yaml 添加下面这行配置 taskmanager.host: localhost 保存退出，然后重新启动Flink，这个时候在web端就可以看到有可用task了。\n","permalink":"https://liudon.com/posts/flink-could-not-resolve-resourcemanager-address/","summary":"\u003cp\u003e什么是Flink。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eApache Flink® - Stateful Computations over Data Streams\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eFlink安装参考(官方文档)[https://ci.apache.org/projects/flink/flink-docs-release-1.7/tutorials/local_setup.html]。\u003c/p\u003e","title":"Flink Could Not Resolve Resourcemanager Address"},{"content":"今天安装hugofy的包时，一直遇到\u0026quot;There Are No Packages Available for Installation\u0026quot;的错误。 按网上的教程，配置host，配置代理都不起作用。\n本机确定是可以访问https://packagecontrol.io/channel_v3.json这个地址的。\n然后按教程把这文件放到本地，配置channel指向本地这个文件，然后提示json解析失败。 然后检查这个文件，发现文件好像不全。然后换到其他机器curl这个地址，发现下载下来的文件确实不全，不是合法的json内容。\n又搜索一番后，找到一个case。\nPackage Control: There are no packages available for installation/Server Error\n原来是官方的文件下载出问题了，可以先按上面链接里的方法修改，验证可行。\nMeanwhile, you can add \u0026#34;channels\u0026#34;: [ \u0026#34;https://erhan.in/channel_v3.json\u0026#34; ], to Preferences \u0026gt; Package Settings \u0026gt; Package Control \u0026gt; Settings - User file. This is the latest snapshot of the original JSON file from web.archive.org. ","permalink":"https://liudon.com/posts/there-are-no-packages-available-for-installation/","summary":"\u003cp\u003e今天安装hugofy的包时，一直遇到\u0026quot;There Are No Packages Available for Installation\u0026quot;的错误。\n按网上的教程，配置host，配置代理都不起作用。\u003c/p\u003e","title":"解决Sublime Text安装包时\"There Are No Packages Available for Installation\"的报错"},{"content":"大家好，欢迎来到我的博客。\n建站缘由 大学期间，被人忽悠报了一个计算机培训班，误打误撞的进入了互联网行业。\n11年在网友的帮助下，用wordPress搭建了博客，随即开始了我的博主生涯。\n最开始的域名是liudon.org，取自本人名字的拼音，14年的时候经历了一次域名被盗，好在最后找回了。\n中间又申请了liudon.xyz域名，一直垂涎于liudon.com，终于在22年被我拿到手了，十一年的等待。\n本站使用Hugo生成，存储在Github上，同时部署在Cloudflare Pages和IPFS上。\n将博客部署到Cloudflare Pages\n将博客部署到星际文件系统(IPFS)\n内容版权 本博客（域名为liudon.com）的所有内容（包括但不限于文字、图片、音频、视频等），除特别注明外，均由Liudon创作或原创，版权归Liudon个人所有。\n本博客采用 CC BY-NC-SA 4.0协议 进行内容共享。\n转载请注明作者及原文网址，商业转载请联系本人确认。\n关于本人 喜欢做梦、已婚的80后男生。\n如果您有意见或建议，您可以通过i@liudon.org联系我。\n朋友们 Dvel’s Blog\rLess is More.\r林木木木木木\r木木木木木\r涛叔\r涛叔\r老张博客\r老张博客\r","permalink":"https://liudon.com/about/","summary":"\u003cp\u003e大家好，欢迎来到我的博客。\u003c/p\u003e\n\u003ch2 id=\"建站缘由\"\u003e建站缘由\u003c/h2\u003e\n\u003cp\u003e大学期间，被人忽悠报了一个计算机培训班，误打误撞的进入了互联网行业。\u003c/p\u003e\n\u003cp\u003e11年在网友的帮助下，用wordPress搭建了\u003ca href=\"https://www.liudon.org/1.html\"\u003e博客\u003c/a\u003e，随即开始了我的博主生涯。\u003c/p\u003e","title":"关于本站"},{"content":"从2011年开始写博客，博客程序从WordPress换成Typecho。 早就有想法换成静态博客，一直没时间搞。\n2019年了，新年新气象，用hugo + github pages搞了个新博客。\n具体部署过程参考文章： 利用Travis CI和Hugo將Blog自動部署到Github Pages\n这篇文章就是通过这种方式来更新的，感觉很是神奇。 再也不用关注服务器性能这些东西了，只需要专心写字就好了。\n接下来只需要搞定自定义域名了，域名还在认证中，无法做解析。\n自定义域名也搞定了，以后就可以正式切到新博客了。\n老博客只做备份了，不再更新了。\n","permalink":"https://liudon.com/posts/the-first-post/","summary":"\u003cp\u003e从2011年开始写博客，博客程序从WordPress换成Typecho。\n早就有想法换成静态博客，一直没时间搞。\u003c/p\u003e\n\u003cp\u003e2019年了，新年新气象，用hugo + github pages搞了个新博客。\u003c/p\u003e","title":"2019，新开始"}]